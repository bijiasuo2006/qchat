// Code generated by tool/convert
// DO NOT EDIT!
package data

import (
	"sync/atomic"
	"unsafe"
)

type Coordinator struct {
	AdapterLiveDuration int

	AdjustInterval int

	AdminListen string

	BigRoomMember int

	ChatroomCounterExpire int

	ChatroomCounterSlot int

	ChatroomCounterUploadInterval int

	ChatroomDegradeMembers int

	ChatroomDegradePolicy int

	CommonFilter map[int]string

	CompressComplex bool

	CompressNormal bool

	CompressWeb bool

	CrDropMsgsDtDefault map[int]int

	CrDropMsgsDtPolicy string

	DefaultMsgSend int

	DefaultMsgSendSr map[string]int

	GorpcListen string

	Loglevel int

	MaxCacheNumPerSec int

	MaxCacheSec int

	MaxCacheWhiteListSec int

	MaxKeepMsgs int

	MaxMsgSend int

	MaxMsgSendSr map[string]int

	MinMsgSend int

	MinMsgSendSr map[string]int

	MsgCountDecreaseStep int

	MsgCountIncreaseStep int

	MsgPushInterval int

	MsgSendBlockSize int

	MsgSendInterval int

	MsgTypeMap map[string][]string

	MsgTypeRatio map[string]int

	ServerRooms []string

	SrFlow map[string]string

	SrFlowBase int

	SrFlowFloatingRange int

	StatFadeTime int

	StaticMsgSend map[string]int

	SuperUsers []string

	WebMoreMsgCount map[string]int

	WebMoreMsgPriority int

	WebMoreMsgType int

	WhiteListCluster string
}

var CoordinatorPtr unsafe.Pointer = unsafe.Pointer(&Coordinator{})

func CurrentCoordinator() *Coordinator {
	return (*Coordinator)(atomic.LoadPointer(&CoordinatorPtr))
}

func UpdateCoordinator(v *Coordinator) {
	atomic.StorePointer(&CoordinatorPtr, unsafe.Pointer(v))
}
