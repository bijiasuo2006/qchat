// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: privatechat.proto

#ifndef PROTOBUF_privatechat_2eproto__INCLUDED
#define PROTOBUF_privatechat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace privatechat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_privatechat_2eproto();
void protobuf_AssignDesc_privatechat_2eproto();
void protobuf_ShutdownFile_privatechat_2eproto();

class PChatPair;
class PChatMsg;
class PChatSendMsgRequest;
class PChatSendMsgResponse;
class PChatGetMsgRequest;
class PChatGetMsgResponse;
class PChatNewMsgNotify;
class PChatRequest;
class PChatResponse;
class PChatPacket;

// ===================================================================

class PChatPair : public ::google::protobuf::Message {
 public:
  PChatPair();
  virtual ~PChatPair();

  PChatPair(const PChatPair& from);

  inline PChatPair& operator=(const PChatPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatPair& default_instance();

  void Swap(PChatPair* other);

  // implements Message ----------------------------------------------

  PChatPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatPair& from);
  void MergeFrom(const PChatPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatPair* default_instance_;
};
// -------------------------------------------------------------------

class PChatMsg : public ::google::protobuf::Message {
 public:
  PChatMsg();
  virtual ~PChatMsg();

  PChatMsg(const PChatMsg& from);

  inline PChatMsg& operator=(const PChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatMsg& default_instance();

  void Swap(PChatMsg* other);

  // implements Message ----------------------------------------------

  PChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatMsg& from);
  void MergeFrom(const PChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qihoo.protocol.privatechat.PChatPair msgprops = 1;
  inline int msgprops_size() const;
  inline void clear_msgprops();
  static const int kMsgpropsFieldNumber = 1;
  inline const ::qihoo::protocol::privatechat::PChatPair& msgprops(int index) const;
  inline ::qihoo::protocol::privatechat::PChatPair* mutable_msgprops(int index);
  inline ::qihoo::protocol::privatechat::PChatPair* add_msgprops();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatPair >&
      msgprops() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatPair >*
      mutable_msgprops();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatPair > msgprops_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class PChatSendMsgRequest : public ::google::protobuf::Message {
 public:
  PChatSendMsgRequest();
  virtual ~PChatSendMsgRequest();

  PChatSendMsgRequest(const PChatSendMsgRequest& from);

  inline PChatSendMsgRequest& operator=(const PChatSendMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatSendMsgRequest& default_instance();

  void Swap(PChatSendMsgRequest* other);

  // implements Message ----------------------------------------------

  PChatSendMsgRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatSendMsgRequest& from);
  void MergeFrom(const PChatSendMsgRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string destID = 1;
  inline bool has_destid() const;
  inline void clear_destid();
  static const int kDestIDFieldNumber = 1;
  inline const ::std::string& destid() const;
  inline void set_destid(const ::std::string& value);
  inline void set_destid(const char* value);
  inline void set_destid(const char* value, size_t size);
  inline ::std::string* mutable_destid();
  inline ::std::string* release_destid();
  inline void set_allocated_destid(::std::string* destid);

  // required int32 bodytype = 2;
  inline bool has_bodytype() const;
  inline void clear_bodytype();
  static const int kBodytypeFieldNumber = 2;
  inline ::google::protobuf::int32 bodytype() const;
  inline void set_bodytype(::google::protobuf::int32 value);

  // required bytes bodydata = 3;
  inline bool has_bodydata() const;
  inline void clear_bodydata();
  static const int kBodydataFieldNumber = 3;
  inline const ::std::string& bodydata() const;
  inline void set_bodydata(const ::std::string& value);
  inline void set_bodydata(const char* value);
  inline void set_bodydata(const void* value, size_t size);
  inline ::std::string* mutable_bodydata();
  inline ::std::string* release_bodydata();
  inline void set_allocated_bodydata(::std::string* bodydata);

  // optional uint32 expiresec = 4;
  inline bool has_expiresec() const;
  inline void clear_expiresec();
  static const int kExpiresecFieldNumber = 4;
  inline ::google::protobuf::uint32 expiresec() const;
  inline void set_expiresec(::google::protobuf::uint32 value);

  // optional int32 destappid = 5;
  inline bool has_destappid() const;
  inline void clear_destappid();
  static const int kDestappidFieldNumber = 5;
  inline ::google::protobuf::int32 destappid() const;
  inline void set_destappid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatSendMsgRequest)
 private:
  inline void set_has_destid();
  inline void clear_has_destid();
  inline void set_has_bodytype();
  inline void clear_has_bodytype();
  inline void set_has_bodydata();
  inline void clear_has_bodydata();
  inline void set_has_expiresec();
  inline void clear_has_expiresec();
  inline void set_has_destappid();
  inline void clear_has_destappid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* destid_;
  ::std::string* bodydata_;
  ::google::protobuf::int32 bodytype_;
  ::google::protobuf::uint32 expiresec_;
  ::google::protobuf::int32 destappid_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatSendMsgRequest* default_instance_;
};
// -------------------------------------------------------------------

class PChatSendMsgResponse : public ::google::protobuf::Message {
 public:
  PChatSendMsgResponse();
  virtual ~PChatSendMsgResponse();

  PChatSendMsgResponse(const PChatSendMsgResponse& from);

  inline PChatSendMsgResponse& operator=(const PChatSendMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatSendMsgResponse& default_instance();

  void Swap(PChatSendMsgResponse* other);

  // implements Message ----------------------------------------------

  PChatSendMsgResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatSendMsgResponse& from);
  void MergeFrom(const PChatSendMsgResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional string reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatSendMsgResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 msgid_;
  ::std::string* reason_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatSendMsgResponse* default_instance_;
};
// -------------------------------------------------------------------

class PChatGetMsgRequest : public ::google::protobuf::Message {
 public:
  PChatGetMsgRequest();
  virtual ~PChatGetMsgRequest();

  PChatGetMsgRequest(const PChatGetMsgRequest& from);

  inline PChatGetMsgRequest& operator=(const PChatGetMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatGetMsgRequest& default_instance();

  void Swap(PChatGetMsgRequest* other);

  // implements Message ----------------------------------------------

  PChatGetMsgRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatGetMsgRequest& from);
  void MergeFrom(const PChatGetMsgRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::int64 start() const;
  inline void set_start(::google::protobuf::int64 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatGetMsgRequest)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatGetMsgRequest* default_instance_;
};
// -------------------------------------------------------------------

class PChatGetMsgResponse : public ::google::protobuf::Message {
 public:
  PChatGetMsgResponse();
  virtual ~PChatGetMsgResponse();

  PChatGetMsgResponse(const PChatGetMsgResponse& from);

  inline PChatGetMsgResponse& operator=(const PChatGetMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatGetMsgResponse& default_instance();

  void Swap(PChatGetMsgResponse* other);

  // implements Message ----------------------------------------------

  PChatGetMsgResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatGetMsgResponse& from);
  void MergeFrom(const PChatGetMsgResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qihoo.protocol.privatechat.PChatMsg msglist = 1;
  inline int msglist_size() const;
  inline void clear_msglist();
  static const int kMsglistFieldNumber = 1;
  inline const ::qihoo::protocol::privatechat::PChatMsg& msglist(int index) const;
  inline ::qihoo::protocol::privatechat::PChatMsg* mutable_msglist(int index);
  inline ::qihoo::protocol::privatechat::PChatMsg* add_msglist();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatMsg >&
      msglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatMsg >*
      mutable_msglist();

  // optional int64 maxid = 2;
  inline bool has_maxid() const;
  inline void clear_maxid();
  static const int kMaxidFieldNumber = 2;
  inline ::google::protobuf::int64 maxid() const;
  inline void set_maxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatGetMsgResponse)
 private:
  inline void set_has_maxid();
  inline void clear_has_maxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatMsg > msglist_;
  ::google::protobuf::int64 maxid_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatGetMsgResponse* default_instance_;
};
// -------------------------------------------------------------------

class PChatNewMsgNotify : public ::google::protobuf::Message {
 public:
  PChatNewMsgNotify();
  virtual ~PChatNewMsgNotify();

  PChatNewMsgNotify(const PChatNewMsgNotify& from);

  inline PChatNewMsgNotify& operator=(const PChatNewMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatNewMsgNotify& default_instance();

  void Swap(PChatNewMsgNotify* other);

  // implements Message ----------------------------------------------

  PChatNewMsgNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatNewMsgNotify& from);
  void MergeFrom(const PChatNewMsgNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.privatechat.PChatMsg msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::qihoo::protocol::privatechat::PChatMsg& msg() const;
  inline ::qihoo::protocol::privatechat::PChatMsg* mutable_msg();
  inline ::qihoo::protocol::privatechat::PChatMsg* release_msg();
  inline void set_allocated_msg(::qihoo::protocol::privatechat::PChatMsg* msg);

  // optional int64 maxid = 2;
  inline bool has_maxid() const;
  inline void clear_maxid();
  static const int kMaxidFieldNumber = 2;
  inline ::google::protobuf::int64 maxid() const;
  inline void set_maxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatNewMsgNotify)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_maxid();
  inline void clear_has_maxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::privatechat::PChatMsg* msg_;
  ::google::protobuf::int64 maxid_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatNewMsgNotify* default_instance_;
};
// -------------------------------------------------------------------

class PChatRequest : public ::google::protobuf::Message {
 public:
  PChatRequest();
  virtual ~PChatRequest();

  PChatRequest(const PChatRequest& from);

  inline PChatRequest& operator=(const PChatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatRequest& default_instance();

  void Swap(PChatRequest* other);

  // implements Message ----------------------------------------------

  PChatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatRequest& from);
  void MergeFrom(const PChatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 payload = 1;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 1;
  inline ::google::protobuf::int32 payload() const;
  inline void set_payload(::google::protobuf::int32 value);

  // optional .qihoo.protocol.privatechat.PChatSendMsgRequest sendreq = 2;
  inline bool has_sendreq() const;
  inline void clear_sendreq();
  static const int kSendreqFieldNumber = 2;
  inline const ::qihoo::protocol::privatechat::PChatSendMsgRequest& sendreq() const;
  inline ::qihoo::protocol::privatechat::PChatSendMsgRequest* mutable_sendreq();
  inline ::qihoo::protocol::privatechat::PChatSendMsgRequest* release_sendreq();
  inline void set_allocated_sendreq(::qihoo::protocol::privatechat::PChatSendMsgRequest* sendreq);

  // optional .qihoo.protocol.privatechat.PChatGetMsgRequest getreq = 3;
  inline bool has_getreq() const;
  inline void clear_getreq();
  static const int kGetreqFieldNumber = 3;
  inline const ::qihoo::protocol::privatechat::PChatGetMsgRequest& getreq() const;
  inline ::qihoo::protocol::privatechat::PChatGetMsgRequest* mutable_getreq();
  inline ::qihoo::protocol::privatechat::PChatGetMsgRequest* release_getreq();
  inline void set_allocated_getreq(::qihoo::protocol::privatechat::PChatGetMsgRequest* getreq);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatRequest)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_sendreq();
  inline void clear_has_sendreq();
  inline void set_has_getreq();
  inline void clear_has_getreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::privatechat::PChatSendMsgRequest* sendreq_;
  ::qihoo::protocol::privatechat::PChatGetMsgRequest* getreq_;
  ::google::protobuf::int32 payload_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatRequest* default_instance_;
};
// -------------------------------------------------------------------

class PChatResponse : public ::google::protobuf::Message {
 public:
  PChatResponse();
  virtual ~PChatResponse();

  PChatResponse(const PChatResponse& from);

  inline PChatResponse& operator=(const PChatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatResponse& default_instance();

  void Swap(PChatResponse* other);

  // implements Message ----------------------------------------------

  PChatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatResponse& from);
  void MergeFrom(const PChatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 payload = 1;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 1;
  inline ::google::protobuf::int32 payload() const;
  inline void set_payload(::google::protobuf::int32 value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional .qihoo.protocol.privatechat.PChatSendMsgResponse sendres = 4;
  inline bool has_sendres() const;
  inline void clear_sendres();
  static const int kSendresFieldNumber = 4;
  inline const ::qihoo::protocol::privatechat::PChatSendMsgResponse& sendres() const;
  inline ::qihoo::protocol::privatechat::PChatSendMsgResponse* mutable_sendres();
  inline ::qihoo::protocol::privatechat::PChatSendMsgResponse* release_sendres();
  inline void set_allocated_sendres(::qihoo::protocol::privatechat::PChatSendMsgResponse* sendres);

  // optional .qihoo.protocol.privatechat.PChatGetMsgResponse getres = 5;
  inline bool has_getres() const;
  inline void clear_getres();
  static const int kGetresFieldNumber = 5;
  inline const ::qihoo::protocol::privatechat::PChatGetMsgResponse& getres() const;
  inline ::qihoo::protocol::privatechat::PChatGetMsgResponse* mutable_getres();
  inline ::qihoo::protocol::privatechat::PChatGetMsgResponse* release_getres();
  inline void set_allocated_getres(::qihoo::protocol::privatechat::PChatGetMsgResponse* getres);

  // optional .qihoo.protocol.privatechat.PChatNewMsgNotify msgnotify = 100;
  inline bool has_msgnotify() const;
  inline void clear_msgnotify();
  static const int kMsgnotifyFieldNumber = 100;
  inline const ::qihoo::protocol::privatechat::PChatNewMsgNotify& msgnotify() const;
  inline ::qihoo::protocol::privatechat::PChatNewMsgNotify* mutable_msgnotify();
  inline ::qihoo::protocol::privatechat::PChatNewMsgNotify* release_msgnotify();
  inline void set_allocated_msgnotify(::qihoo::protocol::privatechat::PChatNewMsgNotify* msgnotify);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatResponse)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_sendres();
  inline void clear_has_sendres();
  inline void set_has_getres();
  inline void clear_has_getres();
  inline void set_has_msgnotify();
  inline void clear_has_msgnotify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 payload_;
  ::google::protobuf::int32 result_;
  ::std::string* reason_;
  ::qihoo::protocol::privatechat::PChatSendMsgResponse* sendres_;
  ::qihoo::protocol::privatechat::PChatGetMsgResponse* getres_;
  ::qihoo::protocol::privatechat::PChatNewMsgNotify* msgnotify_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatResponse* default_instance_;
};
// -------------------------------------------------------------------

class PChatPacket : public ::google::protobuf::Message {
 public:
  PChatPacket();
  virtual ~PChatPacket();

  PChatPacket(const PChatPacket& from);

  inline PChatPacket& operator=(const PChatPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PChatPacket& default_instance();

  void Swap(PChatPacket* other);

  // implements Message ----------------------------------------------

  PChatPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PChatPacket& from);
  void MergeFrom(const PChatPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.privatechat.PChatRequest request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::qihoo::protocol::privatechat::PChatRequest& request() const;
  inline ::qihoo::protocol::privatechat::PChatRequest* mutable_request();
  inline ::qihoo::protocol::privatechat::PChatRequest* release_request();
  inline void set_allocated_request(::qihoo::protocol::privatechat::PChatRequest* request);

  // optional .qihoo.protocol.privatechat.PChatResponse response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::qihoo::protocol::privatechat::PChatResponse& response() const;
  inline ::qihoo::protocol::privatechat::PChatResponse* mutable_response();
  inline ::qihoo::protocol::privatechat::PChatResponse* release_response();
  inline void set_allocated_response(::qihoo::protocol::privatechat::PChatResponse* response);

  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.privatechat.PChatPacket)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::privatechat::PChatRequest* request_;
  ::qihoo::protocol::privatechat::PChatResponse* response_;
  ::std::string* uuid_;
  friend void  protobuf_AddDesc_privatechat_2eproto();
  friend void protobuf_AssignDesc_privatechat_2eproto();
  friend void protobuf_ShutdownFile_privatechat_2eproto();

  void InitAsDefaultInstance();
  static PChatPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// PChatPair

// required string key = 1;
inline bool PChatPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatPair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PChatPair::key() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatPair.key)
  return *key_;
}
inline void PChatPair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatPair.key)
}
inline void PChatPair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatPair.key)
}
inline void PChatPair::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatPair.key)
}
inline ::std::string* PChatPair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatPair.key)
  return key_;
}
inline ::std::string* PChatPair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatPair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatPair.key)
}

// optional bytes value = 2;
inline bool PChatPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatPair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PChatPair::value() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatPair.value)
  return *value_;
}
inline void PChatPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatPair.value)
}
inline void PChatPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatPair.value)
}
inline void PChatPair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatPair.value)
}
inline ::std::string* PChatPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatPair.value)
  return value_;
}
inline ::std::string* PChatPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatPair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatPair.value)
}

// -------------------------------------------------------------------

// PChatMsg

// repeated .qihoo.protocol.privatechat.PChatPair msgprops = 1;
inline int PChatMsg::msgprops_size() const {
  return msgprops_.size();
}
inline void PChatMsg::clear_msgprops() {
  msgprops_.Clear();
}
inline const ::qihoo::protocol::privatechat::PChatPair& PChatMsg::msgprops(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatMsg.msgprops)
  return msgprops_.Get(index);
}
inline ::qihoo::protocol::privatechat::PChatPair* PChatMsg::mutable_msgprops(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatMsg.msgprops)
  return msgprops_.Mutable(index);
}
inline ::qihoo::protocol::privatechat::PChatPair* PChatMsg::add_msgprops() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.privatechat.PChatMsg.msgprops)
  return msgprops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatPair >&
PChatMsg::msgprops() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.privatechat.PChatMsg.msgprops)
  return msgprops_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatPair >*
PChatMsg::mutable_msgprops() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.privatechat.PChatMsg.msgprops)
  return &msgprops_;
}

// -------------------------------------------------------------------

// PChatSendMsgRequest

// required string destID = 1;
inline bool PChatSendMsgRequest::has_destid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatSendMsgRequest::set_has_destid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatSendMsgRequest::clear_has_destid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatSendMsgRequest::clear_destid() {
  if (destid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destid_->clear();
  }
  clear_has_destid();
}
inline const ::std::string& PChatSendMsgRequest::destid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgRequest.destID)
  return *destid_;
}
inline void PChatSendMsgRequest::set_destid(const ::std::string& value) {
  set_has_destid();
  if (destid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destid_ = new ::std::string;
  }
  destid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgRequest.destID)
}
inline void PChatSendMsgRequest::set_destid(const char* value) {
  set_has_destid();
  if (destid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destid_ = new ::std::string;
  }
  destid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatSendMsgRequest.destID)
}
inline void PChatSendMsgRequest::set_destid(const char* value, size_t size) {
  set_has_destid();
  if (destid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destid_ = new ::std::string;
  }
  destid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatSendMsgRequest.destID)
}
inline ::std::string* PChatSendMsgRequest::mutable_destid() {
  set_has_destid();
  if (destid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatSendMsgRequest.destID)
  return destid_;
}
inline ::std::string* PChatSendMsgRequest::release_destid() {
  clear_has_destid();
  if (destid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = destid_;
    destid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatSendMsgRequest::set_allocated_destid(::std::string* destid) {
  if (destid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destid_;
  }
  if (destid) {
    set_has_destid();
    destid_ = destid;
  } else {
    clear_has_destid();
    destid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatSendMsgRequest.destID)
}

// required int32 bodytype = 2;
inline bool PChatSendMsgRequest::has_bodytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatSendMsgRequest::set_has_bodytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatSendMsgRequest::clear_has_bodytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatSendMsgRequest::clear_bodytype() {
  bodytype_ = 0;
  clear_has_bodytype();
}
inline ::google::protobuf::int32 PChatSendMsgRequest::bodytype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgRequest.bodytype)
  return bodytype_;
}
inline void PChatSendMsgRequest::set_bodytype(::google::protobuf::int32 value) {
  set_has_bodytype();
  bodytype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgRequest.bodytype)
}

// required bytes bodydata = 3;
inline bool PChatSendMsgRequest::has_bodydata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PChatSendMsgRequest::set_has_bodydata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PChatSendMsgRequest::clear_has_bodydata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PChatSendMsgRequest::clear_bodydata() {
  if (bodydata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bodydata_->clear();
  }
  clear_has_bodydata();
}
inline const ::std::string& PChatSendMsgRequest::bodydata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgRequest.bodydata)
  return *bodydata_;
}
inline void PChatSendMsgRequest::set_bodydata(const ::std::string& value) {
  set_has_bodydata();
  if (bodydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bodydata_ = new ::std::string;
  }
  bodydata_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgRequest.bodydata)
}
inline void PChatSendMsgRequest::set_bodydata(const char* value) {
  set_has_bodydata();
  if (bodydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bodydata_ = new ::std::string;
  }
  bodydata_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatSendMsgRequest.bodydata)
}
inline void PChatSendMsgRequest::set_bodydata(const void* value, size_t size) {
  set_has_bodydata();
  if (bodydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bodydata_ = new ::std::string;
  }
  bodydata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatSendMsgRequest.bodydata)
}
inline ::std::string* PChatSendMsgRequest::mutable_bodydata() {
  set_has_bodydata();
  if (bodydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bodydata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatSendMsgRequest.bodydata)
  return bodydata_;
}
inline ::std::string* PChatSendMsgRequest::release_bodydata() {
  clear_has_bodydata();
  if (bodydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bodydata_;
    bodydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatSendMsgRequest::set_allocated_bodydata(::std::string* bodydata) {
  if (bodydata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bodydata_;
  }
  if (bodydata) {
    set_has_bodydata();
    bodydata_ = bodydata;
  } else {
    clear_has_bodydata();
    bodydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatSendMsgRequest.bodydata)
}

// optional uint32 expiresec = 4;
inline bool PChatSendMsgRequest::has_expiresec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PChatSendMsgRequest::set_has_expiresec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PChatSendMsgRequest::clear_has_expiresec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PChatSendMsgRequest::clear_expiresec() {
  expiresec_ = 0u;
  clear_has_expiresec();
}
inline ::google::protobuf::uint32 PChatSendMsgRequest::expiresec() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgRequest.expiresec)
  return expiresec_;
}
inline void PChatSendMsgRequest::set_expiresec(::google::protobuf::uint32 value) {
  set_has_expiresec();
  expiresec_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgRequest.expiresec)
}

// optional int32 destappid = 5;
inline bool PChatSendMsgRequest::has_destappid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PChatSendMsgRequest::set_has_destappid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PChatSendMsgRequest::clear_has_destappid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PChatSendMsgRequest::clear_destappid() {
  destappid_ = 0;
  clear_has_destappid();
}
inline ::google::protobuf::int32 PChatSendMsgRequest::destappid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgRequest.destappid)
  return destappid_;
}
inline void PChatSendMsgRequest::set_destappid(::google::protobuf::int32 value) {
  set_has_destappid();
  destappid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgRequest.destappid)
}

// -------------------------------------------------------------------

// PChatSendMsgResponse

// required int64 msgid = 1;
inline bool PChatSendMsgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatSendMsgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatSendMsgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatSendMsgResponse::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 PChatSendMsgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgResponse.msgid)
  return msgid_;
}
inline void PChatSendMsgResponse::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgResponse.msgid)
}

// optional int32 code = 2;
inline bool PChatSendMsgResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatSendMsgResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatSendMsgResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatSendMsgResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 PChatSendMsgResponse::code() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgResponse.code)
  return code_;
}
inline void PChatSendMsgResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgResponse.code)
}

// optional string reason = 3;
inline bool PChatSendMsgResponse::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PChatSendMsgResponse::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PChatSendMsgResponse::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PChatSendMsgResponse::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& PChatSendMsgResponse::reason() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatSendMsgResponse.reason)
  return *reason_;
}
inline void PChatSendMsgResponse::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatSendMsgResponse.reason)
}
inline void PChatSendMsgResponse::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatSendMsgResponse.reason)
}
inline void PChatSendMsgResponse::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatSendMsgResponse.reason)
}
inline ::std::string* PChatSendMsgResponse::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatSendMsgResponse.reason)
  return reason_;
}
inline ::std::string* PChatSendMsgResponse::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatSendMsgResponse::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatSendMsgResponse.reason)
}

// -------------------------------------------------------------------

// PChatGetMsgRequest

// required int64 start = 1;
inline bool PChatGetMsgRequest::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatGetMsgRequest::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatGetMsgRequest::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatGetMsgRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 PChatGetMsgRequest::start() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatGetMsgRequest.start)
  return start_;
}
inline void PChatGetMsgRequest::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatGetMsgRequest.start)
}

// required int32 count = 2;
inline bool PChatGetMsgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatGetMsgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatGetMsgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatGetMsgRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PChatGetMsgRequest::count() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatGetMsgRequest.count)
  return count_;
}
inline void PChatGetMsgRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatGetMsgRequest.count)
}

// -------------------------------------------------------------------

// PChatGetMsgResponse

// repeated .qihoo.protocol.privatechat.PChatMsg msglist = 1;
inline int PChatGetMsgResponse::msglist_size() const {
  return msglist_.size();
}
inline void PChatGetMsgResponse::clear_msglist() {
  msglist_.Clear();
}
inline const ::qihoo::protocol::privatechat::PChatMsg& PChatGetMsgResponse::msglist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatGetMsgResponse.msglist)
  return msglist_.Get(index);
}
inline ::qihoo::protocol::privatechat::PChatMsg* PChatGetMsgResponse::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatGetMsgResponse.msglist)
  return msglist_.Mutable(index);
}
inline ::qihoo::protocol::privatechat::PChatMsg* PChatGetMsgResponse::add_msglist() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.privatechat.PChatGetMsgResponse.msglist)
  return msglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatMsg >&
PChatGetMsgResponse::msglist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.privatechat.PChatGetMsgResponse.msglist)
  return msglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::privatechat::PChatMsg >*
PChatGetMsgResponse::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.privatechat.PChatGetMsgResponse.msglist)
  return &msglist_;
}

// optional int64 maxid = 2;
inline bool PChatGetMsgResponse::has_maxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatGetMsgResponse::set_has_maxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatGetMsgResponse::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatGetMsgResponse::clear_maxid() {
  maxid_ = GOOGLE_LONGLONG(0);
  clear_has_maxid();
}
inline ::google::protobuf::int64 PChatGetMsgResponse::maxid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatGetMsgResponse.maxid)
  return maxid_;
}
inline void PChatGetMsgResponse::set_maxid(::google::protobuf::int64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatGetMsgResponse.maxid)
}

// -------------------------------------------------------------------

// PChatNewMsgNotify

// optional .qihoo.protocol.privatechat.PChatMsg msg = 1;
inline bool PChatNewMsgNotify::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatNewMsgNotify::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatNewMsgNotify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatNewMsgNotify::clear_msg() {
  if (msg_ != NULL) msg_->::qihoo::protocol::privatechat::PChatMsg::Clear();
  clear_has_msg();
}
inline const ::qihoo::protocol::privatechat::PChatMsg& PChatNewMsgNotify::msg() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatNewMsgNotify.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::qihoo::protocol::privatechat::PChatMsg* PChatNewMsgNotify::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::qihoo::protocol::privatechat::PChatMsg;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatNewMsgNotify.msg)
  return msg_;
}
inline ::qihoo::protocol::privatechat::PChatMsg* PChatNewMsgNotify::release_msg() {
  clear_has_msg();
  ::qihoo::protocol::privatechat::PChatMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void PChatNewMsgNotify::set_allocated_msg(::qihoo::protocol::privatechat::PChatMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatNewMsgNotify.msg)
}

// optional int64 maxid = 2;
inline bool PChatNewMsgNotify::has_maxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatNewMsgNotify::set_has_maxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatNewMsgNotify::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatNewMsgNotify::clear_maxid() {
  maxid_ = GOOGLE_LONGLONG(0);
  clear_has_maxid();
}
inline ::google::protobuf::int64 PChatNewMsgNotify::maxid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatNewMsgNotify.maxid)
  return maxid_;
}
inline void PChatNewMsgNotify::set_maxid(::google::protobuf::int64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatNewMsgNotify.maxid)
}

// -------------------------------------------------------------------

// PChatRequest

// required int32 payload = 1;
inline bool PChatRequest::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatRequest::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatRequest::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatRequest::clear_payload() {
  payload_ = 0;
  clear_has_payload();
}
inline ::google::protobuf::int32 PChatRequest::payload() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatRequest.payload)
  return payload_;
}
inline void PChatRequest::set_payload(::google::protobuf::int32 value) {
  set_has_payload();
  payload_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatRequest.payload)
}

// optional .qihoo.protocol.privatechat.PChatSendMsgRequest sendreq = 2;
inline bool PChatRequest::has_sendreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatRequest::set_has_sendreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatRequest::clear_has_sendreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatRequest::clear_sendreq() {
  if (sendreq_ != NULL) sendreq_->::qihoo::protocol::privatechat::PChatSendMsgRequest::Clear();
  clear_has_sendreq();
}
inline const ::qihoo::protocol::privatechat::PChatSendMsgRequest& PChatRequest::sendreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatRequest.sendreq)
  return sendreq_ != NULL ? *sendreq_ : *default_instance_->sendreq_;
}
inline ::qihoo::protocol::privatechat::PChatSendMsgRequest* PChatRequest::mutable_sendreq() {
  set_has_sendreq();
  if (sendreq_ == NULL) sendreq_ = new ::qihoo::protocol::privatechat::PChatSendMsgRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatRequest.sendreq)
  return sendreq_;
}
inline ::qihoo::protocol::privatechat::PChatSendMsgRequest* PChatRequest::release_sendreq() {
  clear_has_sendreq();
  ::qihoo::protocol::privatechat::PChatSendMsgRequest* temp = sendreq_;
  sendreq_ = NULL;
  return temp;
}
inline void PChatRequest::set_allocated_sendreq(::qihoo::protocol::privatechat::PChatSendMsgRequest* sendreq) {
  delete sendreq_;
  sendreq_ = sendreq;
  if (sendreq) {
    set_has_sendreq();
  } else {
    clear_has_sendreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatRequest.sendreq)
}

// optional .qihoo.protocol.privatechat.PChatGetMsgRequest getreq = 3;
inline bool PChatRequest::has_getreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PChatRequest::set_has_getreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PChatRequest::clear_has_getreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PChatRequest::clear_getreq() {
  if (getreq_ != NULL) getreq_->::qihoo::protocol::privatechat::PChatGetMsgRequest::Clear();
  clear_has_getreq();
}
inline const ::qihoo::protocol::privatechat::PChatGetMsgRequest& PChatRequest::getreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatRequest.getreq)
  return getreq_ != NULL ? *getreq_ : *default_instance_->getreq_;
}
inline ::qihoo::protocol::privatechat::PChatGetMsgRequest* PChatRequest::mutable_getreq() {
  set_has_getreq();
  if (getreq_ == NULL) getreq_ = new ::qihoo::protocol::privatechat::PChatGetMsgRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatRequest.getreq)
  return getreq_;
}
inline ::qihoo::protocol::privatechat::PChatGetMsgRequest* PChatRequest::release_getreq() {
  clear_has_getreq();
  ::qihoo::protocol::privatechat::PChatGetMsgRequest* temp = getreq_;
  getreq_ = NULL;
  return temp;
}
inline void PChatRequest::set_allocated_getreq(::qihoo::protocol::privatechat::PChatGetMsgRequest* getreq) {
  delete getreq_;
  getreq_ = getreq;
  if (getreq) {
    set_has_getreq();
  } else {
    clear_has_getreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatRequest.getreq)
}

// -------------------------------------------------------------------

// PChatResponse

// required int32 payload = 1;
inline bool PChatResponse::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatResponse::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatResponse::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatResponse::clear_payload() {
  payload_ = 0;
  clear_has_payload();
}
inline ::google::protobuf::int32 PChatResponse::payload() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatResponse.payload)
  return payload_;
}
inline void PChatResponse::set_payload(::google::protobuf::int32 value) {
  set_has_payload();
  payload_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatResponse.payload)
}

// required int32 result = 2;
inline bool PChatResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PChatResponse::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatResponse.result)
  return result_;
}
inline void PChatResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatResponse.result)
}

// optional string reason = 3;
inline bool PChatResponse::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PChatResponse::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PChatResponse::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PChatResponse::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& PChatResponse::reason() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatResponse.reason)
  return *reason_;
}
inline void PChatResponse::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatResponse.reason)
}
inline void PChatResponse::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatResponse.reason)
}
inline void PChatResponse::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatResponse.reason)
}
inline ::std::string* PChatResponse::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatResponse.reason)
  return reason_;
}
inline ::std::string* PChatResponse::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatResponse::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatResponse.reason)
}

// optional .qihoo.protocol.privatechat.PChatSendMsgResponse sendres = 4;
inline bool PChatResponse::has_sendres() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PChatResponse::set_has_sendres() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PChatResponse::clear_has_sendres() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PChatResponse::clear_sendres() {
  if (sendres_ != NULL) sendres_->::qihoo::protocol::privatechat::PChatSendMsgResponse::Clear();
  clear_has_sendres();
}
inline const ::qihoo::protocol::privatechat::PChatSendMsgResponse& PChatResponse::sendres() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatResponse.sendres)
  return sendres_ != NULL ? *sendres_ : *default_instance_->sendres_;
}
inline ::qihoo::protocol::privatechat::PChatSendMsgResponse* PChatResponse::mutable_sendres() {
  set_has_sendres();
  if (sendres_ == NULL) sendres_ = new ::qihoo::protocol::privatechat::PChatSendMsgResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatResponse.sendres)
  return sendres_;
}
inline ::qihoo::protocol::privatechat::PChatSendMsgResponse* PChatResponse::release_sendres() {
  clear_has_sendres();
  ::qihoo::protocol::privatechat::PChatSendMsgResponse* temp = sendres_;
  sendres_ = NULL;
  return temp;
}
inline void PChatResponse::set_allocated_sendres(::qihoo::protocol::privatechat::PChatSendMsgResponse* sendres) {
  delete sendres_;
  sendres_ = sendres;
  if (sendres) {
    set_has_sendres();
  } else {
    clear_has_sendres();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatResponse.sendres)
}

// optional .qihoo.protocol.privatechat.PChatGetMsgResponse getres = 5;
inline bool PChatResponse::has_getres() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PChatResponse::set_has_getres() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PChatResponse::clear_has_getres() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PChatResponse::clear_getres() {
  if (getres_ != NULL) getres_->::qihoo::protocol::privatechat::PChatGetMsgResponse::Clear();
  clear_has_getres();
}
inline const ::qihoo::protocol::privatechat::PChatGetMsgResponse& PChatResponse::getres() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatResponse.getres)
  return getres_ != NULL ? *getres_ : *default_instance_->getres_;
}
inline ::qihoo::protocol::privatechat::PChatGetMsgResponse* PChatResponse::mutable_getres() {
  set_has_getres();
  if (getres_ == NULL) getres_ = new ::qihoo::protocol::privatechat::PChatGetMsgResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatResponse.getres)
  return getres_;
}
inline ::qihoo::protocol::privatechat::PChatGetMsgResponse* PChatResponse::release_getres() {
  clear_has_getres();
  ::qihoo::protocol::privatechat::PChatGetMsgResponse* temp = getres_;
  getres_ = NULL;
  return temp;
}
inline void PChatResponse::set_allocated_getres(::qihoo::protocol::privatechat::PChatGetMsgResponse* getres) {
  delete getres_;
  getres_ = getres;
  if (getres) {
    set_has_getres();
  } else {
    clear_has_getres();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatResponse.getres)
}

// optional .qihoo.protocol.privatechat.PChatNewMsgNotify msgnotify = 100;
inline bool PChatResponse::has_msgnotify() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PChatResponse::set_has_msgnotify() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PChatResponse::clear_has_msgnotify() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PChatResponse::clear_msgnotify() {
  if (msgnotify_ != NULL) msgnotify_->::qihoo::protocol::privatechat::PChatNewMsgNotify::Clear();
  clear_has_msgnotify();
}
inline const ::qihoo::protocol::privatechat::PChatNewMsgNotify& PChatResponse::msgnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatResponse.msgnotify)
  return msgnotify_ != NULL ? *msgnotify_ : *default_instance_->msgnotify_;
}
inline ::qihoo::protocol::privatechat::PChatNewMsgNotify* PChatResponse::mutable_msgnotify() {
  set_has_msgnotify();
  if (msgnotify_ == NULL) msgnotify_ = new ::qihoo::protocol::privatechat::PChatNewMsgNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatResponse.msgnotify)
  return msgnotify_;
}
inline ::qihoo::protocol::privatechat::PChatNewMsgNotify* PChatResponse::release_msgnotify() {
  clear_has_msgnotify();
  ::qihoo::protocol::privatechat::PChatNewMsgNotify* temp = msgnotify_;
  msgnotify_ = NULL;
  return temp;
}
inline void PChatResponse::set_allocated_msgnotify(::qihoo::protocol::privatechat::PChatNewMsgNotify* msgnotify) {
  delete msgnotify_;
  msgnotify_ = msgnotify;
  if (msgnotify) {
    set_has_msgnotify();
  } else {
    clear_has_msgnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatResponse.msgnotify)
}

// -------------------------------------------------------------------

// PChatPacket

// optional .qihoo.protocol.privatechat.PChatRequest request = 1;
inline bool PChatPacket::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PChatPacket::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PChatPacket::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PChatPacket::clear_request() {
  if (request_ != NULL) request_->::qihoo::protocol::privatechat::PChatRequest::Clear();
  clear_has_request();
}
inline const ::qihoo::protocol::privatechat::PChatRequest& PChatPacket::request() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatPacket.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::qihoo::protocol::privatechat::PChatRequest* PChatPacket::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::qihoo::protocol::privatechat::PChatRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatPacket.request)
  return request_;
}
inline ::qihoo::protocol::privatechat::PChatRequest* PChatPacket::release_request() {
  clear_has_request();
  ::qihoo::protocol::privatechat::PChatRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void PChatPacket::set_allocated_request(::qihoo::protocol::privatechat::PChatRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatPacket.request)
}

// optional .qihoo.protocol.privatechat.PChatResponse response = 2;
inline bool PChatPacket::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PChatPacket::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PChatPacket::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PChatPacket::clear_response() {
  if (response_ != NULL) response_->::qihoo::protocol::privatechat::PChatResponse::Clear();
  clear_has_response();
}
inline const ::qihoo::protocol::privatechat::PChatResponse& PChatPacket::response() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatPacket.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::qihoo::protocol::privatechat::PChatResponse* PChatPacket::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::qihoo::protocol::privatechat::PChatResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatPacket.response)
  return response_;
}
inline ::qihoo::protocol::privatechat::PChatResponse* PChatPacket::release_response() {
  clear_has_response();
  ::qihoo::protocol::privatechat::PChatResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void PChatPacket::set_allocated_response(::qihoo::protocol::privatechat::PChatResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatPacket.response)
}

// optional string uuid = 3;
inline bool PChatPacket::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PChatPacket::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PChatPacket::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PChatPacket::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PChatPacket::uuid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.privatechat.PChatPacket.uuid)
  return *uuid_;
}
inline void PChatPacket::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.privatechat.PChatPacket.uuid)
}
inline void PChatPacket::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.privatechat.PChatPacket.uuid)
}
inline void PChatPacket::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.privatechat.PChatPacket.uuid)
}
inline ::std::string* PChatPacket::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.privatechat.PChatPacket.uuid)
  return uuid_;
}
inline ::std::string* PChatPacket::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PChatPacket::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.privatechat.PChatPacket.uuid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace privatechat
}  // namespace protocol
}  // namespace qihoo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_privatechat_2eproto__INCLUDED
