// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groupchat.proto

#ifndef PROTOBUF_groupchat_2eproto__INCLUDED
#define PROTOBUF_groupchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace group {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_groupchat_2eproto();
void protobuf_AssignDesc_groupchat_2eproto();
void protobuf_ShutdownFile_groupchat_2eproto();

class GroupNotify;
class GroupMessageReq;
class GroupMessage;
class GroupMessageResp;
class GroupSyncReq;
class GroupInfo;
class GroupUpPacket;
class GroupDownPacket;

// ===================================================================

class GroupNotify : public ::google::protobuf::Message {
 public:
  GroupNotify();
  virtual ~GroupNotify();

  GroupNotify(const GroupNotify& from);

  inline GroupNotify& operator=(const GroupNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupNotify& default_instance();

  void Swap(GroupNotify* other);

  // implements Message ----------------------------------------------

  GroupNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupNotify& from);
  void MergeFrom(const GroupNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // required uint64 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::uint64 msgid() const;
  inline void set_msgid(::google::protobuf::uint64 value);

  // optional string summary = 3;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 3;
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupNotify)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_summary();
  inline void clear_has_summary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupid_;
  ::google::protobuf::uint64 msgid_;
  ::std::string* summary_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupNotify* default_instance_;
};
// -------------------------------------------------------------------

class GroupMessageReq : public ::google::protobuf::Message {
 public:
  GroupMessageReq();
  virtual ~GroupMessageReq();

  GroupMessageReq(const GroupMessageReq& from);

  inline GroupMessageReq& operator=(const GroupMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMessageReq& default_instance();

  void Swap(GroupMessageReq* other);

  // implements Message ----------------------------------------------

  GroupMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMessageReq& from);
  void MergeFrom(const GroupMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // required string traceid = 2;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceidFieldNumber = 2;
  inline const ::std::string& traceid() const;
  inline void set_traceid(const ::std::string& value);
  inline void set_traceid(const char* value);
  inline void set_traceid(const char* value, size_t size);
  inline ::std::string* mutable_traceid();
  inline ::std::string* release_traceid();
  inline void set_allocated_traceid(::std::string* traceid);

  // optional uint64 startid = 3;
  inline bool has_startid() const;
  inline void clear_startid();
  static const int kStartidFieldNumber = 3;
  inline ::google::protobuf::uint64 startid() const;
  inline void set_startid(::google::protobuf::uint64 value);

  // optional int32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupMessageReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_startid();
  inline void clear_has_startid();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupid_;
  ::std::string* traceid_;
  ::google::protobuf::uint64 startid_;
  ::google::protobuf::int32 offset_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupMessage : public ::google::protobuf::Message {
 public:
  GroupMessage();
  virtual ~GroupMessage();

  GroupMessage(const GroupMessage& from);

  inline GroupMessage& operator=(const GroupMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMessage& default_instance();

  void Swap(GroupMessage* other);

  // implements Message ----------------------------------------------

  GroupMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMessage& from);
  void MergeFrom(const GroupMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::uint64 msgid() const;
  inline void set_msgid(::google::protobuf::uint64 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 sendtime = 3;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendtimeFieldNumber = 3;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);

  // optional string sender = 4;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 4;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_sender();
  inline void clear_has_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 msgid_;
  ::std::string* content_;
  ::google::protobuf::int64 sendtime_;
  ::std::string* sender_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupMessage* default_instance_;
};
// -------------------------------------------------------------------

class GroupMessageResp : public ::google::protobuf::Message {
 public:
  GroupMessageResp();
  virtual ~GroupMessageResp();

  GroupMessageResp(const GroupMessageResp& from);

  inline GroupMessageResp& operator=(const GroupMessageResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMessageResp& default_instance();

  void Swap(GroupMessageResp* other);

  // implements Message ----------------------------------------------

  GroupMessageResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMessageResp& from);
  void MergeFrom(const GroupMessageResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // required string traceid = 2;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceidFieldNumber = 2;
  inline const ::std::string& traceid() const;
  inline void set_traceid(const ::std::string& value);
  inline void set_traceid(const char* value);
  inline void set_traceid(const char* value, size_t size);
  inline ::std::string* mutable_traceid();
  inline ::std::string* release_traceid();
  inline void set_allocated_traceid(::std::string* traceid);

  // repeated .qihoo.protocol.group.GroupMessage msglist = 3;
  inline int msglist_size() const;
  inline void clear_msglist();
  static const int kMsglistFieldNumber = 3;
  inline const ::qihoo::protocol::group::GroupMessage& msglist(int index) const;
  inline ::qihoo::protocol::group::GroupMessage* mutable_msglist(int index);
  inline ::qihoo::protocol::group::GroupMessage* add_msglist();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessage >&
      msglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessage >*
      mutable_msglist();

  // optional uint64 maxid = 4;
  inline bool has_maxid() const;
  inline void clear_maxid();
  static const int kMaxidFieldNumber = 4;
  inline ::google::protobuf::uint64 maxid() const;
  inline void set_maxid(::google::protobuf::uint64 value);

  // optional int64 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupMessageResp)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_maxid();
  inline void clear_has_maxid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupid_;
  ::std::string* traceid_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessage > msglist_;
  ::google::protobuf::uint64 maxid_;
  ::google::protobuf::int64 version_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupMessageResp* default_instance_;
};
// -------------------------------------------------------------------

class GroupSyncReq : public ::google::protobuf::Message {
 public:
  GroupSyncReq();
  virtual ~GroupSyncReq();

  GroupSyncReq(const GroupSyncReq& from);

  inline GroupSyncReq& operator=(const GroupSyncReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupSyncReq& default_instance();

  void Swap(GroupSyncReq* other);

  // implements Message ----------------------------------------------

  GroupSyncReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupSyncReq& from);
  void MergeFrom(const GroupSyncReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupSyncReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupid_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupSyncReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::Message {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  void Swap(GroupInfo* other);

  // implements Message ----------------------------------------------

  GroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional uint64 maxid = 2;
  inline bool has_maxid() const;
  inline void clear_maxid();
  static const int kMaxidFieldNumber = 2;
  inline ::google::protobuf::uint64 maxid() const;
  inline void set_maxid(::google::protobuf::uint64 value);

  // optional int64 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // optional uint64 startid = 4;
  inline bool has_startid() const;
  inline void clear_startid();
  static const int kStartidFieldNumber = 4;
  inline ::google::protobuf::uint64 startid() const;
  inline void set_startid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupInfo)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_maxid();
  inline void clear_has_maxid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_startid();
  inline void clear_has_startid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupid_;
  ::google::protobuf::uint64 maxid_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::uint64 startid_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupUpPacket : public ::google::protobuf::Message {
 public:
  GroupUpPacket();
  virtual ~GroupUpPacket();

  GroupUpPacket(const GroupUpPacket& from);

  inline GroupUpPacket& operator=(const GroupUpPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupUpPacket& default_instance();

  void Swap(GroupUpPacket* other);

  // implements Message ----------------------------------------------

  GroupUpPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupUpPacket& from);
  void MergeFrom(const GroupUpPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 payload = 1;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 1;
  inline ::google::protobuf::uint32 payload() const;
  inline void set_payload(::google::protobuf::uint32 value);

  // repeated .qihoo.protocol.group.GroupSyncReq syncreq = 6;
  inline int syncreq_size() const;
  inline void clear_syncreq();
  static const int kSyncreqFieldNumber = 6;
  inline const ::qihoo::protocol::group::GroupSyncReq& syncreq(int index) const;
  inline ::qihoo::protocol::group::GroupSyncReq* mutable_syncreq(int index);
  inline ::qihoo::protocol::group::GroupSyncReq* add_syncreq();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupSyncReq >&
      syncreq() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupSyncReq >*
      mutable_syncreq();

  // repeated .qihoo.protocol.group.GroupMessageReq getmsgreq = 7;
  inline int getmsgreq_size() const;
  inline void clear_getmsgreq();
  static const int kGetmsgreqFieldNumber = 7;
  inline const ::qihoo::protocol::group::GroupMessageReq& getmsgreq(int index) const;
  inline ::qihoo::protocol::group::GroupMessageReq* mutable_getmsgreq(int index);
  inline ::qihoo::protocol::group::GroupMessageReq* add_getmsgreq();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageReq >&
      getmsgreq() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageReq >*
      mutable_getmsgreq();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupUpPacket)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupSyncReq > syncreq_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageReq > getmsgreq_;
  ::google::protobuf::uint32 payload_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupUpPacket* default_instance_;
};
// -------------------------------------------------------------------

class GroupDownPacket : public ::google::protobuf::Message {
 public:
  GroupDownPacket();
  virtual ~GroupDownPacket();

  GroupDownPacket(const GroupDownPacket& from);

  inline GroupDownPacket& operator=(const GroupDownPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupDownPacket& default_instance();

  void Swap(GroupDownPacket* other);

  // implements Message ----------------------------------------------

  GroupDownPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupDownPacket& from);
  void MergeFrom(const GroupDownPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint32 payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline ::google::protobuf::uint32 payload() const;
  inline void set_payload(::google::protobuf::uint32 value);

  // optional string reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional int32 sleep = 4 [default = 0];
  inline bool has_sleep() const;
  inline void clear_sleep();
  static const int kSleepFieldNumber = 4;
  inline ::google::protobuf::int32 sleep() const;
  inline void set_sleep(::google::protobuf::int32 value);

  // repeated .qihoo.protocol.group.GroupNotify newmsgnotify = 5;
  inline int newmsgnotify_size() const;
  inline void clear_newmsgnotify();
  static const int kNewmsgnotifyFieldNumber = 5;
  inline const ::qihoo::protocol::group::GroupNotify& newmsgnotify(int index) const;
  inline ::qihoo::protocol::group::GroupNotify* mutable_newmsgnotify(int index);
  inline ::qihoo::protocol::group::GroupNotify* add_newmsgnotify();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupNotify >&
      newmsgnotify() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupNotify >*
      mutable_newmsgnotify();

  // repeated .qihoo.protocol.group.GroupInfo syncresp = 6;
  inline int syncresp_size() const;
  inline void clear_syncresp();
  static const int kSyncrespFieldNumber = 6;
  inline const ::qihoo::protocol::group::GroupInfo& syncresp(int index) const;
  inline ::qihoo::protocol::group::GroupInfo* mutable_syncresp(int index);
  inline ::qihoo::protocol::group::GroupInfo* add_syncresp();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupInfo >&
      syncresp() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupInfo >*
      mutable_syncresp();

  // repeated .qihoo.protocol.group.GroupMessageResp getmsgresp = 7;
  inline int getmsgresp_size() const;
  inline void clear_getmsgresp();
  static const int kGetmsgrespFieldNumber = 7;
  inline const ::qihoo::protocol::group::GroupMessageResp& getmsgresp(int index) const;
  inline ::qihoo::protocol::group::GroupMessageResp* mutable_getmsgresp(int index);
  inline ::qihoo::protocol::group::GroupMessageResp* add_getmsgresp();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageResp >&
      getmsgresp() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageResp >*
      mutable_getmsgresp();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.group.GroupDownPacket)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_sleep();
  inline void clear_has_sleep();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 payload_;
  ::std::string* reason_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupNotify > newmsgnotify_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupInfo > syncresp_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageResp > getmsgresp_;
  ::google::protobuf::int32 sleep_;
  friend void  protobuf_AddDesc_groupchat_2eproto();
  friend void protobuf_AssignDesc_groupchat_2eproto();
  friend void protobuf_ShutdownFile_groupchat_2eproto();

  void InitAsDefaultInstance();
  static GroupDownPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// GroupNotify

// required string groupid = 1;
inline bool GroupNotify::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupNotify::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupNotify::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupNotify::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& GroupNotify::groupid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupNotify.groupid)
  return *groupid_;
}
inline void GroupNotify::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupNotify.groupid)
}
inline void GroupNotify::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupNotify.groupid)
}
inline void GroupNotify::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupNotify.groupid)
}
inline ::std::string* GroupNotify::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupNotify.groupid)
  return groupid_;
}
inline ::std::string* GroupNotify::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupNotify::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupNotify.groupid)
}

// required uint64 msgid = 2;
inline bool GroupNotify::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupNotify::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupNotify::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupNotify::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::uint64 GroupNotify::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupNotify.msgid)
  return msgid_;
}
inline void GroupNotify::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupNotify.msgid)
}

// optional string summary = 3;
inline bool GroupNotify::has_summary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupNotify::set_has_summary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupNotify::clear_has_summary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupNotify::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& GroupNotify::summary() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupNotify.summary)
  return *summary_;
}
inline void GroupNotify::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupNotify.summary)
}
inline void GroupNotify::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupNotify.summary)
}
inline void GroupNotify::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupNotify.summary)
}
inline ::std::string* GroupNotify::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupNotify.summary)
  return summary_;
}
inline ::std::string* GroupNotify::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupNotify::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupNotify.summary)
}

// -------------------------------------------------------------------

// GroupMessageReq

// required string groupid = 1;
inline bool GroupMessageReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMessageReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMessageReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMessageReq::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& GroupMessageReq::groupid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageReq.groupid)
  return *groupid_;
}
inline void GroupMessageReq::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageReq.groupid)
}
inline void GroupMessageReq::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupMessageReq.groupid)
}
inline void GroupMessageReq::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupMessageReq.groupid)
}
inline ::std::string* GroupMessageReq::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessageReq.groupid)
  return groupid_;
}
inline ::std::string* GroupMessageReq::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMessageReq::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupMessageReq.groupid)
}

// required string traceid = 2;
inline bool GroupMessageReq::has_traceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMessageReq::set_has_traceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMessageReq::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMessageReq::clear_traceid() {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_->clear();
  }
  clear_has_traceid();
}
inline const ::std::string& GroupMessageReq::traceid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageReq.traceid)
  return *traceid_;
}
inline void GroupMessageReq::set_traceid(const ::std::string& value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageReq.traceid)
}
inline void GroupMessageReq::set_traceid(const char* value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupMessageReq.traceid)
}
inline void GroupMessageReq::set_traceid(const char* value, size_t size) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupMessageReq.traceid)
}
inline ::std::string* GroupMessageReq::mutable_traceid() {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessageReq.traceid)
  return traceid_;
}
inline ::std::string* GroupMessageReq::release_traceid() {
  clear_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = traceid_;
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMessageReq::set_allocated_traceid(::std::string* traceid) {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceid_;
  }
  if (traceid) {
    set_has_traceid();
    traceid_ = traceid;
  } else {
    clear_has_traceid();
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupMessageReq.traceid)
}

// optional uint64 startid = 3;
inline bool GroupMessageReq::has_startid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupMessageReq::set_has_startid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupMessageReq::clear_has_startid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupMessageReq::clear_startid() {
  startid_ = GOOGLE_ULONGLONG(0);
  clear_has_startid();
}
inline ::google::protobuf::uint64 GroupMessageReq::startid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageReq.startid)
  return startid_;
}
inline void GroupMessageReq::set_startid(::google::protobuf::uint64 value) {
  set_has_startid();
  startid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageReq.startid)
}

// optional int32 offset = 4;
inline bool GroupMessageReq::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupMessageReq::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupMessageReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupMessageReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 GroupMessageReq::offset() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageReq.offset)
  return offset_;
}
inline void GroupMessageReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageReq.offset)
}

// -------------------------------------------------------------------

// GroupMessage

// required uint64 msgid = 1;
inline bool GroupMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMessage::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::uint64 GroupMessage::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessage.msgid)
  return msgid_;
}
inline void GroupMessage::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessage.msgid)
}

// required string content = 2;
inline bool GroupMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GroupMessage::content() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessage.content)
  return *content_;
}
inline void GroupMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessage.content)
}
inline void GroupMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupMessage.content)
}
inline void GroupMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupMessage.content)
}
inline ::std::string* GroupMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessage.content)
  return content_;
}
inline ::std::string* GroupMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupMessage.content)
}

// optional int64 sendtime = 3;
inline bool GroupMessage::has_sendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupMessage::set_has_sendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupMessage::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupMessage::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 GroupMessage::sendtime() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessage.sendtime)
  return sendtime_;
}
inline void GroupMessage::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessage.sendtime)
}

// optional string sender = 4;
inline bool GroupMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupMessage::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& GroupMessage::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessage.sender)
  return *sender_;
}
inline void GroupMessage::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessage.sender)
}
inline void GroupMessage::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupMessage.sender)
}
inline void GroupMessage::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupMessage.sender)
}
inline ::std::string* GroupMessage::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessage.sender)
  return sender_;
}
inline ::std::string* GroupMessage::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMessage::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupMessage.sender)
}

// -------------------------------------------------------------------

// GroupMessageResp

// required string groupid = 1;
inline bool GroupMessageResp::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMessageResp::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMessageResp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMessageResp::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& GroupMessageResp::groupid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageResp.groupid)
  return *groupid_;
}
inline void GroupMessageResp::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageResp.groupid)
}
inline void GroupMessageResp::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupMessageResp.groupid)
}
inline void GroupMessageResp::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupMessageResp.groupid)
}
inline ::std::string* GroupMessageResp::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessageResp.groupid)
  return groupid_;
}
inline ::std::string* GroupMessageResp::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMessageResp::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupMessageResp.groupid)
}

// required string traceid = 2;
inline bool GroupMessageResp::has_traceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMessageResp::set_has_traceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMessageResp::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMessageResp::clear_traceid() {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_->clear();
  }
  clear_has_traceid();
}
inline const ::std::string& GroupMessageResp::traceid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageResp.traceid)
  return *traceid_;
}
inline void GroupMessageResp::set_traceid(const ::std::string& value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageResp.traceid)
}
inline void GroupMessageResp::set_traceid(const char* value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupMessageResp.traceid)
}
inline void GroupMessageResp::set_traceid(const char* value, size_t size) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupMessageResp.traceid)
}
inline ::std::string* GroupMessageResp::mutable_traceid() {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessageResp.traceid)
  return traceid_;
}
inline ::std::string* GroupMessageResp::release_traceid() {
  clear_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = traceid_;
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupMessageResp::set_allocated_traceid(::std::string* traceid) {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceid_;
  }
  if (traceid) {
    set_has_traceid();
    traceid_ = traceid;
  } else {
    clear_has_traceid();
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupMessageResp.traceid)
}

// repeated .qihoo.protocol.group.GroupMessage msglist = 3;
inline int GroupMessageResp::msglist_size() const {
  return msglist_.size();
}
inline void GroupMessageResp::clear_msglist() {
  msglist_.Clear();
}
inline const ::qihoo::protocol::group::GroupMessage& GroupMessageResp::msglist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageResp.msglist)
  return msglist_.Get(index);
}
inline ::qihoo::protocol::group::GroupMessage* GroupMessageResp::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupMessageResp.msglist)
  return msglist_.Mutable(index);
}
inline ::qihoo::protocol::group::GroupMessage* GroupMessageResp::add_msglist() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.group.GroupMessageResp.msglist)
  return msglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessage >&
GroupMessageResp::msglist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.group.GroupMessageResp.msglist)
  return msglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessage >*
GroupMessageResp::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.group.GroupMessageResp.msglist)
  return &msglist_;
}

// optional uint64 maxid = 4;
inline bool GroupMessageResp::has_maxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupMessageResp::set_has_maxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupMessageResp::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupMessageResp::clear_maxid() {
  maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxid();
}
inline ::google::protobuf::uint64 GroupMessageResp::maxid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageResp.maxid)
  return maxid_;
}
inline void GroupMessageResp::set_maxid(::google::protobuf::uint64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageResp.maxid)
}

// optional int64 version = 5;
inline bool GroupMessageResp::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupMessageResp::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupMessageResp::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupMessageResp::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 GroupMessageResp::version() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupMessageResp.version)
  return version_;
}
inline void GroupMessageResp::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupMessageResp.version)
}

// -------------------------------------------------------------------

// GroupSyncReq

// required string groupid = 1;
inline bool GroupSyncReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupSyncReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupSyncReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupSyncReq::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& GroupSyncReq::groupid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupSyncReq.groupid)
  return *groupid_;
}
inline void GroupSyncReq::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupSyncReq.groupid)
}
inline void GroupSyncReq::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupSyncReq.groupid)
}
inline void GroupSyncReq::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupSyncReq.groupid)
}
inline ::std::string* GroupSyncReq::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupSyncReq.groupid)
  return groupid_;
}
inline ::std::string* GroupSyncReq::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupSyncReq::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupSyncReq.groupid)
}

// -------------------------------------------------------------------

// GroupInfo

// required string groupid = 1;
inline bool GroupInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupInfo::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& GroupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupInfo.groupid)
  return *groupid_;
}
inline void GroupInfo::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupInfo.groupid)
}
inline void GroupInfo::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupInfo.groupid)
}
inline void GroupInfo::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupInfo.groupid)
}
inline ::std::string* GroupInfo::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupInfo.groupid)
  return groupid_;
}
inline ::std::string* GroupInfo::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupInfo::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupInfo.groupid)
}

// optional uint64 maxid = 2;
inline bool GroupInfo::has_maxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupInfo::set_has_maxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupInfo::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupInfo::clear_maxid() {
  maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxid();
}
inline ::google::protobuf::uint64 GroupInfo::maxid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupInfo.maxid)
  return maxid_;
}
inline void GroupInfo::set_maxid(::google::protobuf::uint64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupInfo.maxid)
}

// optional int64 version = 3;
inline bool GroupInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupInfo::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 GroupInfo::version() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupInfo.version)
  return version_;
}
inline void GroupInfo::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupInfo.version)
}

// optional uint64 startid = 4;
inline bool GroupInfo::has_startid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupInfo::set_has_startid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupInfo::clear_has_startid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupInfo::clear_startid() {
  startid_ = GOOGLE_ULONGLONG(0);
  clear_has_startid();
}
inline ::google::protobuf::uint64 GroupInfo::startid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupInfo.startid)
  return startid_;
}
inline void GroupInfo::set_startid(::google::protobuf::uint64 value) {
  set_has_startid();
  startid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupInfo.startid)
}

// -------------------------------------------------------------------

// GroupUpPacket

// required uint32 payload = 1;
inline bool GroupUpPacket::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupUpPacket::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupUpPacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupUpPacket::clear_payload() {
  payload_ = 0u;
  clear_has_payload();
}
inline ::google::protobuf::uint32 GroupUpPacket::payload() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupUpPacket.payload)
  return payload_;
}
inline void GroupUpPacket::set_payload(::google::protobuf::uint32 value) {
  set_has_payload();
  payload_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupUpPacket.payload)
}

// repeated .qihoo.protocol.group.GroupSyncReq syncreq = 6;
inline int GroupUpPacket::syncreq_size() const {
  return syncreq_.size();
}
inline void GroupUpPacket::clear_syncreq() {
  syncreq_.Clear();
}
inline const ::qihoo::protocol::group::GroupSyncReq& GroupUpPacket::syncreq(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupUpPacket.syncreq)
  return syncreq_.Get(index);
}
inline ::qihoo::protocol::group::GroupSyncReq* GroupUpPacket::mutable_syncreq(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupUpPacket.syncreq)
  return syncreq_.Mutable(index);
}
inline ::qihoo::protocol::group::GroupSyncReq* GroupUpPacket::add_syncreq() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.group.GroupUpPacket.syncreq)
  return syncreq_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupSyncReq >&
GroupUpPacket::syncreq() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.group.GroupUpPacket.syncreq)
  return syncreq_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupSyncReq >*
GroupUpPacket::mutable_syncreq() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.group.GroupUpPacket.syncreq)
  return &syncreq_;
}

// repeated .qihoo.protocol.group.GroupMessageReq getmsgreq = 7;
inline int GroupUpPacket::getmsgreq_size() const {
  return getmsgreq_.size();
}
inline void GroupUpPacket::clear_getmsgreq() {
  getmsgreq_.Clear();
}
inline const ::qihoo::protocol::group::GroupMessageReq& GroupUpPacket::getmsgreq(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupUpPacket.getmsgreq)
  return getmsgreq_.Get(index);
}
inline ::qihoo::protocol::group::GroupMessageReq* GroupUpPacket::mutable_getmsgreq(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupUpPacket.getmsgreq)
  return getmsgreq_.Mutable(index);
}
inline ::qihoo::protocol::group::GroupMessageReq* GroupUpPacket::add_getmsgreq() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.group.GroupUpPacket.getmsgreq)
  return getmsgreq_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageReq >&
GroupUpPacket::getmsgreq() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.group.GroupUpPacket.getmsgreq)
  return getmsgreq_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageReq >*
GroupUpPacket::mutable_getmsgreq() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.group.GroupUpPacket.getmsgreq)
  return &getmsgreq_;
}

// -------------------------------------------------------------------

// GroupDownPacket

// required int32 result = 1;
inline bool GroupDownPacket::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupDownPacket::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupDownPacket::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupDownPacket::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupDownPacket::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.result)
  return result_;
}
inline void GroupDownPacket::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupDownPacket.result)
}

// required uint32 payload = 2;
inline bool GroupDownPacket::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupDownPacket::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupDownPacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupDownPacket::clear_payload() {
  payload_ = 0u;
  clear_has_payload();
}
inline ::google::protobuf::uint32 GroupDownPacket::payload() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.payload)
  return payload_;
}
inline void GroupDownPacket::set_payload(::google::protobuf::uint32 value) {
  set_has_payload();
  payload_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupDownPacket.payload)
}

// optional string reason = 3;
inline bool GroupDownPacket::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupDownPacket::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupDownPacket::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupDownPacket::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& GroupDownPacket::reason() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.reason)
  return *reason_;
}
inline void GroupDownPacket::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupDownPacket.reason)
}
inline void GroupDownPacket::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.group.GroupDownPacket.reason)
}
inline void GroupDownPacket::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.group.GroupDownPacket.reason)
}
inline ::std::string* GroupDownPacket::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupDownPacket.reason)
  return reason_;
}
inline ::std::string* GroupDownPacket::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupDownPacket::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.group.GroupDownPacket.reason)
}

// optional int32 sleep = 4 [default = 0];
inline bool GroupDownPacket::has_sleep() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupDownPacket::set_has_sleep() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupDownPacket::clear_has_sleep() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupDownPacket::clear_sleep() {
  sleep_ = 0;
  clear_has_sleep();
}
inline ::google::protobuf::int32 GroupDownPacket::sleep() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.sleep)
  return sleep_;
}
inline void GroupDownPacket::set_sleep(::google::protobuf::int32 value) {
  set_has_sleep();
  sleep_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.group.GroupDownPacket.sleep)
}

// repeated .qihoo.protocol.group.GroupNotify newmsgnotify = 5;
inline int GroupDownPacket::newmsgnotify_size() const {
  return newmsgnotify_.size();
}
inline void GroupDownPacket::clear_newmsgnotify() {
  newmsgnotify_.Clear();
}
inline const ::qihoo::protocol::group::GroupNotify& GroupDownPacket::newmsgnotify(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.newmsgnotify)
  return newmsgnotify_.Get(index);
}
inline ::qihoo::protocol::group::GroupNotify* GroupDownPacket::mutable_newmsgnotify(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupDownPacket.newmsgnotify)
  return newmsgnotify_.Mutable(index);
}
inline ::qihoo::protocol::group::GroupNotify* GroupDownPacket::add_newmsgnotify() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.group.GroupDownPacket.newmsgnotify)
  return newmsgnotify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupNotify >&
GroupDownPacket::newmsgnotify() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.group.GroupDownPacket.newmsgnotify)
  return newmsgnotify_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupNotify >*
GroupDownPacket::mutable_newmsgnotify() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.group.GroupDownPacket.newmsgnotify)
  return &newmsgnotify_;
}

// repeated .qihoo.protocol.group.GroupInfo syncresp = 6;
inline int GroupDownPacket::syncresp_size() const {
  return syncresp_.size();
}
inline void GroupDownPacket::clear_syncresp() {
  syncresp_.Clear();
}
inline const ::qihoo::protocol::group::GroupInfo& GroupDownPacket::syncresp(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.syncresp)
  return syncresp_.Get(index);
}
inline ::qihoo::protocol::group::GroupInfo* GroupDownPacket::mutable_syncresp(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupDownPacket.syncresp)
  return syncresp_.Mutable(index);
}
inline ::qihoo::protocol::group::GroupInfo* GroupDownPacket::add_syncresp() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.group.GroupDownPacket.syncresp)
  return syncresp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupInfo >&
GroupDownPacket::syncresp() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.group.GroupDownPacket.syncresp)
  return syncresp_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupInfo >*
GroupDownPacket::mutable_syncresp() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.group.GroupDownPacket.syncresp)
  return &syncresp_;
}

// repeated .qihoo.protocol.group.GroupMessageResp getmsgresp = 7;
inline int GroupDownPacket::getmsgresp_size() const {
  return getmsgresp_.size();
}
inline void GroupDownPacket::clear_getmsgresp() {
  getmsgresp_.Clear();
}
inline const ::qihoo::protocol::group::GroupMessageResp& GroupDownPacket::getmsgresp(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.group.GroupDownPacket.getmsgresp)
  return getmsgresp_.Get(index);
}
inline ::qihoo::protocol::group::GroupMessageResp* GroupDownPacket::mutable_getmsgresp(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.group.GroupDownPacket.getmsgresp)
  return getmsgresp_.Mutable(index);
}
inline ::qihoo::protocol::group::GroupMessageResp* GroupDownPacket::add_getmsgresp() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.group.GroupDownPacket.getmsgresp)
  return getmsgresp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageResp >&
GroupDownPacket::getmsgresp() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.group.GroupDownPacket.getmsgresp)
  return getmsgresp_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::group::GroupMessageResp >*
GroupDownPacket::mutable_getmsgresp() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.group.GroupDownPacket.getmsgresp)
  return &getmsgresp_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace group
}  // namespace protocol
}  // namespace qihoo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_groupchat_2eproto__INCLUDED
