// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registry.proto

#ifndef PROTOBUF_registry_2eproto__INCLUDED
#define PROTOBUF_registry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace registry {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_registry_2eproto();
void protobuf_AssignDesc_registry_2eproto();
void protobuf_ShutdownFile_registry_2eproto();

class Pair;
class Down_Request_Get_Verifi_Code;
class Down_Response_Get_Verifi_Code;
class Down_Request_Register;
class Down_Response_Register;
class QID_Register_Request;
class QID_Register_Response;
class Query_Register_Status_Request;
class Query_Register_Status_Response;

// ===================================================================

class Pair : public ::google::protobuf::Message {
 public:
  Pair();
  virtual ~Pair();

  Pair(const Pair& from);

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();

  void Swap(Pair* other);

  // implements Message ----------------------------------------------

  Pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Pair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Pair* default_instance_;
};
// -------------------------------------------------------------------

class Down_Request_Get_Verifi_Code : public ::google::protobuf::Message {
 public:
  Down_Request_Get_Verifi_Code();
  virtual ~Down_Request_Get_Verifi_Code();

  Down_Request_Get_Verifi_Code(const Down_Request_Get_Verifi_Code& from);

  inline Down_Request_Get_Verifi_Code& operator=(const Down_Request_Get_Verifi_Code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Down_Request_Get_Verifi_Code& default_instance();

  void Swap(Down_Request_Get_Verifi_Code* other);

  // implements Message ----------------------------------------------

  Down_Request_Get_Verifi_Code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Down_Request_Get_Verifi_Code& from);
  void MergeFrom(const Down_Request_Get_Verifi_Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // required bytes cliver = 2;
  inline bool has_cliver() const;
  inline void clear_cliver();
  static const int kCliverFieldNumber = 2;
  inline const ::std::string& cliver() const;
  inline void set_cliver(const ::std::string& value);
  inline void set_cliver(const char* value);
  inline void set_cliver(const void* value, size_t size);
  inline ::std::string* mutable_cliver();
  inline ::std::string* release_cliver();
  inline void set_allocated_cliver(::std::string* cliver);

  // required bytes pn = 3;
  inline bool has_pn() const;
  inline void clear_pn();
  static const int kPnFieldNumber = 3;
  inline const ::std::string& pn() const;
  inline void set_pn(const ::std::string& value);
  inline void set_pn(const char* value);
  inline void set_pn(const void* value, size_t size);
  inline ::std::string* mutable_pn();
  inline ::std::string* release_pn();
  inline void set_allocated_pn(::std::string* pn);

  // optional bytes pwd = 4;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 4;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const void* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_cliver();
  inline void clear_has_cliver();
  inline void set_has_pn();
  inline void clear_has_pn();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cliver_;
  ::std::string* pn_;
  ::std::string* pwd_;
  ::google::protobuf::int32 appid_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Down_Request_Get_Verifi_Code* default_instance_;
};
// -------------------------------------------------------------------

class Down_Response_Get_Verifi_Code : public ::google::protobuf::Message {
 public:
  Down_Response_Get_Verifi_Code();
  virtual ~Down_Response_Get_Verifi_Code();

  Down_Response_Get_Verifi_Code(const Down_Response_Get_Verifi_Code& from);

  inline Down_Response_Get_Verifi_Code& operator=(const Down_Response_Get_Verifi_Code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Down_Response_Get_Verifi_Code& default_instance();

  void Swap(Down_Response_Get_Verifi_Code* other);

  // implements Message ----------------------------------------------

  Down_Response_Get_Verifi_Code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Down_Response_Get_Verifi_Code& from);
  void MergeFrom(const Down_Response_Get_Verifi_Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorcode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Down_Response_Get_Verifi_Code* default_instance_;
};
// -------------------------------------------------------------------

class Down_Request_Register : public ::google::protobuf::Message {
 public:
  Down_Request_Register();
  virtual ~Down_Request_Register();

  Down_Request_Register(const Down_Request_Register& from);

  inline Down_Request_Register& operator=(const Down_Request_Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Down_Request_Register& default_instance();

  void Swap(Down_Request_Register* other);

  // implements Message ----------------------------------------------

  Down_Request_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Down_Request_Register& from);
  void MergeFrom(const Down_Request_Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // required bytes cliver = 2;
  inline bool has_cliver() const;
  inline void clear_cliver();
  static const int kCliverFieldNumber = 2;
  inline const ::std::string& cliver() const;
  inline void set_cliver(const ::std::string& value);
  inline void set_cliver(const char* value);
  inline void set_cliver(const void* value, size_t size);
  inline ::std::string* mutable_cliver();
  inline ::std::string* release_cliver();
  inline void set_allocated_cliver(::std::string* cliver);

  // required bytes pn = 3;
  inline bool has_pn() const;
  inline void clear_pn();
  static const int kPnFieldNumber = 3;
  inline const ::std::string& pn() const;
  inline void set_pn(const ::std::string& value);
  inline void set_pn(const char* value);
  inline void set_pn(const void* value, size_t size);
  inline ::std::string* mutable_pn();
  inline ::std::string* release_pn();
  inline void set_allocated_pn(::std::string* pn);

  // required bytes rvc = 4;
  inline bool has_rvc() const;
  inline void clear_rvc();
  static const int kRvcFieldNumber = 4;
  inline const ::std::string& rvc() const;
  inline void set_rvc(const ::std::string& value);
  inline void set_rvc(const char* value);
  inline void set_rvc(const void* value, size_t size);
  inline ::std::string* mutable_rvc();
  inline ::std::string* release_rvc();
  inline void set_allocated_rvc(::std::string* rvc);

  // optional bytes app_uuid = 5;
  inline bool has_app_uuid() const;
  inline void clear_app_uuid();
  static const int kAppUuidFieldNumber = 5;
  inline const ::std::string& app_uuid() const;
  inline void set_app_uuid(const ::std::string& value);
  inline void set_app_uuid(const char* value);
  inline void set_app_uuid(const void* value, size_t size);
  inline ::std::string* mutable_app_uuid();
  inline ::std::string* release_app_uuid();
  inline void set_allocated_app_uuid(::std::string* app_uuid);

  // repeated .qihoo.protocol.registry.Pair info = 6;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::qihoo::protocol::registry::Pair& info(int index) const;
  inline ::qihoo::protocol::registry::Pair* mutable_info(int index);
  inline ::qihoo::protocol::registry::Pair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Down_Request_Register)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_cliver();
  inline void clear_has_cliver();
  inline void set_has_pn();
  inline void clear_has_pn();
  inline void set_has_rvc();
  inline void clear_has_rvc();
  inline void set_has_app_uuid();
  inline void clear_has_app_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cliver_;
  ::std::string* pn_;
  ::std::string* rvc_;
  ::std::string* app_uuid_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair > info_;
  ::google::protobuf::int32 appid_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Down_Request_Register* default_instance_;
};
// -------------------------------------------------------------------

class Down_Response_Register : public ::google::protobuf::Message {
 public:
  Down_Response_Register();
  virtual ~Down_Response_Register();

  Down_Response_Register(const Down_Response_Register& from);

  inline Down_Response_Register& operator=(const Down_Response_Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Down_Response_Register& default_instance();

  void Swap(Down_Response_Register* other);

  // implements Message ----------------------------------------------

  Down_Response_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Down_Response_Register& from);
  void MergeFrom(const Down_Response_Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorcode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional bytes jid = 2;
  inline bool has_jid() const;
  inline void clear_jid();
  static const int kJidFieldNumber = 2;
  inline const ::std::string& jid() const;
  inline void set_jid(const ::std::string& value);
  inline void set_jid(const char* value);
  inline void set_jid(const void* value, size_t size);
  inline ::std::string* mutable_jid();
  inline ::std::string* release_jid();
  inline void set_allocated_jid(::std::string* jid);

  // optional bytes password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Down_Response_Register)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_jid();
  inline void clear_has_jid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* jid_;
  ::std::string* password_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Down_Response_Register* default_instance_;
};
// -------------------------------------------------------------------

class QID_Register_Request : public ::google::protobuf::Message {
 public:
  QID_Register_Request();
  virtual ~QID_Register_Request();

  QID_Register_Request(const QID_Register_Request& from);

  inline QID_Register_Request& operator=(const QID_Register_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QID_Register_Request& default_instance();

  void Swap(QID_Register_Request* other);

  // implements Message ----------------------------------------------

  QID_Register_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QID_Register_Request& from);
  void MergeFrom(const QID_Register_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cookie_Q = 1;
  inline bool has_cookie_q() const;
  inline void clear_cookie_q();
  static const int kCookieQFieldNumber = 1;
  inline const ::std::string& cookie_q() const;
  inline void set_cookie_q(const ::std::string& value);
  inline void set_cookie_q(const char* value);
  inline void set_cookie_q(const void* value, size_t size);
  inline ::std::string* mutable_cookie_q();
  inline ::std::string* release_cookie_q();
  inline void set_allocated_cookie_q(::std::string* cookie_q);

  // required bytes cookie_T = 2;
  inline bool has_cookie_t() const;
  inline void clear_cookie_t();
  static const int kCookieTFieldNumber = 2;
  inline const ::std::string& cookie_t() const;
  inline void set_cookie_t(const ::std::string& value);
  inline void set_cookie_t(const char* value);
  inline void set_cookie_t(const void* value, size_t size);
  inline ::std::string* mutable_cookie_t();
  inline ::std::string* release_cookie_t();
  inline void set_allocated_cookie_t(::std::string* cookie_t);

  // required bytes qid = 3;
  inline bool has_qid() const;
  inline void clear_qid();
  static const int kQidFieldNumber = 3;
  inline const ::std::string& qid() const;
  inline void set_qid(const ::std::string& value);
  inline void set_qid(const char* value);
  inline void set_qid(const void* value, size_t size);
  inline ::std::string* mutable_qid();
  inline ::std::string* release_qid();
  inline void set_allocated_qid(::std::string* qid);

  // repeated .qihoo.protocol.registry.Pair info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::qihoo::protocol::registry::Pair& info(int index) const;
  inline ::qihoo::protocol::registry::Pair* mutable_info(int index);
  inline ::qihoo::protocol::registry::Pair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >*
      mutable_info();

  // optional int32 appid = 5;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 5;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // optional bytes client_ver = 6;
  inline bool has_client_ver() const;
  inline void clear_client_ver();
  static const int kClientVerFieldNumber = 6;
  inline const ::std::string& client_ver() const;
  inline void set_client_ver(const ::std::string& value);
  inline void set_client_ver(const char* value);
  inline void set_client_ver(const void* value, size_t size);
  inline ::std::string* mutable_client_ver();
  inline ::std::string* release_client_ver();
  inline void set_allocated_client_ver(::std::string* client_ver);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.QID_Register_Request)
 private:
  inline void set_has_cookie_q();
  inline void clear_has_cookie_q();
  inline void set_has_cookie_t();
  inline void clear_has_cookie_t();
  inline void set_has_qid();
  inline void clear_has_qid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_client_ver();
  inline void clear_has_client_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cookie_q_;
  ::std::string* cookie_t_;
  ::std::string* qid_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair > info_;
  ::std::string* client_ver_;
  ::google::protobuf::int32 appid_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static QID_Register_Request* default_instance_;
};
// -------------------------------------------------------------------

class QID_Register_Response : public ::google::protobuf::Message {
 public:
  QID_Register_Response();
  virtual ~QID_Register_Response();

  QID_Register_Response(const QID_Register_Response& from);

  inline QID_Register_Response& operator=(const QID_Register_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QID_Register_Response& default_instance();

  void Swap(QID_Register_Response* other);

  // implements Message ----------------------------------------------

  QID_Register_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QID_Register_Response& from);
  void MergeFrom(const QID_Register_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorcode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional bytes errmsg = 2;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const void* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // optional bytes jid = 3;
  inline bool has_jid() const;
  inline void clear_jid();
  static const int kJidFieldNumber = 3;
  inline const ::std::string& jid() const;
  inline void set_jid(const ::std::string& value);
  inline void set_jid(const char* value);
  inline void set_jid(const void* value, size_t size);
  inline ::std::string* mutable_jid();
  inline ::std::string* release_jid();
  inline void set_allocated_jid(::std::string* jid);

  // optional bytes password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.QID_Register_Response)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_jid();
  inline void clear_has_jid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* errmsg_;
  ::std::string* jid_;
  ::std::string* password_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static QID_Register_Response* default_instance_;
};
// -------------------------------------------------------------------

class Query_Register_Status_Request : public ::google::protobuf::Message {
 public:
  Query_Register_Status_Request();
  virtual ~Query_Register_Status_Request();

  Query_Register_Status_Request(const Query_Register_Status_Request& from);

  inline Query_Register_Status_Request& operator=(const Query_Register_Status_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query_Register_Status_Request& default_instance();

  void Swap(Query_Register_Status_Request* other);

  // implements Message ----------------------------------------------

  Query_Register_Status_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query_Register_Status_Request& from);
  void MergeFrom(const Query_Register_Status_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes pn = 1;
  inline int pn_size() const;
  inline void clear_pn();
  static const int kPnFieldNumber = 1;
  inline const ::std::string& pn(int index) const;
  inline ::std::string* mutable_pn(int index);
  inline void set_pn(int index, const ::std::string& value);
  inline void set_pn(int index, const char* value);
  inline void set_pn(int index, const void* value, size_t size);
  inline ::std::string* add_pn();
  inline void add_pn(const ::std::string& value);
  inline void add_pn(const char* value);
  inline void add_pn(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pn() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pn();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Query_Register_Status_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pn_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Query_Register_Status_Request* default_instance_;
};
// -------------------------------------------------------------------

class Query_Register_Status_Response : public ::google::protobuf::Message {
 public:
  Query_Register_Status_Response();
  virtual ~Query_Register_Status_Response();

  Query_Register_Status_Response(const Query_Register_Status_Response& from);

  inline Query_Register_Status_Response& operator=(const Query_Register_Status_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query_Register_Status_Response& default_instance();

  void Swap(Query_Register_Status_Response* other);

  // implements Message ----------------------------------------------

  Query_Register_Status_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query_Register_Status_Response& from);
  void MergeFrom(const Query_Register_Status_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorcode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // required bytes errmsg = 2;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const void* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // repeated bytes pn_idx = 3;
  inline int pn_idx_size() const;
  inline void clear_pn_idx();
  static const int kPnIdxFieldNumber = 3;
  inline const ::std::string& pn_idx(int index) const;
  inline ::std::string* mutable_pn_idx(int index);
  inline void set_pn_idx(int index, const ::std::string& value);
  inline void set_pn_idx(int index, const char* value);
  inline void set_pn_idx(int index, const void* value, size_t size);
  inline ::std::string* add_pn_idx();
  inline void add_pn_idx(const ::std::string& value);
  inline void add_pn_idx(const char* value);
  inline void add_pn_idx(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pn_idx() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pn_idx();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.registry.Query_Register_Status_Response)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* errmsg_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pn_idx_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_registry_2eproto();
  friend void protobuf_AssignDesc_registry_2eproto();
  friend void protobuf_ShutdownFile_registry_2eproto();

  void InitAsDefaultInstance();
  static Query_Register_Status_Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Pair

// required bytes key = 1;
inline bool Pair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Pair.key)
  return *key_;
}
inline void Pair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Pair.key)
}
inline void Pair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Pair.key)
}
inline void Pair::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Pair.key)
}
inline ::std::string* Pair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Pair.key)
  return key_;
}
inline ::std::string* Pair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Pair.key)
}

// required bytes value = 2;
inline bool Pair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Pair::value() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Pair.value)
  return *value_;
}
inline void Pair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Pair.value)
}
inline void Pair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Pair.value)
}
inline void Pair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Pair.value)
}
inline ::std::string* Pair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Pair.value)
  return value_;
}
inline ::std::string* Pair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Pair.value)
}

// -------------------------------------------------------------------

// Down_Request_Get_Verifi_Code

// required int32 appid = 1;
inline bool Down_Request_Get_Verifi_Code::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Down_Request_Get_Verifi_Code::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Down_Request_Get_Verifi_Code::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Down_Request_Get_Verifi_Code::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 Down_Request_Get_Verifi_Code::appid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.appid)
  return appid_;
}
inline void Down_Request_Get_Verifi_Code::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.appid)
}

// required bytes cliver = 2;
inline bool Down_Request_Get_Verifi_Code::has_cliver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Down_Request_Get_Verifi_Code::set_has_cliver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Down_Request_Get_Verifi_Code::clear_has_cliver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Down_Request_Get_Verifi_Code::clear_cliver() {
  if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_->clear();
  }
  clear_has_cliver();
}
inline const ::std::string& Down_Request_Get_Verifi_Code::cliver() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.cliver)
  return *cliver_;
}
inline void Down_Request_Get_Verifi_Code::set_cliver(const ::std::string& value) {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  cliver_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.cliver)
}
inline void Down_Request_Get_Verifi_Code::set_cliver(const char* value) {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  cliver_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.cliver)
}
inline void Down_Request_Get_Verifi_Code::set_cliver(const void* value, size_t size) {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  cliver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.cliver)
}
inline ::std::string* Down_Request_Get_Verifi_Code::mutable_cliver() {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.cliver)
  return cliver_;
}
inline ::std::string* Down_Request_Get_Verifi_Code::release_cliver() {
  clear_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cliver_;
    cliver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Get_Verifi_Code::set_allocated_cliver(::std::string* cliver) {
  if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cliver_;
  }
  if (cliver) {
    set_has_cliver();
    cliver_ = cliver;
  } else {
    clear_has_cliver();
    cliver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.cliver)
}

// required bytes pn = 3;
inline bool Down_Request_Get_Verifi_Code::has_pn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Down_Request_Get_Verifi_Code::set_has_pn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Down_Request_Get_Verifi_Code::clear_has_pn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Down_Request_Get_Verifi_Code::clear_pn() {
  if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_->clear();
  }
  clear_has_pn();
}
inline const ::std::string& Down_Request_Get_Verifi_Code::pn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pn)
  return *pn_;
}
inline void Down_Request_Get_Verifi_Code::set_pn(const ::std::string& value) {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  pn_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pn)
}
inline void Down_Request_Get_Verifi_Code::set_pn(const char* value) {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  pn_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pn)
}
inline void Down_Request_Get_Verifi_Code::set_pn(const void* value, size_t size) {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  pn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pn)
}
inline ::std::string* Down_Request_Get_Verifi_Code::mutable_pn() {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pn)
  return pn_;
}
inline ::std::string* Down_Request_Get_Verifi_Code::release_pn() {
  clear_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pn_;
    pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Get_Verifi_Code::set_allocated_pn(::std::string* pn) {
  if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pn_;
  }
  if (pn) {
    set_has_pn();
    pn_ = pn;
  } else {
    clear_has_pn();
    pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pn)
}

// optional bytes pwd = 4;
inline bool Down_Request_Get_Verifi_Code::has_pwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Down_Request_Get_Verifi_Code::set_has_pwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Down_Request_Get_Verifi_Code::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Down_Request_Get_Verifi_Code::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& Down_Request_Get_Verifi_Code::pwd() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pwd)
  return *pwd_;
}
inline void Down_Request_Get_Verifi_Code::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pwd)
}
inline void Down_Request_Get_Verifi_Code::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pwd)
}
inline void Down_Request_Get_Verifi_Code::set_pwd(const void* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pwd)
}
inline ::std::string* Down_Request_Get_Verifi_Code::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pwd)
  return pwd_;
}
inline ::std::string* Down_Request_Get_Verifi_Code::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Get_Verifi_Code::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Get_Verifi_Code.pwd)
}

// -------------------------------------------------------------------

// Down_Response_Get_Verifi_Code

// required int32 errorcode = 1;
inline bool Down_Response_Get_Verifi_Code::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Down_Response_Get_Verifi_Code::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Down_Response_Get_Verifi_Code::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Down_Response_Get_Verifi_Code::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 Down_Response_Get_Verifi_Code::errorcode() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Response_Get_Verifi_Code.errorcode)
  return errorcode_;
}
inline void Down_Response_Get_Verifi_Code::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Response_Get_Verifi_Code.errorcode)
}

// -------------------------------------------------------------------

// Down_Request_Register

// required int32 appid = 1;
inline bool Down_Request_Register::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Down_Request_Register::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Down_Request_Register::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Down_Request_Register::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 Down_Request_Register::appid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Register.appid)
  return appid_;
}
inline void Down_Request_Register::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Register.appid)
}

// required bytes cliver = 2;
inline bool Down_Request_Register::has_cliver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Down_Request_Register::set_has_cliver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Down_Request_Register::clear_has_cliver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Down_Request_Register::clear_cliver() {
  if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_->clear();
  }
  clear_has_cliver();
}
inline const ::std::string& Down_Request_Register::cliver() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Register.cliver)
  return *cliver_;
}
inline void Down_Request_Register::set_cliver(const ::std::string& value) {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  cliver_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Register.cliver)
}
inline void Down_Request_Register::set_cliver(const char* value) {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  cliver_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Register.cliver)
}
inline void Down_Request_Register::set_cliver(const void* value, size_t size) {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  cliver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Register.cliver)
}
inline ::std::string* Down_Request_Register::mutable_cliver() {
  set_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cliver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Register.cliver)
  return cliver_;
}
inline ::std::string* Down_Request_Register::release_cliver() {
  clear_has_cliver();
  if (cliver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cliver_;
    cliver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Register::set_allocated_cliver(::std::string* cliver) {
  if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cliver_;
  }
  if (cliver) {
    set_has_cliver();
    cliver_ = cliver;
  } else {
    clear_has_cliver();
    cliver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Register.cliver)
}

// required bytes pn = 3;
inline bool Down_Request_Register::has_pn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Down_Request_Register::set_has_pn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Down_Request_Register::clear_has_pn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Down_Request_Register::clear_pn() {
  if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_->clear();
  }
  clear_has_pn();
}
inline const ::std::string& Down_Request_Register::pn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Register.pn)
  return *pn_;
}
inline void Down_Request_Register::set_pn(const ::std::string& value) {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  pn_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Register.pn)
}
inline void Down_Request_Register::set_pn(const char* value) {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  pn_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Register.pn)
}
inline void Down_Request_Register::set_pn(const void* value, size_t size) {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  pn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Register.pn)
}
inline ::std::string* Down_Request_Register::mutable_pn() {
  set_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Register.pn)
  return pn_;
}
inline ::std::string* Down_Request_Register::release_pn() {
  clear_has_pn();
  if (pn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pn_;
    pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Register::set_allocated_pn(::std::string* pn) {
  if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pn_;
  }
  if (pn) {
    set_has_pn();
    pn_ = pn;
  } else {
    clear_has_pn();
    pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Register.pn)
}

// required bytes rvc = 4;
inline bool Down_Request_Register::has_rvc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Down_Request_Register::set_has_rvc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Down_Request_Register::clear_has_rvc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Down_Request_Register::clear_rvc() {
  if (rvc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rvc_->clear();
  }
  clear_has_rvc();
}
inline const ::std::string& Down_Request_Register::rvc() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Register.rvc)
  return *rvc_;
}
inline void Down_Request_Register::set_rvc(const ::std::string& value) {
  set_has_rvc();
  if (rvc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rvc_ = new ::std::string;
  }
  rvc_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Register.rvc)
}
inline void Down_Request_Register::set_rvc(const char* value) {
  set_has_rvc();
  if (rvc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rvc_ = new ::std::string;
  }
  rvc_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Register.rvc)
}
inline void Down_Request_Register::set_rvc(const void* value, size_t size) {
  set_has_rvc();
  if (rvc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rvc_ = new ::std::string;
  }
  rvc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Register.rvc)
}
inline ::std::string* Down_Request_Register::mutable_rvc() {
  set_has_rvc();
  if (rvc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rvc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Register.rvc)
  return rvc_;
}
inline ::std::string* Down_Request_Register::release_rvc() {
  clear_has_rvc();
  if (rvc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rvc_;
    rvc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Register::set_allocated_rvc(::std::string* rvc) {
  if (rvc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rvc_;
  }
  if (rvc) {
    set_has_rvc();
    rvc_ = rvc;
  } else {
    clear_has_rvc();
    rvc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Register.rvc)
}

// optional bytes app_uuid = 5;
inline bool Down_Request_Register::has_app_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Down_Request_Register::set_has_app_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Down_Request_Register::clear_has_app_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Down_Request_Register::clear_app_uuid() {
  if (app_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_uuid_->clear();
  }
  clear_has_app_uuid();
}
inline const ::std::string& Down_Request_Register::app_uuid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Register.app_uuid)
  return *app_uuid_;
}
inline void Down_Request_Register::set_app_uuid(const ::std::string& value) {
  set_has_app_uuid();
  if (app_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_uuid_ = new ::std::string;
  }
  app_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Request_Register.app_uuid)
}
inline void Down_Request_Register::set_app_uuid(const char* value) {
  set_has_app_uuid();
  if (app_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_uuid_ = new ::std::string;
  }
  app_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Request_Register.app_uuid)
}
inline void Down_Request_Register::set_app_uuid(const void* value, size_t size) {
  set_has_app_uuid();
  if (app_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_uuid_ = new ::std::string;
  }
  app_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Request_Register.app_uuid)
}
inline ::std::string* Down_Request_Register::mutable_app_uuid() {
  set_has_app_uuid();
  if (app_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Register.app_uuid)
  return app_uuid_;
}
inline ::std::string* Down_Request_Register::release_app_uuid() {
  clear_has_app_uuid();
  if (app_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_uuid_;
    app_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Request_Register::set_allocated_app_uuid(::std::string* app_uuid) {
  if (app_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_uuid_;
  }
  if (app_uuid) {
    set_has_app_uuid();
    app_uuid_ = app_uuid;
  } else {
    clear_has_app_uuid();
    app_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Request_Register.app_uuid)
}

// repeated .qihoo.protocol.registry.Pair info = 6;
inline int Down_Request_Register::info_size() const {
  return info_.size();
}
inline void Down_Request_Register::clear_info() {
  info_.Clear();
}
inline const ::qihoo::protocol::registry::Pair& Down_Request_Register::info(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Request_Register.info)
  return info_.Get(index);
}
inline ::qihoo::protocol::registry::Pair* Down_Request_Register::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Request_Register.info)
  return info_.Mutable(index);
}
inline ::qihoo::protocol::registry::Pair* Down_Request_Register::add_info() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.registry.Down_Request_Register.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >&
Down_Request_Register::info() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.registry.Down_Request_Register.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >*
Down_Request_Register::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.registry.Down_Request_Register.info)
  return &info_;
}

// -------------------------------------------------------------------

// Down_Response_Register

// required int32 errorcode = 1;
inline bool Down_Response_Register::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Down_Response_Register::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Down_Response_Register::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Down_Response_Register::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 Down_Response_Register::errorcode() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Response_Register.errorcode)
  return errorcode_;
}
inline void Down_Response_Register::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Response_Register.errorcode)
}

// optional bytes jid = 2;
inline bool Down_Response_Register::has_jid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Down_Response_Register::set_has_jid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Down_Response_Register::clear_has_jid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Down_Response_Register::clear_jid() {
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_->clear();
  }
  clear_has_jid();
}
inline const ::std::string& Down_Response_Register::jid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Response_Register.jid)
  return *jid_;
}
inline void Down_Response_Register::set_jid(const ::std::string& value) {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  jid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Response_Register.jid)
}
inline void Down_Response_Register::set_jid(const char* value) {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  jid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Response_Register.jid)
}
inline void Down_Response_Register::set_jid(const void* value, size_t size) {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  jid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Response_Register.jid)
}
inline ::std::string* Down_Response_Register::mutable_jid() {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Response_Register.jid)
  return jid_;
}
inline ::std::string* Down_Response_Register::release_jid() {
  clear_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jid_;
    jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Response_Register::set_allocated_jid(::std::string* jid) {
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jid_;
  }
  if (jid) {
    set_has_jid();
    jid_ = jid;
  } else {
    clear_has_jid();
    jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Response_Register.jid)
}

// optional bytes password = 3;
inline bool Down_Response_Register::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Down_Response_Register::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Down_Response_Register::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Down_Response_Register::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Down_Response_Register::password() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Down_Response_Register.password)
  return *password_;
}
inline void Down_Response_Register::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Down_Response_Register.password)
}
inline void Down_Response_Register::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Down_Response_Register.password)
}
inline void Down_Response_Register::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Down_Response_Register.password)
}
inline ::std::string* Down_Response_Register::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Down_Response_Register.password)
  return password_;
}
inline ::std::string* Down_Response_Register::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Down_Response_Register::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Down_Response_Register.password)
}

// -------------------------------------------------------------------

// QID_Register_Request

// required bytes cookie_Q = 1;
inline bool QID_Register_Request::has_cookie_q() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QID_Register_Request::set_has_cookie_q() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QID_Register_Request::clear_has_cookie_q() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QID_Register_Request::clear_cookie_q() {
  if (cookie_q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_q_->clear();
  }
  clear_has_cookie_q();
}
inline const ::std::string& QID_Register_Request::cookie_q() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Request.cookie_Q)
  return *cookie_q_;
}
inline void QID_Register_Request::set_cookie_q(const ::std::string& value) {
  set_has_cookie_q();
  if (cookie_q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_q_ = new ::std::string;
  }
  cookie_q_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Request.cookie_Q)
}
inline void QID_Register_Request::set_cookie_q(const char* value) {
  set_has_cookie_q();
  if (cookie_q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_q_ = new ::std::string;
  }
  cookie_q_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Request.cookie_Q)
}
inline void QID_Register_Request::set_cookie_q(const void* value, size_t size) {
  set_has_cookie_q();
  if (cookie_q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_q_ = new ::std::string;
  }
  cookie_q_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Request.cookie_Q)
}
inline ::std::string* QID_Register_Request::mutable_cookie_q() {
  set_has_cookie_q();
  if (cookie_q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_q_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Request.cookie_Q)
  return cookie_q_;
}
inline ::std::string* QID_Register_Request::release_cookie_q() {
  clear_has_cookie_q();
  if (cookie_q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookie_q_;
    cookie_q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Request::set_allocated_cookie_q(::std::string* cookie_q) {
  if (cookie_q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_q_;
  }
  if (cookie_q) {
    set_has_cookie_q();
    cookie_q_ = cookie_q;
  } else {
    clear_has_cookie_q();
    cookie_q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Request.cookie_Q)
}

// required bytes cookie_T = 2;
inline bool QID_Register_Request::has_cookie_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QID_Register_Request::set_has_cookie_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QID_Register_Request::clear_has_cookie_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QID_Register_Request::clear_cookie_t() {
  if (cookie_t_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_t_->clear();
  }
  clear_has_cookie_t();
}
inline const ::std::string& QID_Register_Request::cookie_t() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Request.cookie_T)
  return *cookie_t_;
}
inline void QID_Register_Request::set_cookie_t(const ::std::string& value) {
  set_has_cookie_t();
  if (cookie_t_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_t_ = new ::std::string;
  }
  cookie_t_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Request.cookie_T)
}
inline void QID_Register_Request::set_cookie_t(const char* value) {
  set_has_cookie_t();
  if (cookie_t_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_t_ = new ::std::string;
  }
  cookie_t_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Request.cookie_T)
}
inline void QID_Register_Request::set_cookie_t(const void* value, size_t size) {
  set_has_cookie_t();
  if (cookie_t_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_t_ = new ::std::string;
  }
  cookie_t_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Request.cookie_T)
}
inline ::std::string* QID_Register_Request::mutable_cookie_t() {
  set_has_cookie_t();
  if (cookie_t_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_t_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Request.cookie_T)
  return cookie_t_;
}
inline ::std::string* QID_Register_Request::release_cookie_t() {
  clear_has_cookie_t();
  if (cookie_t_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookie_t_;
    cookie_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Request::set_allocated_cookie_t(::std::string* cookie_t) {
  if (cookie_t_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_t_;
  }
  if (cookie_t) {
    set_has_cookie_t();
    cookie_t_ = cookie_t;
  } else {
    clear_has_cookie_t();
    cookie_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Request.cookie_T)
}

// required bytes qid = 3;
inline bool QID_Register_Request::has_qid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QID_Register_Request::set_has_qid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QID_Register_Request::clear_has_qid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QID_Register_Request::clear_qid() {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_->clear();
  }
  clear_has_qid();
}
inline const ::std::string& QID_Register_Request::qid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Request.qid)
  return *qid_;
}
inline void QID_Register_Request::set_qid(const ::std::string& value) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Request.qid)
}
inline void QID_Register_Request::set_qid(const char* value) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Request.qid)
}
inline void QID_Register_Request::set_qid(const void* value, size_t size) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Request.qid)
}
inline ::std::string* QID_Register_Request::mutable_qid() {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Request.qid)
  return qid_;
}
inline ::std::string* QID_Register_Request::release_qid() {
  clear_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qid_;
    qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Request::set_allocated_qid(::std::string* qid) {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qid_;
  }
  if (qid) {
    set_has_qid();
    qid_ = qid;
  } else {
    clear_has_qid();
    qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Request.qid)
}

// repeated .qihoo.protocol.registry.Pair info = 4;
inline int QID_Register_Request::info_size() const {
  return info_.size();
}
inline void QID_Register_Request::clear_info() {
  info_.Clear();
}
inline const ::qihoo::protocol::registry::Pair& QID_Register_Request::info(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Request.info)
  return info_.Get(index);
}
inline ::qihoo::protocol::registry::Pair* QID_Register_Request::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Request.info)
  return info_.Mutable(index);
}
inline ::qihoo::protocol::registry::Pair* QID_Register_Request::add_info() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.registry.QID_Register_Request.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >&
QID_Register_Request::info() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.registry.QID_Register_Request.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::registry::Pair >*
QID_Register_Request::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.registry.QID_Register_Request.info)
  return &info_;
}

// optional int32 appid = 5;
inline bool QID_Register_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QID_Register_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QID_Register_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QID_Register_Request::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 QID_Register_Request::appid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Request.appid)
  return appid_;
}
inline void QID_Register_Request::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Request.appid)
}

// optional bytes client_ver = 6;
inline bool QID_Register_Request::has_client_ver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QID_Register_Request::set_has_client_ver() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QID_Register_Request::clear_has_client_ver() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QID_Register_Request::clear_client_ver() {
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_->clear();
  }
  clear_has_client_ver();
}
inline const ::std::string& QID_Register_Request::client_ver() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Request.client_ver)
  return *client_ver_;
}
inline void QID_Register_Request::set_client_ver(const ::std::string& value) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Request.client_ver)
}
inline void QID_Register_Request::set_client_ver(const char* value) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Request.client_ver)
}
inline void QID_Register_Request::set_client_ver(const void* value, size_t size) {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  client_ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Request.client_ver)
}
inline ::std::string* QID_Register_Request::mutable_client_ver() {
  set_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Request.client_ver)
  return client_ver_;
}
inline ::std::string* QID_Register_Request::release_client_ver() {
  clear_has_client_ver();
  if (client_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_ver_;
    client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Request::set_allocated_client_ver(::std::string* client_ver) {
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ver_;
  }
  if (client_ver) {
    set_has_client_ver();
    client_ver_ = client_ver;
  } else {
    clear_has_client_ver();
    client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Request.client_ver)
}

// -------------------------------------------------------------------

// QID_Register_Response

// required int32 errorcode = 1;
inline bool QID_Register_Response::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QID_Register_Response::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QID_Register_Response::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QID_Register_Response::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 QID_Register_Response::errorcode() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Response.errorcode)
  return errorcode_;
}
inline void QID_Register_Response::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Response.errorcode)
}

// optional bytes errmsg = 2;
inline bool QID_Register_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QID_Register_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QID_Register_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QID_Register_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& QID_Register_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Response.errmsg)
  return *errmsg_;
}
inline void QID_Register_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Response.errmsg)
}
inline void QID_Register_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Response.errmsg)
}
inline void QID_Register_Response::set_errmsg(const void* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Response.errmsg)
}
inline ::std::string* QID_Register_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Response.errmsg)
  return errmsg_;
}
inline ::std::string* QID_Register_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Response.errmsg)
}

// optional bytes jid = 3;
inline bool QID_Register_Response::has_jid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QID_Register_Response::set_has_jid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QID_Register_Response::clear_has_jid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QID_Register_Response::clear_jid() {
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_->clear();
  }
  clear_has_jid();
}
inline const ::std::string& QID_Register_Response::jid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Response.jid)
  return *jid_;
}
inline void QID_Register_Response::set_jid(const ::std::string& value) {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  jid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Response.jid)
}
inline void QID_Register_Response::set_jid(const char* value) {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  jid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Response.jid)
}
inline void QID_Register_Response::set_jid(const void* value, size_t size) {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  jid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Response.jid)
}
inline ::std::string* QID_Register_Response::mutable_jid() {
  set_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Response.jid)
  return jid_;
}
inline ::std::string* QID_Register_Response::release_jid() {
  clear_has_jid();
  if (jid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jid_;
    jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Response::set_allocated_jid(::std::string* jid) {
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jid_;
  }
  if (jid) {
    set_has_jid();
    jid_ = jid;
  } else {
    clear_has_jid();
    jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Response.jid)
}

// optional bytes password = 4;
inline bool QID_Register_Response::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QID_Register_Response::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QID_Register_Response::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QID_Register_Response::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& QID_Register_Response::password() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.QID_Register_Response.password)
  return *password_;
}
inline void QID_Register_Response::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.QID_Register_Response.password)
}
inline void QID_Register_Response::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.QID_Register_Response.password)
}
inline void QID_Register_Response::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.QID_Register_Response.password)
}
inline ::std::string* QID_Register_Response::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.QID_Register_Response.password)
  return password_;
}
inline ::std::string* QID_Register_Response::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QID_Register_Response::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.QID_Register_Response.password)
}

// -------------------------------------------------------------------

// Query_Register_Status_Request

// repeated bytes pn = 1;
inline int Query_Register_Status_Request::pn_size() const {
  return pn_.size();
}
inline void Query_Register_Status_Request::clear_pn() {
  pn_.Clear();
}
inline const ::std::string& Query_Register_Status_Request::pn(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Query_Register_Status_Request.pn)
  return pn_.Get(index);
}
inline ::std::string* Query_Register_Status_Request::mutable_pn(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Query_Register_Status_Request.pn)
  return pn_.Mutable(index);
}
inline void Query_Register_Status_Request::set_pn(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Query_Register_Status_Request.pn)
  pn_.Mutable(index)->assign(value);
}
inline void Query_Register_Status_Request::set_pn(int index, const char* value) {
  pn_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Query_Register_Status_Request.pn)
}
inline void Query_Register_Status_Request::set_pn(int index, const void* value, size_t size) {
  pn_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Query_Register_Status_Request.pn)
}
inline ::std::string* Query_Register_Status_Request::add_pn() {
  return pn_.Add();
}
inline void Query_Register_Status_Request::add_pn(const ::std::string& value) {
  pn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qihoo.protocol.registry.Query_Register_Status_Request.pn)
}
inline void Query_Register_Status_Request::add_pn(const char* value) {
  pn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qihoo.protocol.registry.Query_Register_Status_Request.pn)
}
inline void Query_Register_Status_Request::add_pn(const void* value, size_t size) {
  pn_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qihoo.protocol.registry.Query_Register_Status_Request.pn)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Query_Register_Status_Request::pn() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.registry.Query_Register_Status_Request.pn)
  return pn_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Query_Register_Status_Request::mutable_pn() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.registry.Query_Register_Status_Request.pn)
  return &pn_;
}

// -------------------------------------------------------------------

// Query_Register_Status_Response

// required int32 errorcode = 1;
inline bool Query_Register_Status_Response::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Query_Register_Status_Response::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Query_Register_Status_Response::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Query_Register_Status_Response::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 Query_Register_Status_Response::errorcode() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Query_Register_Status_Response.errorcode)
  return errorcode_;
}
inline void Query_Register_Status_Response::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Query_Register_Status_Response.errorcode)
}

// required bytes errmsg = 2;
inline bool Query_Register_Status_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Query_Register_Status_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Query_Register_Status_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Query_Register_Status_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& Query_Register_Status_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Query_Register_Status_Response.errmsg)
  return *errmsg_;
}
inline void Query_Register_Status_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Query_Register_Status_Response.errmsg)
}
inline void Query_Register_Status_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Query_Register_Status_Response.errmsg)
}
inline void Query_Register_Status_Response::set_errmsg(const void* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Query_Register_Status_Response.errmsg)
}
inline ::std::string* Query_Register_Status_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Query_Register_Status_Response.errmsg)
  return errmsg_;
}
inline ::std::string* Query_Register_Status_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Query_Register_Status_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.registry.Query_Register_Status_Response.errmsg)
}

// repeated bytes pn_idx = 3;
inline int Query_Register_Status_Response::pn_idx_size() const {
  return pn_idx_.size();
}
inline void Query_Register_Status_Response::clear_pn_idx() {
  pn_idx_.Clear();
}
inline const ::std::string& Query_Register_Status_Response::pn_idx(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
  return pn_idx_.Get(index);
}
inline ::std::string* Query_Register_Status_Response::mutable_pn_idx(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
  return pn_idx_.Mutable(index);
}
inline void Query_Register_Status_Response::set_pn_idx(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
  pn_idx_.Mutable(index)->assign(value);
}
inline void Query_Register_Status_Response::set_pn_idx(int index, const char* value) {
  pn_idx_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
}
inline void Query_Register_Status_Response::set_pn_idx(int index, const void* value, size_t size) {
  pn_idx_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
}
inline ::std::string* Query_Register_Status_Response::add_pn_idx() {
  return pn_idx_.Add();
}
inline void Query_Register_Status_Response::add_pn_idx(const ::std::string& value) {
  pn_idx_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
}
inline void Query_Register_Status_Response::add_pn_idx(const char* value) {
  pn_idx_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
}
inline void Query_Register_Status_Response::add_pn_idx(const void* value, size_t size) {
  pn_idx_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Query_Register_Status_Response::pn_idx() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
  return pn_idx_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Query_Register_Status_Response::mutable_pn_idx() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.registry.Query_Register_Status_Response.pn_idx)
  return &pn_idx_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace registry
}  // namespace protocol
}  // namespace qihoo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_registry_2eproto__INCLUDED
