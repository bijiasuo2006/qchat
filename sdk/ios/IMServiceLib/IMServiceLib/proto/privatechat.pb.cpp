// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: privatechat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "privatechat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace privatechat {

namespace {

const ::google::protobuf::Descriptor* PChatPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatSendMsgRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatSendMsgRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatSendMsgResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatSendMsgResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatGetMsgRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatGetMsgRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatGetMsgResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatGetMsgResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatNewMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatNewMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PChatPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PChatPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_privatechat_2eproto() {
  protobuf_AddDesc_privatechat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "privatechat.proto");
  GOOGLE_CHECK(file != NULL);
  PChatPair_descriptor_ = file->message_type(0);
  static const int PChatPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPair, value_),
  };
  PChatPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatPair_descriptor_,
      PChatPair::default_instance_,
      PChatPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatPair));
  PChatMsg_descriptor_ = file->message_type(1);
  static const int PChatMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatMsg, msgprops_),
  };
  PChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatMsg_descriptor_,
      PChatMsg::default_instance_,
      PChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatMsg));
  PChatSendMsgRequest_descriptor_ = file->message_type(2);
  static const int PChatSendMsgRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, bodytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, bodydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, expiresec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, destappid_),
  };
  PChatSendMsgRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatSendMsgRequest_descriptor_,
      PChatSendMsgRequest::default_instance_,
      PChatSendMsgRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatSendMsgRequest));
  PChatSendMsgResponse_descriptor_ = file->message_type(3);
  static const int PChatSendMsgResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgResponse, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgResponse, reason_),
  };
  PChatSendMsgResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatSendMsgResponse_descriptor_,
      PChatSendMsgResponse::default_instance_,
      PChatSendMsgResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatSendMsgResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatSendMsgResponse));
  PChatGetMsgRequest_descriptor_ = file->message_type(4);
  static const int PChatGetMsgRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgRequest, count_),
  };
  PChatGetMsgRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatGetMsgRequest_descriptor_,
      PChatGetMsgRequest::default_instance_,
      PChatGetMsgRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatGetMsgRequest));
  PChatGetMsgResponse_descriptor_ = file->message_type(5);
  static const int PChatGetMsgResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgResponse, msglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgResponse, maxid_),
  };
  PChatGetMsgResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatGetMsgResponse_descriptor_,
      PChatGetMsgResponse::default_instance_,
      PChatGetMsgResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatGetMsgResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatGetMsgResponse));
  PChatNewMsgNotify_descriptor_ = file->message_type(6);
  static const int PChatNewMsgNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatNewMsgNotify, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatNewMsgNotify, maxid_),
  };
  PChatNewMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatNewMsgNotify_descriptor_,
      PChatNewMsgNotify::default_instance_,
      PChatNewMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatNewMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatNewMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatNewMsgNotify));
  PChatRequest_descriptor_ = file->message_type(7);
  static const int PChatRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatRequest, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatRequest, sendreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatRequest, getreq_),
  };
  PChatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatRequest_descriptor_,
      PChatRequest::default_instance_,
      PChatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatRequest));
  PChatResponse_descriptor_ = file->message_type(8);
  static const int PChatResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, sendres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, getres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, msgnotify_),
  };
  PChatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatResponse_descriptor_,
      PChatResponse::default_instance_,
      PChatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatResponse));
  PChatPacket_descriptor_ = file->message_type(9);
  static const int PChatPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPacket, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPacket, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPacket, uuid_),
  };
  PChatPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PChatPacket_descriptor_,
      PChatPacket::default_instance_,
      PChatPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PChatPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PChatPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_privatechat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatPair_descriptor_, &PChatPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatMsg_descriptor_, &PChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatSendMsgRequest_descriptor_, &PChatSendMsgRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatSendMsgResponse_descriptor_, &PChatSendMsgResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatGetMsgRequest_descriptor_, &PChatGetMsgRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatGetMsgResponse_descriptor_, &PChatGetMsgResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatNewMsgNotify_descriptor_, &PChatNewMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatRequest_descriptor_, &PChatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatResponse_descriptor_, &PChatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PChatPacket_descriptor_, &PChatPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_privatechat_2eproto() {
  delete PChatPair::default_instance_;
  delete PChatPair_reflection_;
  delete PChatMsg::default_instance_;
  delete PChatMsg_reflection_;
  delete PChatSendMsgRequest::default_instance_;
  delete PChatSendMsgRequest_reflection_;
  delete PChatSendMsgResponse::default_instance_;
  delete PChatSendMsgResponse_reflection_;
  delete PChatGetMsgRequest::default_instance_;
  delete PChatGetMsgRequest_reflection_;
  delete PChatGetMsgResponse::default_instance_;
  delete PChatGetMsgResponse_reflection_;
  delete PChatNewMsgNotify::default_instance_;
  delete PChatNewMsgNotify_reflection_;
  delete PChatRequest::default_instance_;
  delete PChatRequest_reflection_;
  delete PChatResponse::default_instance_;
  delete PChatResponse_reflection_;
  delete PChatPacket::default_instance_;
  delete PChatPacket_reflection_;
}

void protobuf_AddDesc_privatechat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021privatechat.proto\022\032qihoo.protocol.priv"
    "atechat\"\'\n\tPChatPair\022\013\n\003key\030\001 \002(\t\022\r\n\005val"
    "ue\030\002 \001(\014\"C\n\010PChatMsg\0227\n\010msgprops\030\001 \003(\0132%"
    ".qihoo.protocol.privatechat.PChatPair\"o\n"
    "\023PChatSendMsgRequest\022\016\n\006destID\030\001 \002(\t\022\020\n\010"
    "bodytype\030\002 \002(\005\022\020\n\010bodydata\030\003 \002(\014\022\021\n\texpi"
    "resec\030\004 \001(\r\022\021\n\tdestappid\030\005 \001(\005\"C\n\024PChatS"
    "endMsgResponse\022\r\n\005msgid\030\001 \002(\003\022\014\n\004code\030\002 "
    "\001(\005\022\016\n\006reason\030\003 \001(\t\"2\n\022PChatGetMsgReques"
    "t\022\r\n\005start\030\001 \002(\003\022\r\n\005count\030\002 \002(\005\"[\n\023PChat"
    "GetMsgResponse\0225\n\007msglist\030\001 \003(\0132$.qihoo."
    "protocol.privatechat.PChatMsg\022\r\n\005maxid\030\002"
    " \001(\003\"U\n\021PChatNewMsgNotify\0221\n\003msg\030\001 \001(\0132$"
    ".qihoo.protocol.privatechat.PChatMsg\022\r\n\005"
    "maxid\030\002 \001(\003\"\241\001\n\014PChatRequest\022\017\n\007payload\030"
    "\001 \002(\005\022@\n\007sendreq\030\002 \001(\0132/.qihoo.protocol."
    "privatechat.PChatSendMsgRequest\022>\n\006getre"
    "q\030\003 \001(\0132..qihoo.protocol.privatechat.PCh"
    "atGetMsgRequest\"\206\002\n\rPChatResponse\022\017\n\007pay"
    "load\030\001 \002(\005\022\016\n\006result\030\002 \002(\005\022\016\n\006reason\030\003 \001"
    "(\t\022A\n\007sendres\030\004 \001(\01320.qihoo.protocol.pri"
    "vatechat.PChatSendMsgResponse\022\?\n\006getres\030"
    "\005 \001(\0132/.qihoo.protocol.privatechat.PChat"
    "GetMsgResponse\022@\n\tmsgnotify\030d \001(\0132-.qiho"
    "o.protocol.privatechat.PChatNewMsgNotify"
    "\"\223\001\n\013PChatPacket\0229\n\007request\030\001 \001(\0132(.qiho"
    "o.protocol.privatechat.PChatRequest\022;\n\010r"
    "esponse\030\002 \001(\0132).qihoo.protocol.privatech"
    "at.PChatResponse\022\014\n\004uuid\030\003 \001(\tB8\n)com.qi"
    "hoo.contact.cloud.protocol.messagesB\013pri"
    "vatechat", 1208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "privatechat.proto", &protobuf_RegisterTypes);
  PChatPair::default_instance_ = new PChatPair();
  PChatMsg::default_instance_ = new PChatMsg();
  PChatSendMsgRequest::default_instance_ = new PChatSendMsgRequest();
  PChatSendMsgResponse::default_instance_ = new PChatSendMsgResponse();
  PChatGetMsgRequest::default_instance_ = new PChatGetMsgRequest();
  PChatGetMsgResponse::default_instance_ = new PChatGetMsgResponse();
  PChatNewMsgNotify::default_instance_ = new PChatNewMsgNotify();
  PChatRequest::default_instance_ = new PChatRequest();
  PChatResponse::default_instance_ = new PChatResponse();
  PChatPacket::default_instance_ = new PChatPacket();
  PChatPair::default_instance_->InitAsDefaultInstance();
  PChatMsg::default_instance_->InitAsDefaultInstance();
  PChatSendMsgRequest::default_instance_->InitAsDefaultInstance();
  PChatSendMsgResponse::default_instance_->InitAsDefaultInstance();
  PChatGetMsgRequest::default_instance_->InitAsDefaultInstance();
  PChatGetMsgResponse::default_instance_->InitAsDefaultInstance();
  PChatNewMsgNotify::default_instance_->InitAsDefaultInstance();
  PChatRequest::default_instance_->InitAsDefaultInstance();
  PChatResponse::default_instance_->InitAsDefaultInstance();
  PChatPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_privatechat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_privatechat_2eproto {
  StaticDescriptorInitializer_privatechat_2eproto() {
    protobuf_AddDesc_privatechat_2eproto();
  }
} static_descriptor_initializer_privatechat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PChatPair::kKeyFieldNumber;
const int PChatPair::kValueFieldNumber;
#endif  // !_MSC_VER

PChatPair::PChatPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatPair)
}

void PChatPair::InitAsDefaultInstance() {
}

PChatPair::PChatPair(const PChatPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatPair)
}

void PChatPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatPair::~PChatPair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatPair)
  SharedDtor();
}

void PChatPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PChatPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatPair_descriptor_;
}

const PChatPair& PChatPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatPair* PChatPair::default_instance_ = NULL;

PChatPair* PChatPair::New() const {
  return new PChatPair;
}

void PChatPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatPair)
  return false;
#undef DO_
}

void PChatPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatPair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatPair)
}

::google::protobuf::uint8* PChatPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatPair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatPair)
  return target;
}

int PChatPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatPair::MergeFrom(const PChatPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatPair::CopyFrom(const PChatPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PChatPair::Swap(PChatPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatPair_descriptor_;
  metadata.reflection = PChatPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatMsg::kMsgpropsFieldNumber;
#endif  // !_MSC_VER

PChatMsg::PChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatMsg)
}

void PChatMsg::InitAsDefaultInstance() {
}

PChatMsg::PChatMsg(const PChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatMsg)
}

void PChatMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatMsg::~PChatMsg() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatMsg)
  SharedDtor();
}

void PChatMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatMsg_descriptor_;
}

const PChatMsg& PChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatMsg* PChatMsg::default_instance_ = NULL;

PChatMsg* PChatMsg::New() const {
  return new PChatMsg;
}

void PChatMsg::Clear() {
  msgprops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.privatechat.PChatPair msgprops = 1;
      case 1: {
        if (tag == 10) {
         parse_msgprops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgprops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msgprops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatMsg)
  return false;
#undef DO_
}

void PChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatMsg)
  // repeated .qihoo.protocol.privatechat.PChatPair msgprops = 1;
  for (int i = 0; i < this->msgprops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgprops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatMsg)
}

::google::protobuf::uint8* PChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatMsg)
  // repeated .qihoo.protocol.privatechat.PChatPair msgprops = 1;
  for (int i = 0; i < this->msgprops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgprops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatMsg)
  return target;
}

int PChatMsg::ByteSize() const {
  int total_size = 0;

  // repeated .qihoo.protocol.privatechat.PChatPair msgprops = 1;
  total_size += 1 * this->msgprops_size();
  for (int i = 0; i < this->msgprops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgprops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatMsg::MergeFrom(const PChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgprops_.MergeFrom(from.msgprops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatMsg::CopyFrom(const PChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatMsg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msgprops())) return false;
  return true;
}

void PChatMsg::Swap(PChatMsg* other) {
  if (other != this) {
    msgprops_.Swap(&other->msgprops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatMsg_descriptor_;
  metadata.reflection = PChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatSendMsgRequest::kDestIDFieldNumber;
const int PChatSendMsgRequest::kBodytypeFieldNumber;
const int PChatSendMsgRequest::kBodydataFieldNumber;
const int PChatSendMsgRequest::kExpiresecFieldNumber;
const int PChatSendMsgRequest::kDestappidFieldNumber;
#endif  // !_MSC_VER

PChatSendMsgRequest::PChatSendMsgRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatSendMsgRequest)
}

void PChatSendMsgRequest::InitAsDefaultInstance() {
}

PChatSendMsgRequest::PChatSendMsgRequest(const PChatSendMsgRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatSendMsgRequest)
}

void PChatSendMsgRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  destid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodytype_ = 0;
  bodydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiresec_ = 0u;
  destappid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatSendMsgRequest::~PChatSendMsgRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatSendMsgRequest)
  SharedDtor();
}

void PChatSendMsgRequest::SharedDtor() {
  if (destid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destid_;
  }
  if (bodydata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bodydata_;
  }
  if (this != default_instance_) {
  }
}

void PChatSendMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatSendMsgRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatSendMsgRequest_descriptor_;
}

const PChatSendMsgRequest& PChatSendMsgRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatSendMsgRequest* PChatSendMsgRequest::default_instance_ = NULL;

PChatSendMsgRequest* PChatSendMsgRequest::New() const {
  return new PChatSendMsgRequest;
}

void PChatSendMsgRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PChatSendMsgRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bodytype_, destappid_);
    if (has_destid()) {
      if (destid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        destid_->clear();
      }
    }
    if (has_bodydata()) {
      if (bodydata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bodydata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatSendMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatSendMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string destID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destid().data(), this->destid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "destid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bodytype;
        break;
      }

      // required int32 bodytype = 2;
      case 2: {
        if (tag == 16) {
         parse_bodytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bodytype_)));
          set_has_bodytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bodydata;
        break;
      }

      // required bytes bodydata = 3;
      case 3: {
        if (tag == 26) {
         parse_bodydata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bodydata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiresec;
        break;
      }

      // optional uint32 expiresec = 4;
      case 4: {
        if (tag == 32) {
         parse_expiresec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiresec_)));
          set_has_expiresec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_destappid;
        break;
      }

      // optional int32 destappid = 5;
      case 5: {
        if (tag == 40) {
         parse_destappid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destappid_)));
          set_has_destappid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatSendMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatSendMsgRequest)
  return false;
#undef DO_
}

void PChatSendMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatSendMsgRequest)
  // required string destID = 1;
  if (has_destid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destid().data(), this->destid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destid(), output);
  }

  // required int32 bodytype = 2;
  if (has_bodytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bodytype(), output);
  }

  // required bytes bodydata = 3;
  if (has_bodydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bodydata(), output);
  }

  // optional uint32 expiresec = 4;
  if (has_expiresec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expiresec(), output);
  }

  // optional int32 destappid = 5;
  if (has_destappid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->destappid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatSendMsgRequest)
}

::google::protobuf::uint8* PChatSendMsgRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatSendMsgRequest)
  // required string destID = 1;
  if (has_destid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destid().data(), this->destid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destid(), target);
  }

  // required int32 bodytype = 2;
  if (has_bodytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bodytype(), target);
  }

  // required bytes bodydata = 3;
  if (has_bodydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bodydata(), target);
  }

  // optional uint32 expiresec = 4;
  if (has_expiresec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expiresec(), target);
  }

  // optional int32 destappid = 5;
  if (has_destappid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->destappid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatSendMsgRequest)
  return target;
}

int PChatSendMsgRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string destID = 1;
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destid());
    }

    // required int32 bodytype = 2;
    if (has_bodytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bodytype());
    }

    // required bytes bodydata = 3;
    if (has_bodydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bodydata());
    }

    // optional uint32 expiresec = 4;
    if (has_expiresec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiresec());
    }

    // optional int32 destappid = 5;
    if (has_destappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destappid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatSendMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatSendMsgRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatSendMsgRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatSendMsgRequest::MergeFrom(const PChatSendMsgRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destid()) {
      set_destid(from.destid());
    }
    if (from.has_bodytype()) {
      set_bodytype(from.bodytype());
    }
    if (from.has_bodydata()) {
      set_bodydata(from.bodydata());
    }
    if (from.has_expiresec()) {
      set_expiresec(from.expiresec());
    }
    if (from.has_destappid()) {
      set_destappid(from.destappid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatSendMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatSendMsgRequest::CopyFrom(const PChatSendMsgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatSendMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PChatSendMsgRequest::Swap(PChatSendMsgRequest* other) {
  if (other != this) {
    std::swap(destid_, other->destid_);
    std::swap(bodytype_, other->bodytype_);
    std::swap(bodydata_, other->bodydata_);
    std::swap(expiresec_, other->expiresec_);
    std::swap(destappid_, other->destappid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatSendMsgRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatSendMsgRequest_descriptor_;
  metadata.reflection = PChatSendMsgRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatSendMsgResponse::kMsgidFieldNumber;
const int PChatSendMsgResponse::kCodeFieldNumber;
const int PChatSendMsgResponse::kReasonFieldNumber;
#endif  // !_MSC_VER

PChatSendMsgResponse::PChatSendMsgResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatSendMsgResponse)
}

void PChatSendMsgResponse::InitAsDefaultInstance() {
}

PChatSendMsgResponse::PChatSendMsgResponse(const PChatSendMsgResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatSendMsgResponse)
}

void PChatSendMsgResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatSendMsgResponse::~PChatSendMsgResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatSendMsgResponse)
  SharedDtor();
}

void PChatSendMsgResponse::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void PChatSendMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatSendMsgResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatSendMsgResponse_descriptor_;
}

const PChatSendMsgResponse& PChatSendMsgResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatSendMsgResponse* PChatSendMsgResponse::default_instance_ = NULL;

PChatSendMsgResponse* PChatSendMsgResponse::New() const {
  return new PChatSendMsgResponse;
}

void PChatSendMsgResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = GOOGLE_LONGLONG(0);
    code_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatSendMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatSendMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatSendMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatSendMsgResponse)
  return false;
#undef DO_
}

void PChatSendMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatSendMsgResponse)
  // required int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatSendMsgResponse)
}

::google::protobuf::uint8* PChatSendMsgResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatSendMsgResponse)
  // required int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatSendMsgResponse)
  return target;
}

int PChatSendMsgResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatSendMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatSendMsgResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatSendMsgResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatSendMsgResponse::MergeFrom(const PChatSendMsgResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatSendMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatSendMsgResponse::CopyFrom(const PChatSendMsgResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatSendMsgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PChatSendMsgResponse::Swap(PChatSendMsgResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(code_, other->code_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatSendMsgResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatSendMsgResponse_descriptor_;
  metadata.reflection = PChatSendMsgResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatGetMsgRequest::kStartFieldNumber;
const int PChatGetMsgRequest::kCountFieldNumber;
#endif  // !_MSC_VER

PChatGetMsgRequest::PChatGetMsgRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatGetMsgRequest)
}

void PChatGetMsgRequest::InitAsDefaultInstance() {
}

PChatGetMsgRequest::PChatGetMsgRequest(const PChatGetMsgRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatGetMsgRequest)
}

void PChatGetMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatGetMsgRequest::~PChatGetMsgRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatGetMsgRequest)
  SharedDtor();
}

void PChatGetMsgRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PChatGetMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatGetMsgRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatGetMsgRequest_descriptor_;
}

const PChatGetMsgRequest& PChatGetMsgRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatGetMsgRequest* PChatGetMsgRequest::default_instance_ = NULL;

PChatGetMsgRequest* PChatGetMsgRequest::New() const {
  return new PChatGetMsgRequest;
}

void PChatGetMsgRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PChatGetMsgRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatGetMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatGetMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatGetMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatGetMsgRequest)
  return false;
#undef DO_
}

void PChatGetMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatGetMsgRequest)
  // required int64 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatGetMsgRequest)
}

::google::protobuf::uint8* PChatGetMsgRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatGetMsgRequest)
  // required int64 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatGetMsgRequest)
  return target;
}

int PChatGetMsgRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatGetMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatGetMsgRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatGetMsgRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatGetMsgRequest::MergeFrom(const PChatGetMsgRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatGetMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatGetMsgRequest::CopyFrom(const PChatGetMsgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatGetMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PChatGetMsgRequest::Swap(PChatGetMsgRequest* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatGetMsgRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatGetMsgRequest_descriptor_;
  metadata.reflection = PChatGetMsgRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatGetMsgResponse::kMsglistFieldNumber;
const int PChatGetMsgResponse::kMaxidFieldNumber;
#endif  // !_MSC_VER

PChatGetMsgResponse::PChatGetMsgResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatGetMsgResponse)
}

void PChatGetMsgResponse::InitAsDefaultInstance() {
}

PChatGetMsgResponse::PChatGetMsgResponse(const PChatGetMsgResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatGetMsgResponse)
}

void PChatGetMsgResponse::SharedCtor() {
  _cached_size_ = 0;
  maxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatGetMsgResponse::~PChatGetMsgResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatGetMsgResponse)
  SharedDtor();
}

void PChatGetMsgResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PChatGetMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatGetMsgResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatGetMsgResponse_descriptor_;
}

const PChatGetMsgResponse& PChatGetMsgResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatGetMsgResponse* PChatGetMsgResponse::default_instance_ = NULL;

PChatGetMsgResponse* PChatGetMsgResponse::New() const {
  return new PChatGetMsgResponse;
}

void PChatGetMsgResponse::Clear() {
  maxid_ = GOOGLE_LONGLONG(0);
  msglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatGetMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatGetMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.privatechat.PChatMsg msglist = 1;
      case 1: {
        if (tag == 10) {
         parse_msglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msglist;
        if (input->ExpectTag(16)) goto parse_maxid;
        break;
      }

      // optional int64 maxid = 2;
      case 2: {
        if (tag == 16) {
         parse_maxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxid_)));
          set_has_maxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatGetMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatGetMsgResponse)
  return false;
#undef DO_
}

void PChatGetMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatGetMsgResponse)
  // repeated .qihoo.protocol.privatechat.PChatMsg msglist = 1;
  for (int i = 0; i < this->msglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msglist(i), output);
  }

  // optional int64 maxid = 2;
  if (has_maxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatGetMsgResponse)
}

::google::protobuf::uint8* PChatGetMsgResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatGetMsgResponse)
  // repeated .qihoo.protocol.privatechat.PChatMsg msglist = 1;
  for (int i = 0; i < this->msglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msglist(i), target);
  }

  // optional int64 maxid = 2;
  if (has_maxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatGetMsgResponse)
  return target;
}

int PChatGetMsgResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 maxid = 2;
    if (has_maxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxid());
    }

  }
  // repeated .qihoo.protocol.privatechat.PChatMsg msglist = 1;
  total_size += 1 * this->msglist_size();
  for (int i = 0; i < this->msglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatGetMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatGetMsgResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatGetMsgResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatGetMsgResponse::MergeFrom(const PChatGetMsgResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msglist_.MergeFrom(from.msglist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_maxid()) {
      set_maxid(from.maxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatGetMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatGetMsgResponse::CopyFrom(const PChatGetMsgResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatGetMsgResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msglist())) return false;
  return true;
}

void PChatGetMsgResponse::Swap(PChatGetMsgResponse* other) {
  if (other != this) {
    msglist_.Swap(&other->msglist_);
    std::swap(maxid_, other->maxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatGetMsgResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatGetMsgResponse_descriptor_;
  metadata.reflection = PChatGetMsgResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatNewMsgNotify::kMsgFieldNumber;
const int PChatNewMsgNotify::kMaxidFieldNumber;
#endif  // !_MSC_VER

PChatNewMsgNotify::PChatNewMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatNewMsgNotify)
}

void PChatNewMsgNotify::InitAsDefaultInstance() {
  msg_ = const_cast< ::qihoo::protocol::privatechat::PChatMsg*>(&::qihoo::protocol::privatechat::PChatMsg::default_instance());
}

PChatNewMsgNotify::PChatNewMsgNotify(const PChatNewMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatNewMsgNotify)
}

void PChatNewMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  maxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatNewMsgNotify::~PChatNewMsgNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatNewMsgNotify)
  SharedDtor();
}

void PChatNewMsgNotify::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void PChatNewMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatNewMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatNewMsgNotify_descriptor_;
}

const PChatNewMsgNotify& PChatNewMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatNewMsgNotify* PChatNewMsgNotify::default_instance_ = NULL;

PChatNewMsgNotify* PChatNewMsgNotify::New() const {
  return new PChatNewMsgNotify;
}

void PChatNewMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::qihoo::protocol::privatechat::PChatMsg::Clear();
    }
    maxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatNewMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatNewMsgNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.privatechat.PChatMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxid;
        break;
      }

      // optional int64 maxid = 2;
      case 2: {
        if (tag == 16) {
         parse_maxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxid_)));
          set_has_maxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatNewMsgNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatNewMsgNotify)
  return false;
#undef DO_
}

void PChatNewMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatNewMsgNotify)
  // optional .qihoo.protocol.privatechat.PChatMsg msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  // optional int64 maxid = 2;
  if (has_maxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatNewMsgNotify)
}

::google::protobuf::uint8* PChatNewMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatNewMsgNotify)
  // optional .qihoo.protocol.privatechat.PChatMsg msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  // optional int64 maxid = 2;
  if (has_maxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatNewMsgNotify)
  return target;
}

int PChatNewMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.privatechat.PChatMsg msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // optional int64 maxid = 2;
    if (has_maxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatNewMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatNewMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatNewMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatNewMsgNotify::MergeFrom(const PChatNewMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::qihoo::protocol::privatechat::PChatMsg::MergeFrom(from.msg());
    }
    if (from.has_maxid()) {
      set_maxid(from.maxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatNewMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatNewMsgNotify::CopyFrom(const PChatNewMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatNewMsgNotify::IsInitialized() const {

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void PChatNewMsgNotify::Swap(PChatNewMsgNotify* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(maxid_, other->maxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatNewMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatNewMsgNotify_descriptor_;
  metadata.reflection = PChatNewMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatRequest::kPayloadFieldNumber;
const int PChatRequest::kSendreqFieldNumber;
const int PChatRequest::kGetreqFieldNumber;
#endif  // !_MSC_VER

PChatRequest::PChatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatRequest)
}

void PChatRequest::InitAsDefaultInstance() {
  sendreq_ = const_cast< ::qihoo::protocol::privatechat::PChatSendMsgRequest*>(&::qihoo::protocol::privatechat::PChatSendMsgRequest::default_instance());
  getreq_ = const_cast< ::qihoo::protocol::privatechat::PChatGetMsgRequest*>(&::qihoo::protocol::privatechat::PChatGetMsgRequest::default_instance());
}

PChatRequest::PChatRequest(const PChatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatRequest)
}

void PChatRequest::SharedCtor() {
  _cached_size_ = 0;
  payload_ = 0;
  sendreq_ = NULL;
  getreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatRequest::~PChatRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatRequest)
  SharedDtor();
}

void PChatRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sendreq_;
    delete getreq_;
  }
}

void PChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatRequest_descriptor_;
}

const PChatRequest& PChatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatRequest* PChatRequest::default_instance_ = NULL;

PChatRequest* PChatRequest::New() const {
  return new PChatRequest;
}

void PChatRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    payload_ = 0;
    if (has_sendreq()) {
      if (sendreq_ != NULL) sendreq_->::qihoo::protocol::privatechat::PChatSendMsgRequest::Clear();
    }
    if (has_getreq()) {
      if (getreq_ != NULL) getreq_->::qihoo::protocol::privatechat::PChatGetMsgRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 payload = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_)));
          set_has_payload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sendreq;
        break;
      }

      // optional .qihoo.protocol.privatechat.PChatSendMsgRequest sendreq = 2;
      case 2: {
        if (tag == 18) {
         parse_sendreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getreq;
        break;
      }

      // optional .qihoo.protocol.privatechat.PChatGetMsgRequest getreq = 3;
      case 3: {
        if (tag == 26) {
         parse_getreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatRequest)
  return false;
#undef DO_
}

void PChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatRequest)
  // required int32 payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->payload(), output);
  }

  // optional .qihoo.protocol.privatechat.PChatSendMsgRequest sendreq = 2;
  if (has_sendreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sendreq(), output);
  }

  // optional .qihoo.protocol.privatechat.PChatGetMsgRequest getreq = 3;
  if (has_getreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatRequest)
}

::google::protobuf::uint8* PChatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatRequest)
  // required int32 payload = 1;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->payload(), target);
  }

  // optional .qihoo.protocol.privatechat.PChatSendMsgRequest sendreq = 2;
  if (has_sendreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sendreq(), target);
  }

  // optional .qihoo.protocol.privatechat.PChatGetMsgRequest getreq = 3;
  if (has_getreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatRequest)
  return target;
}

int PChatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payload());
    }

    // optional .qihoo.protocol.privatechat.PChatSendMsgRequest sendreq = 2;
    if (has_sendreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendreq());
    }

    // optional .qihoo.protocol.privatechat.PChatGetMsgRequest getreq = 3;
    if (has_getreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatRequest::MergeFrom(const PChatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_sendreq()) {
      mutable_sendreq()->::qihoo::protocol::privatechat::PChatSendMsgRequest::MergeFrom(from.sendreq());
    }
    if (from.has_getreq()) {
      mutable_getreq()->::qihoo::protocol::privatechat::PChatGetMsgRequest::MergeFrom(from.getreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatRequest::CopyFrom(const PChatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_sendreq()) {
    if (!this->sendreq().IsInitialized()) return false;
  }
  if (has_getreq()) {
    if (!this->getreq().IsInitialized()) return false;
  }
  return true;
}

void PChatRequest::Swap(PChatRequest* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(sendreq_, other->sendreq_);
    std::swap(getreq_, other->getreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatRequest_descriptor_;
  metadata.reflection = PChatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatResponse::kPayloadFieldNumber;
const int PChatResponse::kResultFieldNumber;
const int PChatResponse::kReasonFieldNumber;
const int PChatResponse::kSendresFieldNumber;
const int PChatResponse::kGetresFieldNumber;
const int PChatResponse::kMsgnotifyFieldNumber;
#endif  // !_MSC_VER

PChatResponse::PChatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatResponse)
}

void PChatResponse::InitAsDefaultInstance() {
  sendres_ = const_cast< ::qihoo::protocol::privatechat::PChatSendMsgResponse*>(&::qihoo::protocol::privatechat::PChatSendMsgResponse::default_instance());
  getres_ = const_cast< ::qihoo::protocol::privatechat::PChatGetMsgResponse*>(&::qihoo::protocol::privatechat::PChatGetMsgResponse::default_instance());
  msgnotify_ = const_cast< ::qihoo::protocol::privatechat::PChatNewMsgNotify*>(&::qihoo::protocol::privatechat::PChatNewMsgNotify::default_instance());
}

PChatResponse::PChatResponse(const PChatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatResponse)
}

void PChatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_ = 0;
  result_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendres_ = NULL;
  getres_ = NULL;
  msgnotify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatResponse::~PChatResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatResponse)
  SharedDtor();
}

void PChatResponse::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete sendres_;
    delete getres_;
    delete msgnotify_;
  }
}

void PChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatResponse_descriptor_;
}

const PChatResponse& PChatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatResponse* PChatResponse::default_instance_ = NULL;

PChatResponse* PChatResponse::New() const {
  return new PChatResponse;
}

void PChatResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PChatResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(payload_, result_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_sendres()) {
      if (sendres_ != NULL) sendres_->::qihoo::protocol::privatechat::PChatSendMsgResponse::Clear();
    }
    if (has_getres()) {
      if (getres_ != NULL) getres_->::qihoo::protocol::privatechat::PChatGetMsgResponse::Clear();
    }
    if (has_msgnotify()) {
      if (msgnotify_ != NULL) msgnotify_->::qihoo::protocol::privatechat::PChatNewMsgNotify::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 payload = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_)));
          set_has_payload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sendres;
        break;
      }

      // optional .qihoo.protocol.privatechat.PChatSendMsgResponse sendres = 4;
      case 4: {
        if (tag == 34) {
         parse_sendres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_getres;
        break;
      }

      // optional .qihoo.protocol.privatechat.PChatGetMsgResponse getres = 5;
      case 5: {
        if (tag == 42) {
         parse_getres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_msgnotify;
        break;
      }

      // optional .qihoo.protocol.privatechat.PChatNewMsgNotify msgnotify = 100;
      case 100: {
        if (tag == 802) {
         parse_msgnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatResponse)
  return false;
#undef DO_
}

void PChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatResponse)
  // required int32 payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->payload(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional .qihoo.protocol.privatechat.PChatSendMsgResponse sendres = 4;
  if (has_sendres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sendres(), output);
  }

  // optional .qihoo.protocol.privatechat.PChatGetMsgResponse getres = 5;
  if (has_getres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->getres(), output);
  }

  // optional .qihoo.protocol.privatechat.PChatNewMsgNotify msgnotify = 100;
  if (has_msgnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->msgnotify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatResponse)
}

::google::protobuf::uint8* PChatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatResponse)
  // required int32 payload = 1;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->payload(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // optional .qihoo.protocol.privatechat.PChatSendMsgResponse sendres = 4;
  if (has_sendres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sendres(), target);
  }

  // optional .qihoo.protocol.privatechat.PChatGetMsgResponse getres = 5;
  if (has_getres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->getres(), target);
  }

  // optional .qihoo.protocol.privatechat.PChatNewMsgNotify msgnotify = 100;
  if (has_msgnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->msgnotify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatResponse)
  return target;
}

int PChatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payload());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .qihoo.protocol.privatechat.PChatSendMsgResponse sendres = 4;
    if (has_sendres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendres());
    }

    // optional .qihoo.protocol.privatechat.PChatGetMsgResponse getres = 5;
    if (has_getres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getres());
    }

    // optional .qihoo.protocol.privatechat.PChatNewMsgNotify msgnotify = 100;
    if (has_msgnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgnotify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatResponse::MergeFrom(const PChatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_sendres()) {
      mutable_sendres()->::qihoo::protocol::privatechat::PChatSendMsgResponse::MergeFrom(from.sendres());
    }
    if (from.has_getres()) {
      mutable_getres()->::qihoo::protocol::privatechat::PChatGetMsgResponse::MergeFrom(from.getres());
    }
    if (from.has_msgnotify()) {
      mutable_msgnotify()->::qihoo::protocol::privatechat::PChatNewMsgNotify::MergeFrom(from.msgnotify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatResponse::CopyFrom(const PChatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sendres()) {
    if (!this->sendres().IsInitialized()) return false;
  }
  if (has_getres()) {
    if (!this->getres().IsInitialized()) return false;
  }
  if (has_msgnotify()) {
    if (!this->msgnotify().IsInitialized()) return false;
  }
  return true;
}

void PChatResponse::Swap(PChatResponse* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(result_, other->result_);
    std::swap(reason_, other->reason_);
    std::swap(sendres_, other->sendres_);
    std::swap(getres_, other->getres_);
    std::swap(msgnotify_, other->msgnotify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatResponse_descriptor_;
  metadata.reflection = PChatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PChatPacket::kRequestFieldNumber;
const int PChatPacket::kResponseFieldNumber;
const int PChatPacket::kUuidFieldNumber;
#endif  // !_MSC_VER

PChatPacket::PChatPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.privatechat.PChatPacket)
}

void PChatPacket::InitAsDefaultInstance() {
  request_ = const_cast< ::qihoo::protocol::privatechat::PChatRequest*>(&::qihoo::protocol::privatechat::PChatRequest::default_instance());
  response_ = const_cast< ::qihoo::protocol::privatechat::PChatResponse*>(&::qihoo::protocol::privatechat::PChatResponse::default_instance());
}

PChatPacket::PChatPacket(const PChatPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.privatechat.PChatPacket)
}

void PChatPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PChatPacket::~PChatPacket() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.privatechat.PChatPacket)
  SharedDtor();
}

void PChatPacket::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void PChatPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PChatPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PChatPacket_descriptor_;
}

const PChatPacket& PChatPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privatechat_2eproto();
  return *default_instance_;
}

PChatPacket* PChatPacket::default_instance_ = NULL;

PChatPacket* PChatPacket::New() const {
  return new PChatPacket;
}

void PChatPacket::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_request()) {
      if (request_ != NULL) request_->::qihoo::protocol::privatechat::PChatRequest::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::qihoo::protocol::privatechat::PChatResponse::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PChatPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.privatechat.PChatPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.privatechat.PChatRequest request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .qihoo.protocol.privatechat.PChatResponse response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional string uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.privatechat.PChatPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.privatechat.PChatPacket)
  return false;
#undef DO_
}

void PChatPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.privatechat.PChatPacket)
  // optional .qihoo.protocol.privatechat.PChatRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .qihoo.protocol.privatechat.PChatResponse response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  // optional string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.privatechat.PChatPacket)
}

::google::protobuf::uint8* PChatPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.privatechat.PChatPacket)
  // optional .qihoo.protocol.privatechat.PChatRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .qihoo.protocol.privatechat.PChatResponse response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  // optional string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.privatechat.PChatPacket)
  return target;
}

int PChatPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.privatechat.PChatRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .qihoo.protocol.privatechat.PChatResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional string uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PChatPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PChatPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PChatPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PChatPacket::MergeFrom(const PChatPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::qihoo::protocol::privatechat::PChatRequest::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::qihoo::protocol::privatechat::PChatResponse::MergeFrom(from.response());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PChatPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChatPacket::CopyFrom(const PChatPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChatPacket::IsInitialized() const {

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  return true;
}

void PChatPacket::Swap(PChatPacket* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PChatPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PChatPacket_descriptor_;
  metadata.reflection = PChatPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace privatechat
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
