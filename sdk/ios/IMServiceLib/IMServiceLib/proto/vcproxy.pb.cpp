// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vcproxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vcproxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace vcproxy {

namespace {

const ::google::protobuf::Descriptor* CRPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewChannelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewChannelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* VCProxyUserToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VCProxyUserToServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* VCProxyServerToUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VCProxyServerToUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* VCProxyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VCProxyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* VCProxyPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VCProxyPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vcproxy_2eproto() {
  protobuf_AddDesc_vcproxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vcproxy.proto");
  GOOGLE_CHECK(file != NULL);
  CRPair_descriptor_ = file->message_type(0);
  static const int CRPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, value_),
  };
  CRPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRPair_descriptor_,
      CRPair::default_instance_,
      CRPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRPair));
  ErrorInfo_descriptor_ = file->message_type(1);
  static const int ErrorInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, error_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, error_desc_),
  };
  ErrorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorInfo_descriptor_,
      ErrorInfo::default_instance_,
      ErrorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorInfo));
  user_info_descriptor_ = file->message_type(2);
  static const int user_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, net_type_),
  };
  user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_descriptor_,
      user_info::default_instance_,
      user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info));
  CreateChannelRequest_descriptor_ = file->message_type(3);
  static const int CreateChannelRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, requester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, member_list_),
  };
  CreateChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChannelRequest_descriptor_,
      CreateChannelRequest::default_instance_,
      CreateChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChannelRequest));
  CreateChannelResponse_descriptor_ = file->message_type(4);
  static const int CreateChannelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, channel_info_),
  };
  CreateChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChannelResponse_descriptor_,
      CreateChannelResponse::default_instance_,
      CreateChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChannelResponse));
  CheckChannelRequest_descriptor_ = file->message_type(5);
  static const int CheckChannelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelRequest, requester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelRequest, channel_id_),
  };
  CheckChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChannelRequest_descriptor_,
      CheckChannelRequest::default_instance_,
      CheckChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChannelRequest));
  CheckChannelResponse_descriptor_ = file->message_type(6);
  static const int CheckChannelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelResponse, curr_member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelResponse, curr_member_list_),
  };
  CheckChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChannelResponse_descriptor_,
      CheckChannelResponse::default_instance_,
      CheckChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChannelResponse));
  RestoreChannelRequest_descriptor_ = file->message_type(7);
  static const int RestoreChannelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelRequest, requester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelRequest, channel_id_),
  };
  RestoreChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreChannelRequest_descriptor_,
      RestoreChannelRequest::default_instance_,
      RestoreChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreChannelRequest));
  RestoreChannelResponse_descriptor_ = file->message_type(8);
  static const int RestoreChannelResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelResponse, new_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelResponse, new_channel_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelResponse, curr_member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelResponse, curr_member_list_),
  };
  RestoreChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreChannelResponse_descriptor_,
      RestoreChannelResponse::default_instance_,
      RestoreChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreChannelResponse));
  NewChannelNotify_descriptor_ = file->message_type(9);
  static const int NewChannelNotify_offsets_[1] = {
  };
  NewChannelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewChannelNotify_descriptor_,
      NewChannelNotify::default_instance_,
      NewChannelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewChannelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewChannelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewChannelNotify));
  VCProxyUserToServer_descriptor_ = file->message_type(10);
  static const int VCProxyUserToServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyUserToServer, create_channel_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyUserToServer, check_channel_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyUserToServer, restore_channel_req_),
  };
  VCProxyUserToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VCProxyUserToServer_descriptor_,
      VCProxyUserToServer::default_instance_,
      VCProxyUserToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyUserToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyUserToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VCProxyUserToServer));
  VCProxyServerToUser_descriptor_ = file->message_type(11);
  static const int VCProxyServerToUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, error_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, create_channel_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, check_channel_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, restore_channel_resp_),
  };
  VCProxyServerToUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VCProxyServerToUser_descriptor_,
      VCProxyServerToUser::default_instance_,
      VCProxyServerToUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyServerToUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VCProxyServerToUser));
  VCProxyNotify_descriptor_ = file->message_type(12);
  static const int VCProxyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyNotify, new_channel_notify_),
  };
  VCProxyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VCProxyNotify_descriptor_,
      VCProxyNotify::default_instance_,
      VCProxyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VCProxyNotify));
  VCProxyPacket_descriptor_ = file->message_type(13);
  static const int VCProxyPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyPacket, payload_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyPacket, user_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyPacket, server_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyPacket, notify_data_),
  };
  VCProxyPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VCProxyPacket_descriptor_,
      VCProxyPacket::default_instance_,
      VCProxyPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VCProxyPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VCProxyPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vcproxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRPair_descriptor_, &CRPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorInfo_descriptor_, &ErrorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_descriptor_, &user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChannelRequest_descriptor_, &CreateChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChannelResponse_descriptor_, &CreateChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChannelRequest_descriptor_, &CheckChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChannelResponse_descriptor_, &CheckChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreChannelRequest_descriptor_, &RestoreChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreChannelResponse_descriptor_, &RestoreChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewChannelNotify_descriptor_, &NewChannelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VCProxyUserToServer_descriptor_, &VCProxyUserToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VCProxyServerToUser_descriptor_, &VCProxyServerToUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VCProxyNotify_descriptor_, &VCProxyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VCProxyPacket_descriptor_, &VCProxyPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vcproxy_2eproto() {
  delete CRPair::default_instance_;
  delete CRPair_reflection_;
  delete ErrorInfo::default_instance_;
  delete ErrorInfo_reflection_;
  delete user_info::default_instance_;
  delete user_info_reflection_;
  delete CreateChannelRequest::default_instance_;
  delete CreateChannelRequest_reflection_;
  delete CreateChannelResponse::default_instance_;
  delete CreateChannelResponse_reflection_;
  delete CheckChannelRequest::default_instance_;
  delete CheckChannelRequest_reflection_;
  delete CheckChannelResponse::default_instance_;
  delete CheckChannelResponse_reflection_;
  delete RestoreChannelRequest::default_instance_;
  delete RestoreChannelRequest_reflection_;
  delete RestoreChannelResponse::default_instance_;
  delete RestoreChannelResponse_reflection_;
  delete NewChannelNotify::default_instance_;
  delete NewChannelNotify_reflection_;
  delete VCProxyUserToServer::default_instance_;
  delete VCProxyUserToServer_reflection_;
  delete VCProxyServerToUser::default_instance_;
  delete VCProxyServerToUser_reflection_;
  delete VCProxyNotify::default_instance_;
  delete VCProxyNotify_reflection_;
  delete VCProxyPacket::default_instance_;
  delete VCProxyPacket_reflection_;
}

void protobuf_AddDesc_vcproxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rvcproxy.proto\022\026qihoo.protocol.vcproxy\""
    "$\n\006CRPair\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001(\014\"1\n"
    "\tErrorInfo\022\020\n\010error_no\030\001 \002(\005\022\022\n\nerror_de"
    "sc\030\002 \001(\t\"Z\n\tuser_info\022\017\n\007user_id\030\001 \002(\t\022\026"
    "\n\013operator_id\030\002 \001(\r:\0010\022\022\n\007area_id\030\003 \001(\r:"
    "\0010\022\020\n\010net_type\030\004 \001(\r\"\237\001\n\024CreateChannelRe"
    "quest\022\021\n\trequester\030\001 \002(\t\022\026\n\013operator_id\030"
    "\002 \001(\r:\0010\022\022\n\007area_id\030\003 \001(\r:\0010\022\020\n\010net_type"
    "\030\004 \001(\r\0226\n\013member_list\030\005 \003(\0132!.qihoo.prot"
    "ocol.vcproxy.user_info\"A\n\025CreateChannelR"
    "esponse\022\022\n\nchannel_id\030\001 \002(\014\022\024\n\014channel_i"
    "nfo\030\002 \002(\014\"<\n\023CheckChannelRequest\022\021\n\trequ"
    "ester\030\001 \002(\t\022\022\n\nchannel_id\030\002 \002(\014\"I\n\024Check"
    "ChannelResponse\022\027\n\017curr_member_num\030\001 \002(\005"
    "\022\030\n\020curr_member_list\030\002 \003(\t\">\n\025RestoreCha"
    "nnelRequest\022\021\n\trequester\030\001 \002(\t\022\022\n\nchanne"
    "l_id\030\002 \002(\014\"}\n\026RestoreChannelResponse\022\026\n\016"
    "new_channel_id\030\001 \002(\014\022\030\n\020new_channel_info"
    "\030\002 \002(\014\022\027\n\017curr_member_num\030\003 \001(\r\022\030\n\020curr_"
    "member_list\030\004 \003(\t\"\022\n\020NewChannelNotify\"\363\001"
    "\n\023VCProxyUserToServer\022H\n\022create_channel_"
    "req\030\001 \001(\0132,.qihoo.protocol.vcproxy.Creat"
    "eChannelRequest\022F\n\021check_channel_req\030\002 \001"
    "(\0132+.qihoo.protocol.vcproxy.CheckChannel"
    "Request\022J\n\023restore_channel_req\030\003 \001(\0132-.q"
    "ihoo.protocol.vcproxy.RestoreChannelRequ"
    "est\"\300\002\n\023VCProxyServerToUser\022\016\n\006result\030\001 "
    "\002(\005\0225\n\nerror_info\030\002 \001(\0132!.qihoo.protocol"
    ".vcproxy.ErrorInfo\022J\n\023create_channel_res"
    "p\030\003 \001(\0132-.qihoo.protocol.vcproxy.CreateC"
    "hannelResponse\022H\n\022check_channel_resp\030\004 \001"
    "(\0132,.qihoo.protocol.vcproxy.CheckChannel"
    "Response\022L\n\024restore_channel_resp\030\005 \001(\0132."
    ".qihoo.protocol.vcproxy.RestoreChannelRe"
    "sponse\"U\n\rVCProxyNotify\022D\n\022new_channel_n"
    "otify\030\001 \001(\0132(.qihoo.protocol.vcproxy.New"
    "ChannelNotify\"\343\001\n\rVCProxyPacket\022\024\n\014paylo"
    "ad_type\030\001 \002(\r\022>\n\tuser_data\030\002 \001(\0132+.qihoo"
    ".protocol.vcproxy.VCProxyUserToServer\022@\n"
    "\013server_data\030\003 \001(\0132+.qihoo.protocol.vcpr"
    "oxy.VCProxyServerToUser\022:\n\013notify_data\030\004"
    " \001(\0132%.qihoo.protocol.vcproxy.VCProxyNot"
    "ifyB,\n\032com.comm.protobuf.messagesB\016Voice"
    "CallProxy", 1729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vcproxy.proto", &protobuf_RegisterTypes);
  CRPair::default_instance_ = new CRPair();
  ErrorInfo::default_instance_ = new ErrorInfo();
  user_info::default_instance_ = new user_info();
  CreateChannelRequest::default_instance_ = new CreateChannelRequest();
  CreateChannelResponse::default_instance_ = new CreateChannelResponse();
  CheckChannelRequest::default_instance_ = new CheckChannelRequest();
  CheckChannelResponse::default_instance_ = new CheckChannelResponse();
  RestoreChannelRequest::default_instance_ = new RestoreChannelRequest();
  RestoreChannelResponse::default_instance_ = new RestoreChannelResponse();
  NewChannelNotify::default_instance_ = new NewChannelNotify();
  VCProxyUserToServer::default_instance_ = new VCProxyUserToServer();
  VCProxyServerToUser::default_instance_ = new VCProxyServerToUser();
  VCProxyNotify::default_instance_ = new VCProxyNotify();
  VCProxyPacket::default_instance_ = new VCProxyPacket();
  CRPair::default_instance_->InitAsDefaultInstance();
  ErrorInfo::default_instance_->InitAsDefaultInstance();
  user_info::default_instance_->InitAsDefaultInstance();
  CreateChannelRequest::default_instance_->InitAsDefaultInstance();
  CreateChannelResponse::default_instance_->InitAsDefaultInstance();
  CheckChannelRequest::default_instance_->InitAsDefaultInstance();
  CheckChannelResponse::default_instance_->InitAsDefaultInstance();
  RestoreChannelRequest::default_instance_->InitAsDefaultInstance();
  RestoreChannelResponse::default_instance_->InitAsDefaultInstance();
  NewChannelNotify::default_instance_->InitAsDefaultInstance();
  VCProxyUserToServer::default_instance_->InitAsDefaultInstance();
  VCProxyServerToUser::default_instance_->InitAsDefaultInstance();
  VCProxyNotify::default_instance_->InitAsDefaultInstance();
  VCProxyPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vcproxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vcproxy_2eproto {
  StaticDescriptorInitializer_vcproxy_2eproto() {
    protobuf_AddDesc_vcproxy_2eproto();
  }
} static_descriptor_initializer_vcproxy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CRPair::kKeyFieldNumber;
const int CRPair::kValueFieldNumber;
#endif  // !_MSC_VER

CRPair::CRPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.CRPair)
}

void CRPair::InitAsDefaultInstance() {
}

CRPair::CRPair(const CRPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.CRPair)
}

void CRPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRPair::~CRPair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.CRPair)
  SharedDtor();
}

void CRPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CRPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRPair_descriptor_;
}

const CRPair& CRPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

CRPair* CRPair::default_instance_ = NULL;

CRPair* CRPair::New() const {
  return new CRPair;
}

void CRPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.CRPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.CRPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.CRPair)
  return false;
#undef DO_
}

void CRPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.CRPair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.CRPair)
}

::google::protobuf::uint8* CRPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.CRPair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.CRPair)
  return target;
}

int CRPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRPair::MergeFrom(const CRPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRPair::CopyFrom(const CRPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CRPair::Swap(CRPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRPair_descriptor_;
  metadata.reflection = CRPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorInfo::kErrorNoFieldNumber;
const int ErrorInfo::kErrorDescFieldNumber;
#endif  // !_MSC_VER

ErrorInfo::ErrorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.ErrorInfo)
}

void ErrorInfo::InitAsDefaultInstance() {
}

ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.ErrorInfo)
}

void ErrorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_no_ = 0;
  error_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.ErrorInfo)
  SharedDtor();
}

void ErrorInfo::SharedDtor() {
  if (error_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_desc_;
  }
  if (this != default_instance_) {
  }
}

void ErrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorInfo_descriptor_;
}

const ErrorInfo& ErrorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

ErrorInfo* ErrorInfo::default_instance_ = NULL;

ErrorInfo* ErrorInfo::New() const {
  return new ErrorInfo;
}

void ErrorInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_no_ = 0;
    if (has_error_desc()) {
      if (error_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.ErrorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_no_)));
          set_has_error_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.ErrorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.ErrorInfo)
  return false;
#undef DO_
}

void ErrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.ErrorInfo)
  // required int32 error_no = 1;
  if (has_error_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_no(), output);
  }

  // optional string error_desc = 2;
  if (has_error_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.ErrorInfo)
}

::google::protobuf::uint8* ErrorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.ErrorInfo)
  // required int32 error_no = 1;
  if (has_error_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_no(), target);
  }

  // optional string error_desc = 2;
  if (has_error_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.ErrorInfo)
  return target;
}

int ErrorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_no = 1;
    if (has_error_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_no());
    }

    // optional string error_desc = 2;
    if (has_error_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorInfo::MergeFrom(const ErrorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_no()) {
      set_error_no(from.error_no());
    }
    if (from.has_error_desc()) {
      set_error_desc(from.error_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorInfo::CopyFrom(const ErrorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ErrorInfo::Swap(ErrorInfo* other) {
  if (other != this) {
    std::swap(error_no_, other->error_no_);
    std::swap(error_desc_, other->error_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorInfo_descriptor_;
  metadata.reflection = ErrorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_info::kUserIdFieldNumber;
const int user_info::kOperatorIdFieldNumber;
const int user_info::kAreaIdFieldNumber;
const int user_info::kNetTypeFieldNumber;
#endif  // !_MSC_VER

user_info::user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.user_info)
}

void user_info::InitAsDefaultInstance() {
}

user_info::user_info(const user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.user_info)
}

void user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator_id_ = 0u;
  area_id_ = 0u;
  net_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info::~user_info() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.user_info)
  SharedDtor();
}

void user_info::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_descriptor_;
}

const user_info& user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

user_info* user_info::default_instance_ = NULL;

user_info* user_info::New() const {
  return new user_info;
}

void user_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(operator_id_, net_type_);
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operator_id;
        break;
      }

      // optional uint32 operator_id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_operator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator_id_)));
          set_has_operator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_net_type;
        break;
      }

      // optional uint32 net_type = 4;
      case 4: {
        if (tag == 32) {
         parse_net_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_type_)));
          set_has_net_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.user_info)
  return false;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.user_info)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional uint32 operator_id = 2 [default = 0];
  if (has_operator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operator_id(), output);
  }

  // optional uint32 area_id = 3 [default = 0];
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional uint32 net_type = 4;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->net_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.user_info)
}

::google::protobuf::uint8* user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.user_info)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional uint32 operator_id = 2 [default = 0];
  if (has_operator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operator_id(), target);
  }

  // optional uint32 area_id = 3 [default = 0];
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional uint32 net_type = 4;
  if (has_net_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->net_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.user_info)
  return target;
}

int user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional uint32 operator_id = 2 [default = 0];
    if (has_operator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operator_id());
    }

    // optional uint32 area_id = 3 [default = 0];
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 net_type = 4;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_operator_id()) {
      set_operator_id(from.operator_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_info::Swap(user_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(operator_id_, other->operator_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(net_type_, other->net_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_descriptor_;
  metadata.reflection = user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChannelRequest::kRequesterFieldNumber;
const int CreateChannelRequest::kOperatorIdFieldNumber;
const int CreateChannelRequest::kAreaIdFieldNumber;
const int CreateChannelRequest::kNetTypeFieldNumber;
const int CreateChannelRequest::kMemberListFieldNumber;
#endif  // !_MSC_VER

CreateChannelRequest::CreateChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.CreateChannelRequest)
}

void CreateChannelRequest::InitAsDefaultInstance() {
}

CreateChannelRequest::CreateChannelRequest(const CreateChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.CreateChannelRequest)
}

void CreateChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requester_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator_id_ = 0u;
  area_id_ = 0u;
  net_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChannelRequest::~CreateChannelRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.CreateChannelRequest)
  SharedDtor();
}

void CreateChannelRequest::SharedDtor() {
  if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requester_;
  }
  if (this != default_instance_) {
  }
}

void CreateChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChannelRequest_descriptor_;
}

const CreateChannelRequest& CreateChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

CreateChannelRequest* CreateChannelRequest::default_instance_ = NULL;

CreateChannelRequest* CreateChannelRequest::New() const {
  return new CreateChannelRequest;
}

void CreateChannelRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateChannelRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(operator_id_, area_id_);
    if (has_requester()) {
      if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requester_->clear();
      }
    }
    net_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.CreateChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requester = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requester()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requester().data(), this->requester().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requester");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operator_id;
        break;
      }

      // optional uint32 operator_id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_operator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator_id_)));
          set_has_operator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_net_type;
        break;
      }

      // optional uint32 net_type = 4;
      case 4: {
        if (tag == 32) {
         parse_net_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_type_)));
          set_has_net_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_list;
        break;
      }

      // repeated .qihoo.protocol.vcproxy.user_info member_list = 5;
      case 5: {
        if (tag == 42) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.CreateChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.CreateChannelRequest)
  return false;
#undef DO_
}

void CreateChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.CreateChannelRequest)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requester(), output);
  }

  // optional uint32 operator_id = 2 [default = 0];
  if (has_operator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operator_id(), output);
  }

  // optional uint32 area_id = 3 [default = 0];
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional uint32 net_type = 4;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->net_type(), output);
  }

  // repeated .qihoo.protocol.vcproxy.user_info member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.CreateChannelRequest)
}

::google::protobuf::uint8* CreateChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.CreateChannelRequest)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requester(), target);
  }

  // optional uint32 operator_id = 2 [default = 0];
  if (has_operator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operator_id(), target);
  }

  // optional uint32 area_id = 3 [default = 0];
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional uint32 net_type = 4;
  if (has_net_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->net_type(), target);
  }

  // repeated .qihoo.protocol.vcproxy.user_info member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.CreateChannelRequest)
  return target;
}

int CreateChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requester = 1;
    if (has_requester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requester());
    }

    // optional uint32 operator_id = 2 [default = 0];
    if (has_operator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operator_id());
    }

    // optional uint32 area_id = 3 [default = 0];
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 net_type = 4;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_type());
    }

  }
  // repeated .qihoo.protocol.vcproxy.user_info member_list = 5;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChannelRequest::MergeFrom(const CreateChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requester()) {
      set_requester(from.requester());
    }
    if (from.has_operator_id()) {
      set_operator_id(from.operator_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelRequest::CopyFrom(const CreateChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->member_list())) return false;
  return true;
}

void CreateChannelRequest::Swap(CreateChannelRequest* other) {
  if (other != this) {
    std::swap(requester_, other->requester_);
    std::swap(operator_id_, other->operator_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(net_type_, other->net_type_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChannelRequest_descriptor_;
  metadata.reflection = CreateChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChannelResponse::kChannelIdFieldNumber;
const int CreateChannelResponse::kChannelInfoFieldNumber;
#endif  // !_MSC_VER

CreateChannelResponse::CreateChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.CreateChannelResponse)
}

void CreateChannelResponse::InitAsDefaultInstance() {
}

CreateChannelResponse::CreateChannelResponse(const CreateChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.CreateChannelResponse)
}

void CreateChannelResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChannelResponse::~CreateChannelResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.CreateChannelResponse)
  SharedDtor();
}

void CreateChannelResponse::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (channel_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_info_;
  }
  if (this != default_instance_) {
  }
}

void CreateChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChannelResponse_descriptor_;
}

const CreateChannelResponse& CreateChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

CreateChannelResponse* CreateChannelResponse::default_instance_ = NULL;

CreateChannelResponse* CreateChannelResponse::New() const {
  return new CreateChannelResponse;
}

void CreateChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_id_->clear();
      }
    }
    if (has_channel_info()) {
      if (channel_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.CreateChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes channel_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_info;
        break;
      }

      // required bytes channel_info = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.CreateChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.CreateChannelResponse)
  return false;
#undef DO_
}

void CreateChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.CreateChannelResponse)
  // required bytes channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->channel_id(), output);
  }

  // required bytes channel_info = 2;
  if (has_channel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->channel_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.CreateChannelResponse)
}

::google::protobuf::uint8* CreateChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.CreateChannelResponse)
  // required bytes channel_id = 1;
  if (has_channel_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->channel_id(), target);
  }

  // required bytes channel_info = 2;
  if (has_channel_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->channel_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.CreateChannelResponse)
  return target;
}

int CreateChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_id());
    }

    // required bytes channel_info = 2;
    if (has_channel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChannelResponse::MergeFrom(const CreateChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_channel_info()) {
      set_channel_info(from.channel_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelResponse::CopyFrom(const CreateChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateChannelResponse::Swap(CreateChannelResponse* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(channel_info_, other->channel_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChannelResponse_descriptor_;
  metadata.reflection = CreateChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckChannelRequest::kRequesterFieldNumber;
const int CheckChannelRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CheckChannelRequest::CheckChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.CheckChannelRequest)
}

void CheckChannelRequest::InitAsDefaultInstance() {
}

CheckChannelRequest::CheckChannelRequest(const CheckChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.CheckChannelRequest)
}

void CheckChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requester_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChannelRequest::~CheckChannelRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.CheckChannelRequest)
  SharedDtor();
}

void CheckChannelRequest::SharedDtor() {
  if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requester_;
  }
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (this != default_instance_) {
  }
}

void CheckChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChannelRequest_descriptor_;
}

const CheckChannelRequest& CheckChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

CheckChannelRequest* CheckChannelRequest::default_instance_ = NULL;

CheckChannelRequest* CheckChannelRequest::New() const {
  return new CheckChannelRequest;
}

void CheckChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_requester()) {
      if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requester_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.CheckChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requester = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requester()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requester().data(), this->requester().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requester");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // required bytes channel_id = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.CheckChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.CheckChannelRequest)
  return false;
#undef DO_
}

void CheckChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.CheckChannelRequest)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requester(), output);
  }

  // required bytes channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.CheckChannelRequest)
}

::google::protobuf::uint8* CheckChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.CheckChannelRequest)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requester(), target);
  }

  // required bytes channel_id = 2;
  if (has_channel_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.CheckChannelRequest)
  return target;
}

int CheckChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requester = 1;
    if (has_requester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requester());
    }

    // required bytes channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChannelRequest::MergeFrom(const CheckChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requester()) {
      set_requester(from.requester());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChannelRequest::CopyFrom(const CheckChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckChannelRequest::Swap(CheckChannelRequest* other) {
  if (other != this) {
    std::swap(requester_, other->requester_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckChannelRequest_descriptor_;
  metadata.reflection = CheckChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckChannelResponse::kCurrMemberNumFieldNumber;
const int CheckChannelResponse::kCurrMemberListFieldNumber;
#endif  // !_MSC_VER

CheckChannelResponse::CheckChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.CheckChannelResponse)
}

void CheckChannelResponse::InitAsDefaultInstance() {
}

CheckChannelResponse::CheckChannelResponse(const CheckChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.CheckChannelResponse)
}

void CheckChannelResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curr_member_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChannelResponse::~CheckChannelResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.CheckChannelResponse)
  SharedDtor();
}

void CheckChannelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChannelResponse_descriptor_;
}

const CheckChannelResponse& CheckChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

CheckChannelResponse* CheckChannelResponse::default_instance_ = NULL;

CheckChannelResponse* CheckChannelResponse::New() const {
  return new CheckChannelResponse;
}

void CheckChannelResponse::Clear() {
  curr_member_num_ = 0;
  curr_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.CheckChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 curr_member_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_member_num_)));
          set_has_curr_member_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_curr_member_list;
        break;
      }

      // repeated string curr_member_list = 2;
      case 2: {
        if (tag == 18) {
         parse_curr_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_curr_member_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curr_member_list(this->curr_member_list_size() - 1).data(),
            this->curr_member_list(this->curr_member_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curr_member_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_curr_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.CheckChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.CheckChannelResponse)
  return false;
#undef DO_
}

void CheckChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.CheckChannelResponse)
  // required int32 curr_member_num = 1;
  if (has_curr_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curr_member_num(), output);
  }

  // repeated string curr_member_list = 2;
  for (int i = 0; i < this->curr_member_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->curr_member_list(i).data(), this->curr_member_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "curr_member_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->curr_member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.CheckChannelResponse)
}

::google::protobuf::uint8* CheckChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.CheckChannelResponse)
  // required int32 curr_member_num = 1;
  if (has_curr_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curr_member_num(), target);
  }

  // repeated string curr_member_list = 2;
  for (int i = 0; i < this->curr_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curr_member_list(i).data(), this->curr_member_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curr_member_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->curr_member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.CheckChannelResponse)
  return target;
}

int CheckChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 curr_member_num = 1;
    if (has_curr_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_member_num());
    }

  }
  // repeated string curr_member_list = 2;
  total_size += 1 * this->curr_member_list_size();
  for (int i = 0; i < this->curr_member_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->curr_member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChannelResponse::MergeFrom(const CheckChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  curr_member_list_.MergeFrom(from.curr_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr_member_num()) {
      set_curr_member_num(from.curr_member_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChannelResponse::CopyFrom(const CheckChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckChannelResponse::Swap(CheckChannelResponse* other) {
  if (other != this) {
    std::swap(curr_member_num_, other->curr_member_num_);
    curr_member_list_.Swap(&other->curr_member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckChannelResponse_descriptor_;
  metadata.reflection = CheckChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestoreChannelRequest::kRequesterFieldNumber;
const int RestoreChannelRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

RestoreChannelRequest::RestoreChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.RestoreChannelRequest)
}

void RestoreChannelRequest::InitAsDefaultInstance() {
}

RestoreChannelRequest::RestoreChannelRequest(const RestoreChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.RestoreChannelRequest)
}

void RestoreChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requester_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreChannelRequest::~RestoreChannelRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.RestoreChannelRequest)
  SharedDtor();
}

void RestoreChannelRequest::SharedDtor() {
  if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requester_;
  }
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (this != default_instance_) {
  }
}

void RestoreChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreChannelRequest_descriptor_;
}

const RestoreChannelRequest& RestoreChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

RestoreChannelRequest* RestoreChannelRequest::default_instance_ = NULL;

RestoreChannelRequest* RestoreChannelRequest::New() const {
  return new RestoreChannelRequest;
}

void RestoreChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_requester()) {
      if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requester_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.RestoreChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requester = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requester()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requester().data(), this->requester().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requester");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // required bytes channel_id = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.RestoreChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.RestoreChannelRequest)
  return false;
#undef DO_
}

void RestoreChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.RestoreChannelRequest)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requester(), output);
  }

  // required bytes channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.RestoreChannelRequest)
}

::google::protobuf::uint8* RestoreChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.RestoreChannelRequest)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requester(), target);
  }

  // required bytes channel_id = 2;
  if (has_channel_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.RestoreChannelRequest)
  return target;
}

int RestoreChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requester = 1;
    if (has_requester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requester());
    }

    // required bytes channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreChannelRequest::MergeFrom(const RestoreChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requester()) {
      set_requester(from.requester());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreChannelRequest::CopyFrom(const RestoreChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RestoreChannelRequest::Swap(RestoreChannelRequest* other) {
  if (other != this) {
    std::swap(requester_, other->requester_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreChannelRequest_descriptor_;
  metadata.reflection = RestoreChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestoreChannelResponse::kNewChannelIdFieldNumber;
const int RestoreChannelResponse::kNewChannelInfoFieldNumber;
const int RestoreChannelResponse::kCurrMemberNumFieldNumber;
const int RestoreChannelResponse::kCurrMemberListFieldNumber;
#endif  // !_MSC_VER

RestoreChannelResponse::RestoreChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.RestoreChannelResponse)
}

void RestoreChannelResponse::InitAsDefaultInstance() {
}

RestoreChannelResponse::RestoreChannelResponse(const RestoreChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.RestoreChannelResponse)
}

void RestoreChannelResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  new_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_channel_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curr_member_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreChannelResponse::~RestoreChannelResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.RestoreChannelResponse)
  SharedDtor();
}

void RestoreChannelResponse::SharedDtor() {
  if (new_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_channel_id_;
  }
  if (new_channel_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_channel_info_;
  }
  if (this != default_instance_) {
  }
}

void RestoreChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreChannelResponse_descriptor_;
}

const RestoreChannelResponse& RestoreChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

RestoreChannelResponse* RestoreChannelResponse::default_instance_ = NULL;

RestoreChannelResponse* RestoreChannelResponse::New() const {
  return new RestoreChannelResponse;
}

void RestoreChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_new_channel_id()) {
      if (new_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_channel_id_->clear();
      }
    }
    if (has_new_channel_info()) {
      if (new_channel_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_channel_info_->clear();
      }
    }
    curr_member_num_ = 0u;
  }
  curr_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.RestoreChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes new_channel_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_channel_info;
        break;
      }

      // required bytes new_channel_info = 2;
      case 2: {
        if (tag == 18) {
         parse_new_channel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_channel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_member_num;
        break;
      }

      // optional uint32 curr_member_num = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_member_num_)));
          set_has_curr_member_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_curr_member_list;
        break;
      }

      // repeated string curr_member_list = 4;
      case 4: {
        if (tag == 34) {
         parse_curr_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_curr_member_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curr_member_list(this->curr_member_list_size() - 1).data(),
            this->curr_member_list(this->curr_member_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curr_member_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_curr_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.RestoreChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.RestoreChannelResponse)
  return false;
#undef DO_
}

void RestoreChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.RestoreChannelResponse)
  // required bytes new_channel_id = 1;
  if (has_new_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->new_channel_id(), output);
  }

  // required bytes new_channel_info = 2;
  if (has_new_channel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->new_channel_info(), output);
  }

  // optional uint32 curr_member_num = 3;
  if (has_curr_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curr_member_num(), output);
  }

  // repeated string curr_member_list = 4;
  for (int i = 0; i < this->curr_member_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->curr_member_list(i).data(), this->curr_member_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "curr_member_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->curr_member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.RestoreChannelResponse)
}

::google::protobuf::uint8* RestoreChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.RestoreChannelResponse)
  // required bytes new_channel_id = 1;
  if (has_new_channel_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->new_channel_id(), target);
  }

  // required bytes new_channel_info = 2;
  if (has_new_channel_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->new_channel_info(), target);
  }

  // optional uint32 curr_member_num = 3;
  if (has_curr_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curr_member_num(), target);
  }

  // repeated string curr_member_list = 4;
  for (int i = 0; i < this->curr_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curr_member_list(i).data(), this->curr_member_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curr_member_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->curr_member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.RestoreChannelResponse)
  return target;
}

int RestoreChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes new_channel_id = 1;
    if (has_new_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_channel_id());
    }

    // required bytes new_channel_info = 2;
    if (has_new_channel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_channel_info());
    }

    // optional uint32 curr_member_num = 3;
    if (has_curr_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_member_num());
    }

  }
  // repeated string curr_member_list = 4;
  total_size += 1 * this->curr_member_list_size();
  for (int i = 0; i < this->curr_member_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->curr_member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreChannelResponse::MergeFrom(const RestoreChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  curr_member_list_.MergeFrom(from.curr_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_channel_id()) {
      set_new_channel_id(from.new_channel_id());
    }
    if (from.has_new_channel_info()) {
      set_new_channel_info(from.new_channel_info());
    }
    if (from.has_curr_member_num()) {
      set_curr_member_num(from.curr_member_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreChannelResponse::CopyFrom(const RestoreChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RestoreChannelResponse::Swap(RestoreChannelResponse* other) {
  if (other != this) {
    std::swap(new_channel_id_, other->new_channel_id_);
    std::swap(new_channel_info_, other->new_channel_info_);
    std::swap(curr_member_num_, other->curr_member_num_);
    curr_member_list_.Swap(&other->curr_member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreChannelResponse_descriptor_;
  metadata.reflection = RestoreChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewChannelNotify::NewChannelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.NewChannelNotify)
}

void NewChannelNotify::InitAsDefaultInstance() {
}

NewChannelNotify::NewChannelNotify(const NewChannelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.NewChannelNotify)
}

void NewChannelNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewChannelNotify::~NewChannelNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.NewChannelNotify)
  SharedDtor();
}

void NewChannelNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewChannelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewChannelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewChannelNotify_descriptor_;
}

const NewChannelNotify& NewChannelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

NewChannelNotify* NewChannelNotify::default_instance_ = NULL;

NewChannelNotify* NewChannelNotify::New() const {
  return new NewChannelNotify;
}

void NewChannelNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewChannelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.NewChannelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.NewChannelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.NewChannelNotify)
  return false;
#undef DO_
}

void NewChannelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.NewChannelNotify)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.NewChannelNotify)
}

::google::protobuf::uint8* NewChannelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.NewChannelNotify)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.NewChannelNotify)
  return target;
}

int NewChannelNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewChannelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewChannelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewChannelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewChannelNotify::MergeFrom(const NewChannelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewChannelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewChannelNotify::CopyFrom(const NewChannelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewChannelNotify::IsInitialized() const {

  return true;
}

void NewChannelNotify::Swap(NewChannelNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewChannelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewChannelNotify_descriptor_;
  metadata.reflection = NewChannelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VCProxyUserToServer::kCreateChannelReqFieldNumber;
const int VCProxyUserToServer::kCheckChannelReqFieldNumber;
const int VCProxyUserToServer::kRestoreChannelReqFieldNumber;
#endif  // !_MSC_VER

VCProxyUserToServer::VCProxyUserToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.VCProxyUserToServer)
}

void VCProxyUserToServer::InitAsDefaultInstance() {
  create_channel_req_ = const_cast< ::qihoo::protocol::vcproxy::CreateChannelRequest*>(&::qihoo::protocol::vcproxy::CreateChannelRequest::default_instance());
  check_channel_req_ = const_cast< ::qihoo::protocol::vcproxy::CheckChannelRequest*>(&::qihoo::protocol::vcproxy::CheckChannelRequest::default_instance());
  restore_channel_req_ = const_cast< ::qihoo::protocol::vcproxy::RestoreChannelRequest*>(&::qihoo::protocol::vcproxy::RestoreChannelRequest::default_instance());
}

VCProxyUserToServer::VCProxyUserToServer(const VCProxyUserToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.VCProxyUserToServer)
}

void VCProxyUserToServer::SharedCtor() {
  _cached_size_ = 0;
  create_channel_req_ = NULL;
  check_channel_req_ = NULL;
  restore_channel_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VCProxyUserToServer::~VCProxyUserToServer() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.VCProxyUserToServer)
  SharedDtor();
}

void VCProxyUserToServer::SharedDtor() {
  if (this != default_instance_) {
    delete create_channel_req_;
    delete check_channel_req_;
    delete restore_channel_req_;
  }
}

void VCProxyUserToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VCProxyUserToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VCProxyUserToServer_descriptor_;
}

const VCProxyUserToServer& VCProxyUserToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

VCProxyUserToServer* VCProxyUserToServer::default_instance_ = NULL;

VCProxyUserToServer* VCProxyUserToServer::New() const {
  return new VCProxyUserToServer;
}

void VCProxyUserToServer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_create_channel_req()) {
      if (create_channel_req_ != NULL) create_channel_req_->::qihoo::protocol::vcproxy::CreateChannelRequest::Clear();
    }
    if (has_check_channel_req()) {
      if (check_channel_req_ != NULL) check_channel_req_->::qihoo::protocol::vcproxy::CheckChannelRequest::Clear();
    }
    if (has_restore_channel_req()) {
      if (restore_channel_req_ != NULL) restore_channel_req_->::qihoo::protocol::vcproxy::RestoreChannelRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VCProxyUserToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.VCProxyUserToServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.vcproxy.CreateChannelRequest create_channel_req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_channel_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_check_channel_req;
        break;
      }

      // optional .qihoo.protocol.vcproxy.CheckChannelRequest check_channel_req = 2;
      case 2: {
        if (tag == 18) {
         parse_check_channel_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_channel_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_restore_channel_req;
        break;
      }

      // optional .qihoo.protocol.vcproxy.RestoreChannelRequest restore_channel_req = 3;
      case 3: {
        if (tag == 26) {
         parse_restore_channel_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restore_channel_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.VCProxyUserToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.VCProxyUserToServer)
  return false;
#undef DO_
}

void VCProxyUserToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.VCProxyUserToServer)
  // optional .qihoo.protocol.vcproxy.CreateChannelRequest create_channel_req = 1;
  if (has_create_channel_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->create_channel_req(), output);
  }

  // optional .qihoo.protocol.vcproxy.CheckChannelRequest check_channel_req = 2;
  if (has_check_channel_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->check_channel_req(), output);
  }

  // optional .qihoo.protocol.vcproxy.RestoreChannelRequest restore_channel_req = 3;
  if (has_restore_channel_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->restore_channel_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.VCProxyUserToServer)
}

::google::protobuf::uint8* VCProxyUserToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.VCProxyUserToServer)
  // optional .qihoo.protocol.vcproxy.CreateChannelRequest create_channel_req = 1;
  if (has_create_channel_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->create_channel_req(), target);
  }

  // optional .qihoo.protocol.vcproxy.CheckChannelRequest check_channel_req = 2;
  if (has_check_channel_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->check_channel_req(), target);
  }

  // optional .qihoo.protocol.vcproxy.RestoreChannelRequest restore_channel_req = 3;
  if (has_restore_channel_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->restore_channel_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.VCProxyUserToServer)
  return target;
}

int VCProxyUserToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.vcproxy.CreateChannelRequest create_channel_req = 1;
    if (has_create_channel_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_channel_req());
    }

    // optional .qihoo.protocol.vcproxy.CheckChannelRequest check_channel_req = 2;
    if (has_check_channel_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_channel_req());
    }

    // optional .qihoo.protocol.vcproxy.RestoreChannelRequest restore_channel_req = 3;
    if (has_restore_channel_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->restore_channel_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VCProxyUserToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VCProxyUserToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VCProxyUserToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VCProxyUserToServer::MergeFrom(const VCProxyUserToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_channel_req()) {
      mutable_create_channel_req()->::qihoo::protocol::vcproxy::CreateChannelRequest::MergeFrom(from.create_channel_req());
    }
    if (from.has_check_channel_req()) {
      mutable_check_channel_req()->::qihoo::protocol::vcproxy::CheckChannelRequest::MergeFrom(from.check_channel_req());
    }
    if (from.has_restore_channel_req()) {
      mutable_restore_channel_req()->::qihoo::protocol::vcproxy::RestoreChannelRequest::MergeFrom(from.restore_channel_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VCProxyUserToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCProxyUserToServer::CopyFrom(const VCProxyUserToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCProxyUserToServer::IsInitialized() const {

  if (has_create_channel_req()) {
    if (!this->create_channel_req().IsInitialized()) return false;
  }
  if (has_check_channel_req()) {
    if (!this->check_channel_req().IsInitialized()) return false;
  }
  if (has_restore_channel_req()) {
    if (!this->restore_channel_req().IsInitialized()) return false;
  }
  return true;
}

void VCProxyUserToServer::Swap(VCProxyUserToServer* other) {
  if (other != this) {
    std::swap(create_channel_req_, other->create_channel_req_);
    std::swap(check_channel_req_, other->check_channel_req_);
    std::swap(restore_channel_req_, other->restore_channel_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VCProxyUserToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VCProxyUserToServer_descriptor_;
  metadata.reflection = VCProxyUserToServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VCProxyServerToUser::kResultFieldNumber;
const int VCProxyServerToUser::kErrorInfoFieldNumber;
const int VCProxyServerToUser::kCreateChannelRespFieldNumber;
const int VCProxyServerToUser::kCheckChannelRespFieldNumber;
const int VCProxyServerToUser::kRestoreChannelRespFieldNumber;
#endif  // !_MSC_VER

VCProxyServerToUser::VCProxyServerToUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.VCProxyServerToUser)
}

void VCProxyServerToUser::InitAsDefaultInstance() {
  error_info_ = const_cast< ::qihoo::protocol::vcproxy::ErrorInfo*>(&::qihoo::protocol::vcproxy::ErrorInfo::default_instance());
  create_channel_resp_ = const_cast< ::qihoo::protocol::vcproxy::CreateChannelResponse*>(&::qihoo::protocol::vcproxy::CreateChannelResponse::default_instance());
  check_channel_resp_ = const_cast< ::qihoo::protocol::vcproxy::CheckChannelResponse*>(&::qihoo::protocol::vcproxy::CheckChannelResponse::default_instance());
  restore_channel_resp_ = const_cast< ::qihoo::protocol::vcproxy::RestoreChannelResponse*>(&::qihoo::protocol::vcproxy::RestoreChannelResponse::default_instance());
}

VCProxyServerToUser::VCProxyServerToUser(const VCProxyServerToUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.VCProxyServerToUser)
}

void VCProxyServerToUser::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  error_info_ = NULL;
  create_channel_resp_ = NULL;
  check_channel_resp_ = NULL;
  restore_channel_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VCProxyServerToUser::~VCProxyServerToUser() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.VCProxyServerToUser)
  SharedDtor();
}

void VCProxyServerToUser::SharedDtor() {
  if (this != default_instance_) {
    delete error_info_;
    delete create_channel_resp_;
    delete check_channel_resp_;
    delete restore_channel_resp_;
  }
}

void VCProxyServerToUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VCProxyServerToUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VCProxyServerToUser_descriptor_;
}

const VCProxyServerToUser& VCProxyServerToUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

VCProxyServerToUser* VCProxyServerToUser::default_instance_ = NULL;

VCProxyServerToUser* VCProxyServerToUser::New() const {
  return new VCProxyServerToUser;
}

void VCProxyServerToUser::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    result_ = 0;
    if (has_error_info()) {
      if (error_info_ != NULL) error_info_->::qihoo::protocol::vcproxy::ErrorInfo::Clear();
    }
    if (has_create_channel_resp()) {
      if (create_channel_resp_ != NULL) create_channel_resp_->::qihoo::protocol::vcproxy::CreateChannelResponse::Clear();
    }
    if (has_check_channel_resp()) {
      if (check_channel_resp_ != NULL) check_channel_resp_->::qihoo::protocol::vcproxy::CheckChannelResponse::Clear();
    }
    if (has_restore_channel_resp()) {
      if (restore_channel_resp_ != NULL) restore_channel_resp_->::qihoo::protocol::vcproxy::RestoreChannelResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VCProxyServerToUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.VCProxyServerToUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_info;
        break;
      }

      // optional .qihoo.protocol.vcproxy.ErrorInfo error_info = 2;
      case 2: {
        if (tag == 18) {
         parse_error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_channel_resp;
        break;
      }

      // optional .qihoo.protocol.vcproxy.CreateChannelResponse create_channel_resp = 3;
      case 3: {
        if (tag == 26) {
         parse_create_channel_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_channel_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_check_channel_resp;
        break;
      }

      // optional .qihoo.protocol.vcproxy.CheckChannelResponse check_channel_resp = 4;
      case 4: {
        if (tag == 34) {
         parse_check_channel_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_channel_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_restore_channel_resp;
        break;
      }

      // optional .qihoo.protocol.vcproxy.RestoreChannelResponse restore_channel_resp = 5;
      case 5: {
        if (tag == 42) {
         parse_restore_channel_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restore_channel_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.VCProxyServerToUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.VCProxyServerToUser)
  return false;
#undef DO_
}

void VCProxyServerToUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.VCProxyServerToUser)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .qihoo.protocol.vcproxy.ErrorInfo error_info = 2;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error_info(), output);
  }

  // optional .qihoo.protocol.vcproxy.CreateChannelResponse create_channel_resp = 3;
  if (has_create_channel_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->create_channel_resp(), output);
  }

  // optional .qihoo.protocol.vcproxy.CheckChannelResponse check_channel_resp = 4;
  if (has_check_channel_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->check_channel_resp(), output);
  }

  // optional .qihoo.protocol.vcproxy.RestoreChannelResponse restore_channel_resp = 5;
  if (has_restore_channel_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->restore_channel_resp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.VCProxyServerToUser)
}

::google::protobuf::uint8* VCProxyServerToUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.VCProxyServerToUser)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .qihoo.protocol.vcproxy.ErrorInfo error_info = 2;
  if (has_error_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error_info(), target);
  }

  // optional .qihoo.protocol.vcproxy.CreateChannelResponse create_channel_resp = 3;
  if (has_create_channel_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->create_channel_resp(), target);
  }

  // optional .qihoo.protocol.vcproxy.CheckChannelResponse check_channel_resp = 4;
  if (has_check_channel_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->check_channel_resp(), target);
  }

  // optional .qihoo.protocol.vcproxy.RestoreChannelResponse restore_channel_resp = 5;
  if (has_restore_channel_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->restore_channel_resp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.VCProxyServerToUser)
  return target;
}

int VCProxyServerToUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .qihoo.protocol.vcproxy.ErrorInfo error_info = 2;
    if (has_error_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error_info());
    }

    // optional .qihoo.protocol.vcproxy.CreateChannelResponse create_channel_resp = 3;
    if (has_create_channel_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_channel_resp());
    }

    // optional .qihoo.protocol.vcproxy.CheckChannelResponse check_channel_resp = 4;
    if (has_check_channel_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_channel_resp());
    }

    // optional .qihoo.protocol.vcproxy.RestoreChannelResponse restore_channel_resp = 5;
    if (has_restore_channel_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->restore_channel_resp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VCProxyServerToUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VCProxyServerToUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VCProxyServerToUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VCProxyServerToUser::MergeFrom(const VCProxyServerToUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_info()) {
      mutable_error_info()->::qihoo::protocol::vcproxy::ErrorInfo::MergeFrom(from.error_info());
    }
    if (from.has_create_channel_resp()) {
      mutable_create_channel_resp()->::qihoo::protocol::vcproxy::CreateChannelResponse::MergeFrom(from.create_channel_resp());
    }
    if (from.has_check_channel_resp()) {
      mutable_check_channel_resp()->::qihoo::protocol::vcproxy::CheckChannelResponse::MergeFrom(from.check_channel_resp());
    }
    if (from.has_restore_channel_resp()) {
      mutable_restore_channel_resp()->::qihoo::protocol::vcproxy::RestoreChannelResponse::MergeFrom(from.restore_channel_resp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VCProxyServerToUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCProxyServerToUser::CopyFrom(const VCProxyServerToUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCProxyServerToUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_error_info()) {
    if (!this->error_info().IsInitialized()) return false;
  }
  if (has_create_channel_resp()) {
    if (!this->create_channel_resp().IsInitialized()) return false;
  }
  if (has_check_channel_resp()) {
    if (!this->check_channel_resp().IsInitialized()) return false;
  }
  if (has_restore_channel_resp()) {
    if (!this->restore_channel_resp().IsInitialized()) return false;
  }
  return true;
}

void VCProxyServerToUser::Swap(VCProxyServerToUser* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_info_, other->error_info_);
    std::swap(create_channel_resp_, other->create_channel_resp_);
    std::swap(check_channel_resp_, other->check_channel_resp_);
    std::swap(restore_channel_resp_, other->restore_channel_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VCProxyServerToUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VCProxyServerToUser_descriptor_;
  metadata.reflection = VCProxyServerToUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VCProxyNotify::kNewChannelNotifyFieldNumber;
#endif  // !_MSC_VER

VCProxyNotify::VCProxyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.VCProxyNotify)
}

void VCProxyNotify::InitAsDefaultInstance() {
  new_channel_notify_ = const_cast< ::qihoo::protocol::vcproxy::NewChannelNotify*>(&::qihoo::protocol::vcproxy::NewChannelNotify::default_instance());
}

VCProxyNotify::VCProxyNotify(const VCProxyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.VCProxyNotify)
}

void VCProxyNotify::SharedCtor() {
  _cached_size_ = 0;
  new_channel_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VCProxyNotify::~VCProxyNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.VCProxyNotify)
  SharedDtor();
}

void VCProxyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete new_channel_notify_;
  }
}

void VCProxyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VCProxyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VCProxyNotify_descriptor_;
}

const VCProxyNotify& VCProxyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

VCProxyNotify* VCProxyNotify::default_instance_ = NULL;

VCProxyNotify* VCProxyNotify::New() const {
  return new VCProxyNotify;
}

void VCProxyNotify::Clear() {
  if (has_new_channel_notify()) {
    if (new_channel_notify_ != NULL) new_channel_notify_->::qihoo::protocol::vcproxy::NewChannelNotify::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VCProxyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.VCProxyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.vcproxy.NewChannelNotify new_channel_notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_channel_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.VCProxyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.VCProxyNotify)
  return false;
#undef DO_
}

void VCProxyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.VCProxyNotify)
  // optional .qihoo.protocol.vcproxy.NewChannelNotify new_channel_notify = 1;
  if (has_new_channel_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_channel_notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.VCProxyNotify)
}

::google::protobuf::uint8* VCProxyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.VCProxyNotify)
  // optional .qihoo.protocol.vcproxy.NewChannelNotify new_channel_notify = 1;
  if (has_new_channel_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_channel_notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.VCProxyNotify)
  return target;
}

int VCProxyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.vcproxy.NewChannelNotify new_channel_notify = 1;
    if (has_new_channel_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_channel_notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VCProxyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VCProxyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VCProxyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VCProxyNotify::MergeFrom(const VCProxyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_channel_notify()) {
      mutable_new_channel_notify()->::qihoo::protocol::vcproxy::NewChannelNotify::MergeFrom(from.new_channel_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VCProxyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCProxyNotify::CopyFrom(const VCProxyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCProxyNotify::IsInitialized() const {

  return true;
}

void VCProxyNotify::Swap(VCProxyNotify* other) {
  if (other != this) {
    std::swap(new_channel_notify_, other->new_channel_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VCProxyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VCProxyNotify_descriptor_;
  metadata.reflection = VCProxyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VCProxyPacket::kPayloadTypeFieldNumber;
const int VCProxyPacket::kUserDataFieldNumber;
const int VCProxyPacket::kServerDataFieldNumber;
const int VCProxyPacket::kNotifyDataFieldNumber;
#endif  // !_MSC_VER

VCProxyPacket::VCProxyPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.vcproxy.VCProxyPacket)
}

void VCProxyPacket::InitAsDefaultInstance() {
  user_data_ = const_cast< ::qihoo::protocol::vcproxy::VCProxyUserToServer*>(&::qihoo::protocol::vcproxy::VCProxyUserToServer::default_instance());
  server_data_ = const_cast< ::qihoo::protocol::vcproxy::VCProxyServerToUser*>(&::qihoo::protocol::vcproxy::VCProxyServerToUser::default_instance());
  notify_data_ = const_cast< ::qihoo::protocol::vcproxy::VCProxyNotify*>(&::qihoo::protocol::vcproxy::VCProxyNotify::default_instance());
}

VCProxyPacket::VCProxyPacket(const VCProxyPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.vcproxy.VCProxyPacket)
}

void VCProxyPacket::SharedCtor() {
  _cached_size_ = 0;
  payload_type_ = 0u;
  user_data_ = NULL;
  server_data_ = NULL;
  notify_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VCProxyPacket::~VCProxyPacket() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.vcproxy.VCProxyPacket)
  SharedDtor();
}

void VCProxyPacket::SharedDtor() {
  if (this != default_instance_) {
    delete user_data_;
    delete server_data_;
    delete notify_data_;
  }
}

void VCProxyPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VCProxyPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VCProxyPacket_descriptor_;
}

const VCProxyPacket& VCProxyPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vcproxy_2eproto();
  return *default_instance_;
}

VCProxyPacket* VCProxyPacket::default_instance_ = NULL;

VCProxyPacket* VCProxyPacket::New() const {
  return new VCProxyPacket;
}

void VCProxyPacket::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    payload_type_ = 0u;
    if (has_user_data()) {
      if (user_data_ != NULL) user_data_->::qihoo::protocol::vcproxy::VCProxyUserToServer::Clear();
    }
    if (has_server_data()) {
      if (server_data_ != NULL) server_data_->::qihoo::protocol::vcproxy::VCProxyServerToUser::Clear();
    }
    if (has_notify_data()) {
      if (notify_data_ != NULL) notify_data_->::qihoo::protocol::vcproxy::VCProxyNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VCProxyPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.vcproxy.VCProxyPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 payload_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
          set_has_payload_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // optional .qihoo.protocol.vcproxy.VCProxyUserToServer user_data = 2;
      case 2: {
        if (tag == 18) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_data;
        break;
      }

      // optional .qihoo.protocol.vcproxy.VCProxyServerToUser server_data = 3;
      case 3: {
        if (tag == 26) {
         parse_server_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_notify_data;
        break;
      }

      // optional .qihoo.protocol.vcproxy.VCProxyNotify notify_data = 4;
      case 4: {
        if (tag == 34) {
         parse_notify_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.vcproxy.VCProxyPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.vcproxy.VCProxyPacket)
  return false;
#undef DO_
}

void VCProxyPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.vcproxy.VCProxyPacket)
  // required uint32 payload_type = 1;
  if (has_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->payload_type(), output);
  }

  // optional .qihoo.protocol.vcproxy.VCProxyUserToServer user_data = 2;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_data(), output);
  }

  // optional .qihoo.protocol.vcproxy.VCProxyServerToUser server_data = 3;
  if (has_server_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_data(), output);
  }

  // optional .qihoo.protocol.vcproxy.VCProxyNotify notify_data = 4;
  if (has_notify_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->notify_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.vcproxy.VCProxyPacket)
}

::google::protobuf::uint8* VCProxyPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.vcproxy.VCProxyPacket)
  // required uint32 payload_type = 1;
  if (has_payload_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->payload_type(), target);
  }

  // optional .qihoo.protocol.vcproxy.VCProxyUserToServer user_data = 2;
  if (has_user_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_data(), target);
  }

  // optional .qihoo.protocol.vcproxy.VCProxyServerToUser server_data = 3;
  if (has_server_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server_data(), target);
  }

  // optional .qihoo.protocol.vcproxy.VCProxyNotify notify_data = 4;
  if (has_notify_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->notify_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.vcproxy.VCProxyPacket)
  return target;
}

int VCProxyPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 payload_type = 1;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional .qihoo.protocol.vcproxy.VCProxyUserToServer user_data = 2;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_data());
    }

    // optional .qihoo.protocol.vcproxy.VCProxyServerToUser server_data = 3;
    if (has_server_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_data());
    }

    // optional .qihoo.protocol.vcproxy.VCProxyNotify notify_data = 4;
    if (has_notify_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VCProxyPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VCProxyPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VCProxyPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VCProxyPacket::MergeFrom(const VCProxyPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_type()) {
      set_payload_type(from.payload_type());
    }
    if (from.has_user_data()) {
      mutable_user_data()->::qihoo::protocol::vcproxy::VCProxyUserToServer::MergeFrom(from.user_data());
    }
    if (from.has_server_data()) {
      mutable_server_data()->::qihoo::protocol::vcproxy::VCProxyServerToUser::MergeFrom(from.server_data());
    }
    if (from.has_notify_data()) {
      mutable_notify_data()->::qihoo::protocol::vcproxy::VCProxyNotify::MergeFrom(from.notify_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VCProxyPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCProxyPacket::CopyFrom(const VCProxyPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCProxyPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_data()) {
    if (!this->user_data().IsInitialized()) return false;
  }
  if (has_server_data()) {
    if (!this->server_data().IsInitialized()) return false;
  }
  return true;
}

void VCProxyPacket::Swap(VCProxyPacket* other) {
  if (other != this) {
    std::swap(payload_type_, other->payload_type_);
    std::swap(user_data_, other->user_data_);
    std::swap(server_data_, other->server_data_);
    std::swap(notify_data_, other->notify_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VCProxyPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VCProxyPacket_descriptor_;
  metadata.reflection = VCProxyPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vcproxy
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
