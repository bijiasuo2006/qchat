// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groupchat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "groupchat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace group {

namespace {

const ::google::protobuf::Descriptor* GroupNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMessageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMessageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupSyncReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupSyncReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUpPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUpPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupDownPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupDownPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_groupchat_2eproto() {
  protobuf_AddDesc_groupchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "groupchat.proto");
  GOOGLE_CHECK(file != NULL);
  GroupNotify_descriptor_ = file->message_type(0);
  static const int GroupNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNotify, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNotify, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNotify, summary_),
  };
  GroupNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupNotify_descriptor_,
      GroupNotify::default_instance_,
      GroupNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupNotify));
  GroupMessageReq_descriptor_ = file->message_type(1);
  static const int GroupMessageReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageReq, traceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageReq, startid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageReq, offset_),
  };
  GroupMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMessageReq_descriptor_,
      GroupMessageReq::default_instance_,
      GroupMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMessageReq));
  GroupMessage_descriptor_ = file->message_type(2);
  static const int GroupMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, sender_),
  };
  GroupMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMessage_descriptor_,
      GroupMessage::default_instance_,
      GroupMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMessage));
  GroupMessageResp_descriptor_ = file->message_type(3);
  static const int GroupMessageResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, traceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, msglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, maxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, version_),
  };
  GroupMessageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupMessageResp_descriptor_,
      GroupMessageResp::default_instance_,
      GroupMessageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMessageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupMessageResp));
  GroupSyncReq_descriptor_ = file->message_type(4);
  static const int GroupSyncReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSyncReq, groupid_),
  };
  GroupSyncReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupSyncReq_descriptor_,
      GroupSyncReq::default_instance_,
      GroupSyncReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSyncReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSyncReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupSyncReq));
  GroupInfo_descriptor_ = file->message_type(5);
  static const int GroupInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, maxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, startid_),
  };
  GroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInfo_descriptor_,
      GroupInfo::default_instance_,
      GroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInfo));
  GroupUpPacket_descriptor_ = file->message_type(6);
  static const int GroupUpPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpPacket, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpPacket, syncreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpPacket, getmsgreq_),
  };
  GroupUpPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupUpPacket_descriptor_,
      GroupUpPacket::default_instance_,
      GroupUpPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupUpPacket));
  GroupDownPacket_descriptor_ = file->message_type(7);
  static const int GroupDownPacket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, newmsgnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, syncresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, getmsgresp_),
  };
  GroupDownPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupDownPacket_descriptor_,
      GroupDownPacket::default_instance_,
      GroupDownPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDownPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupDownPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_groupchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupNotify_descriptor_, &GroupNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMessageReq_descriptor_, &GroupMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMessage_descriptor_, &GroupMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupMessageResp_descriptor_, &GroupMessageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupSyncReq_descriptor_, &GroupSyncReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInfo_descriptor_, &GroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupUpPacket_descriptor_, &GroupUpPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupDownPacket_descriptor_, &GroupDownPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_groupchat_2eproto() {
  delete GroupNotify::default_instance_;
  delete GroupNotify_reflection_;
  delete GroupMessageReq::default_instance_;
  delete GroupMessageReq_reflection_;
  delete GroupMessage::default_instance_;
  delete GroupMessage_reflection_;
  delete GroupMessageResp::default_instance_;
  delete GroupMessageResp_reflection_;
  delete GroupSyncReq::default_instance_;
  delete GroupSyncReq_reflection_;
  delete GroupInfo::default_instance_;
  delete GroupInfo_reflection_;
  delete GroupUpPacket::default_instance_;
  delete GroupUpPacket_reflection_;
  delete GroupDownPacket::default_instance_;
  delete GroupDownPacket_reflection_;
}

void protobuf_AddDesc_groupchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017groupchat.proto\022\024qihoo.protocol.group\""
    ">\n\013GroupNotify\022\017\n\007groupid\030\001 \002(\t\022\r\n\005msgid"
    "\030\002 \002(\004\022\017\n\007summary\030\003 \001(\t\"T\n\017GroupMessageR"
    "eq\022\017\n\007groupid\030\001 \002(\t\022\017\n\007traceid\030\002 \002(\t\022\017\n\007"
    "startid\030\003 \001(\004\022\016\n\006offset\030\004 \001(\005\"P\n\014GroupMe"
    "ssage\022\r\n\005msgid\030\001 \002(\004\022\017\n\007content\030\002 \002(\t\022\020\n"
    "\010sendtime\030\003 \001(\003\022\016\n\006sender\030\004 \001(\t\"\211\001\n\020Grou"
    "pMessageResp\022\017\n\007groupid\030\001 \002(\t\022\017\n\007traceid"
    "\030\002 \002(\t\0223\n\007msglist\030\003 \003(\0132\".qihoo.protocol"
    ".group.GroupMessage\022\r\n\005maxid\030\004 \001(\004\022\017\n\007ve"
    "rsion\030\005 \001(\003\"\037\n\014GroupSyncReq\022\017\n\007groupid\030\001"
    " \002(\t\"M\n\tGroupInfo\022\017\n\007groupid\030\001 \002(\t\022\r\n\005ma"
    "xid\030\002 \001(\004\022\017\n\007version\030\003 \001(\003\022\017\n\007startid\030\004 "
    "\001(\004\"\217\001\n\rGroupUpPacket\022\017\n\007payload\030\001 \002(\r\0223"
    "\n\007syncreq\030\006 \003(\0132\".qihoo.protocol.group.G"
    "roupSyncReq\0228\n\tgetmsgreq\030\007 \003(\0132%.qihoo.p"
    "rotocol.group.GroupMessageReq\"\374\001\n\017GroupD"
    "ownPacket\022\016\n\006result\030\001 \002(\005\022\017\n\007payload\030\002 \002"
    "(\r\022\016\n\006reason\030\003 \001(\t\022\020\n\005sleep\030\004 \001(\005:\0010\0227\n\014"
    "newmsgnotify\030\005 \003(\0132!.qihoo.protocol.grou"
    "p.GroupNotify\0221\n\010syncresp\030\006 \003(\0132\037.qihoo."
    "protocol.group.GroupInfo\022:\n\ngetmsgresp\030\007"
    " \003(\0132&.qihoo.protocol.group.GroupMessage"
    "RespB+\n\031com.huajiao.comm.protobufB\016Group"
    "ChatProto", 969);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "groupchat.proto", &protobuf_RegisterTypes);
  GroupNotify::default_instance_ = new GroupNotify();
  GroupMessageReq::default_instance_ = new GroupMessageReq();
  GroupMessage::default_instance_ = new GroupMessage();
  GroupMessageResp::default_instance_ = new GroupMessageResp();
  GroupSyncReq::default_instance_ = new GroupSyncReq();
  GroupInfo::default_instance_ = new GroupInfo();
  GroupUpPacket::default_instance_ = new GroupUpPacket();
  GroupDownPacket::default_instance_ = new GroupDownPacket();
  GroupNotify::default_instance_->InitAsDefaultInstance();
  GroupMessageReq::default_instance_->InitAsDefaultInstance();
  GroupMessage::default_instance_->InitAsDefaultInstance();
  GroupMessageResp::default_instance_->InitAsDefaultInstance();
  GroupSyncReq::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  GroupUpPacket::default_instance_->InitAsDefaultInstance();
  GroupDownPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_groupchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_groupchat_2eproto {
  StaticDescriptorInitializer_groupchat_2eproto() {
    protobuf_AddDesc_groupchat_2eproto();
  }
} static_descriptor_initializer_groupchat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupNotify::kGroupidFieldNumber;
const int GroupNotify::kMsgidFieldNumber;
const int GroupNotify::kSummaryFieldNumber;
#endif  // !_MSC_VER

GroupNotify::GroupNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupNotify)
}

void GroupNotify::InitAsDefaultInstance() {
}

GroupNotify::GroupNotify(const GroupNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupNotify)
}

void GroupNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = GOOGLE_ULONGLONG(0);
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupNotify::~GroupNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupNotify)
  SharedDtor();
}

void GroupNotify::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (this != default_instance_) {
  }
}

void GroupNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupNotify_descriptor_;
}

const GroupNotify& GroupNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupNotify* GroupNotify::default_instance_ = NULL;

GroupNotify* GroupNotify::New() const {
  return new GroupNotify;
}

void GroupNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
    msgid_ = GOOGLE_ULONGLONG(0);
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint64 msgid = 2;
      case 2: {
        if (tag == 16) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_summary;
        break;
      }

      // optional string summary = 3;
      case 3: {
        if (tag == 26) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupNotify)
  return false;
#undef DO_
}

void GroupNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupNotify)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // required uint64 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgid(), output);
  }

  // optional string summary = 3;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupNotify)
}

::google::protobuf::uint8* GroupNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupNotify)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // required uint64 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msgid(), target);
  }

  // optional string summary = 3;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupNotify)
  return target;
}

int GroupNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required uint64 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

    // optional string summary = 3;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupNotify::MergeFrom(const GroupNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupNotify::CopyFrom(const GroupNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupNotify::Swap(GroupNotify* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(msgid_, other->msgid_);
    std::swap(summary_, other->summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupNotify_descriptor_;
  metadata.reflection = GroupNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMessageReq::kGroupidFieldNumber;
const int GroupMessageReq::kTraceidFieldNumber;
const int GroupMessageReq::kStartidFieldNumber;
const int GroupMessageReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

GroupMessageReq::GroupMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupMessageReq)
}

void GroupMessageReq::InitAsDefaultInstance() {
}

GroupMessageReq::GroupMessageReq(const GroupMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupMessageReq)
}

void GroupMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startid_ = GOOGLE_ULONGLONG(0);
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMessageReq::~GroupMessageReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupMessageReq)
  SharedDtor();
}

void GroupMessageReq::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceid_;
  }
  if (this != default_instance_) {
  }
}

void GroupMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMessageReq_descriptor_;
}

const GroupMessageReq& GroupMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupMessageReq* GroupMessageReq::default_instance_ = NULL;

GroupMessageReq* GroupMessageReq::New() const {
  return new GroupMessageReq;
}

void GroupMessageReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupMessageReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(startid_, offset_);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
    if (has_traceid()) {
      if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        traceid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_traceid;
        break;
      }

      // required string traceid = 2;
      case 2: {
        if (tag == 18) {
         parse_traceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->traceid().data(), this->traceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "traceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startid;
        break;
      }

      // optional uint64 startid = 3;
      case 3: {
        if (tag == 24) {
         parse_startid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startid_)));
          set_has_startid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupMessageReq)
  return false;
#undef DO_
}

void GroupMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupMessageReq)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // required string traceid = 2;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->traceid(), output);
  }

  // optional uint64 startid = 3;
  if (has_startid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->startid(), output);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupMessageReq)
}

::google::protobuf::uint8* GroupMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupMessageReq)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // required string traceid = 2;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->traceid(), target);
  }

  // optional uint64 startid = 3;
  if (has_startid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->startid(), target);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupMessageReq)
  return target;
}

int GroupMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required string traceid = 2;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traceid());
    }

    // optional uint64 startid = 3;
    if (has_startid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startid());
    }

    // optional int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMessageReq::MergeFrom(const GroupMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_traceid()) {
      set_traceid(from.traceid());
    }
    if (from.has_startid()) {
      set_startid(from.startid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessageReq::CopyFrom(const GroupMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupMessageReq::Swap(GroupMessageReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(traceid_, other->traceid_);
    std::swap(startid_, other->startid_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMessageReq_descriptor_;
  metadata.reflection = GroupMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMessage::kMsgidFieldNumber;
const int GroupMessage::kContentFieldNumber;
const int GroupMessage::kSendtimeFieldNumber;
const int GroupMessage::kSenderFieldNumber;
#endif  // !_MSC_VER

GroupMessage::GroupMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupMessage)
}

void GroupMessage::InitAsDefaultInstance() {
}

GroupMessage::GroupMessage(const GroupMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupMessage)
}

void GroupMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = GOOGLE_LONGLONG(0);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMessage::~GroupMessage() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupMessage)
  SharedDtor();
}

void GroupMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void GroupMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMessage_descriptor_;
}

const GroupMessage& GroupMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupMessage* GroupMessage::default_instance_ = NULL;

GroupMessage* GroupMessage::New() const {
  return new GroupMessage;
}

void GroupMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    sendtime_ = GOOGLE_LONGLONG(0);
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sendtime;
        break;
      }

      // optional int64 sendtime = 3;
      case 3: {
        if (tag == 24) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }

      // optional string sender = 4;
      case 4: {
        if (tag == 34) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupMessage)
  return false;
#undef DO_
}

void GroupMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupMessage)
  // required uint64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msgid(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int64 sendtime = 3;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sendtime(), output);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupMessage)
}

::google::protobuf::uint8* GroupMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupMessage)
  // required uint64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msgid(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional int64 sendtime = 3;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sendtime(), target);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupMessage)
  return target;
}

int GroupMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 sendtime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

    // optional string sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMessage::MergeFrom(const GroupMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessage::CopyFrom(const GroupMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupMessage::Swap(GroupMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(content_, other->content_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMessage_descriptor_;
  metadata.reflection = GroupMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMessageResp::kGroupidFieldNumber;
const int GroupMessageResp::kTraceidFieldNumber;
const int GroupMessageResp::kMsglistFieldNumber;
const int GroupMessageResp::kMaxidFieldNumber;
const int GroupMessageResp::kVersionFieldNumber;
#endif  // !_MSC_VER

GroupMessageResp::GroupMessageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupMessageResp)
}

void GroupMessageResp::InitAsDefaultInstance() {
}

GroupMessageResp::GroupMessageResp(const GroupMessageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupMessageResp)
}

void GroupMessageResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxid_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMessageResp::~GroupMessageResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupMessageResp)
  SharedDtor();
}

void GroupMessageResp::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceid_;
  }
  if (this != default_instance_) {
  }
}

void GroupMessageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMessageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMessageResp_descriptor_;
}

const GroupMessageResp& GroupMessageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupMessageResp* GroupMessageResp::default_instance_ = NULL;

GroupMessageResp* GroupMessageResp::New() const {
  return new GroupMessageResp;
}

void GroupMessageResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupMessageResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(maxid_, version_);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
    if (has_traceid()) {
      if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        traceid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  msglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupMessageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupMessageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_traceid;
        break;
      }

      // required string traceid = 2;
      case 2: {
        if (tag == 18) {
         parse_traceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->traceid().data(), this->traceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "traceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msglist;
        break;
      }

      // repeated .qihoo.protocol.group.GroupMessage msglist = 3;
      case 3: {
        if (tag == 26) {
         parse_msglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msglist;
        if (input->ExpectTag(32)) goto parse_maxid;
        break;
      }

      // optional uint64 maxid = 4;
      case 4: {
        if (tag == 32) {
         parse_maxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxid_)));
          set_has_maxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional int64 version = 5;
      case 5: {
        if (tag == 40) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupMessageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupMessageResp)
  return false;
#undef DO_
}

void GroupMessageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupMessageResp)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // required string traceid = 2;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->traceid(), output);
  }

  // repeated .qihoo.protocol.group.GroupMessage msglist = 3;
  for (int i = 0; i < this->msglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msglist(i), output);
  }

  // optional uint64 maxid = 4;
  if (has_maxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxid(), output);
  }

  // optional int64 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupMessageResp)
}

::google::protobuf::uint8* GroupMessageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupMessageResp)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // required string traceid = 2;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->traceid(), target);
  }

  // repeated .qihoo.protocol.group.GroupMessage msglist = 3;
  for (int i = 0; i < this->msglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msglist(i), target);
  }

  // optional uint64 maxid = 4;
  if (has_maxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxid(), target);
  }

  // optional int64 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupMessageResp)
  return target;
}

int GroupMessageResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required string traceid = 2;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traceid());
    }

    // optional uint64 maxid = 4;
    if (has_maxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxid());
    }

    // optional int64 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

  }
  // repeated .qihoo.protocol.group.GroupMessage msglist = 3;
  total_size += 1 * this->msglist_size();
  for (int i = 0; i < this->msglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMessageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupMessageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMessageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMessageResp::MergeFrom(const GroupMessageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  msglist_.MergeFrom(from.msglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_traceid()) {
      set_traceid(from.traceid());
    }
    if (from.has_maxid()) {
      set_maxid(from.maxid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupMessageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMessageResp::CopyFrom(const GroupMessageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMessageResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msglist())) return false;
  return true;
}

void GroupMessageResp::Swap(GroupMessageResp* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(traceid_, other->traceid_);
    msglist_.Swap(&other->msglist_);
    std::swap(maxid_, other->maxid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupMessageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMessageResp_descriptor_;
  metadata.reflection = GroupMessageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupSyncReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

GroupSyncReq::GroupSyncReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupSyncReq)
}

void GroupSyncReq::InitAsDefaultInstance() {
}

GroupSyncReq::GroupSyncReq(const GroupSyncReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupSyncReq)
}

void GroupSyncReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupSyncReq::~GroupSyncReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupSyncReq)
  SharedDtor();
}

void GroupSyncReq::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void GroupSyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupSyncReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupSyncReq_descriptor_;
}

const GroupSyncReq& GroupSyncReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupSyncReq* GroupSyncReq::default_instance_ = NULL;

GroupSyncReq* GroupSyncReq::New() const {
  return new GroupSyncReq;
}

void GroupSyncReq::Clear() {
  if (has_groupid()) {
    if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      groupid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupSyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupSyncReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupSyncReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupSyncReq)
  return false;
#undef DO_
}

void GroupSyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupSyncReq)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupSyncReq)
}

::google::protobuf::uint8* GroupSyncReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupSyncReq)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupSyncReq)
  return target;
}

int GroupSyncReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupSyncReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupSyncReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupSyncReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupSyncReq::MergeFrom(const GroupSyncReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupSyncReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSyncReq::CopyFrom(const GroupSyncReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSyncReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupSyncReq::Swap(GroupSyncReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupSyncReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupSyncReq_descriptor_;
  metadata.reflection = GroupSyncReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInfo::kGroupidFieldNumber;
const int GroupInfo::kMaxidFieldNumber;
const int GroupInfo::kVersionFieldNumber;
const int GroupInfo::kStartidFieldNumber;
#endif  // !_MSC_VER

GroupInfo::GroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupInfo)
}

void GroupInfo::InitAsDefaultInstance() {
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxid_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
  startid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInfo_descriptor_;
}

const GroupInfo& GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New() const {
  return new GroupInfo;
}

void GroupInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(maxid_, startid_);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxid;
        break;
      }

      // optional uint64 maxid = 2;
      case 2: {
        if (tag == 16) {
         parse_maxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxid_)));
          set_has_maxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional int64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_startid;
        break;
      }

      // optional uint64 startid = 4;
      case 4: {
        if (tag == 32) {
         parse_startid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startid_)));
          set_has_startid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupInfo)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // optional uint64 maxid = 2;
  if (has_maxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxid(), output);
  }

  // optional int64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }

  // optional uint64 startid = 4;
  if (has_startid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->startid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupInfo)
}

::google::protobuf::uint8* GroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupInfo)
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // optional uint64 maxid = 2;
  if (has_maxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxid(), target);
  }

  // optional int64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->version(), target);
  }

  // optional uint64 startid = 4;
  if (has_startid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->startid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupInfo)
  return target;
}

int GroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional uint64 maxid = 2;
    if (has_maxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxid());
    }

    // optional int64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional uint64 startid = 4;
    if (has_startid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_maxid()) {
      set_maxid(from.maxid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_startid()) {
      set_startid(from.startid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(maxid_, other->maxid_);
    std::swap(version_, other->version_);
    std::swap(startid_, other->startid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInfo_descriptor_;
  metadata.reflection = GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupUpPacket::kPayloadFieldNumber;
const int GroupUpPacket::kSyncreqFieldNumber;
const int GroupUpPacket::kGetmsgreqFieldNumber;
#endif  // !_MSC_VER

GroupUpPacket::GroupUpPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupUpPacket)
}

void GroupUpPacket::InitAsDefaultInstance() {
}

GroupUpPacket::GroupUpPacket(const GroupUpPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupUpPacket)
}

void GroupUpPacket::SharedCtor() {
  _cached_size_ = 0;
  payload_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUpPacket::~GroupUpPacket() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupUpPacket)
  SharedDtor();
}

void GroupUpPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupUpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUpPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUpPacket_descriptor_;
}

const GroupUpPacket& GroupUpPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupUpPacket* GroupUpPacket::default_instance_ = NULL;

GroupUpPacket* GroupUpPacket::New() const {
  return new GroupUpPacket;
}

void GroupUpPacket::Clear() {
  payload_ = 0u;
  syncreq_.Clear();
  getmsgreq_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupUpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupUpPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 payload = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_)));
          set_has_payload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_syncreq;
        break;
      }

      // repeated .qihoo.protocol.group.GroupSyncReq syncreq = 6;
      case 6: {
        if (tag == 50) {
         parse_syncreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_syncreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_syncreq;
        if (input->ExpectTag(58)) goto parse_getmsgreq;
        break;
      }

      // repeated .qihoo.protocol.group.GroupMessageReq getmsgreq = 7;
      case 7: {
        if (tag == 58) {
         parse_getmsgreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getmsgreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_getmsgreq;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupUpPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupUpPacket)
  return false;
#undef DO_
}

void GroupUpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupUpPacket)
  // required uint32 payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->payload(), output);
  }

  // repeated .qihoo.protocol.group.GroupSyncReq syncreq = 6;
  for (int i = 0; i < this->syncreq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->syncreq(i), output);
  }

  // repeated .qihoo.protocol.group.GroupMessageReq getmsgreq = 7;
  for (int i = 0; i < this->getmsgreq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->getmsgreq(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupUpPacket)
}

::google::protobuf::uint8* GroupUpPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupUpPacket)
  // required uint32 payload = 1;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->payload(), target);
  }

  // repeated .qihoo.protocol.group.GroupSyncReq syncreq = 6;
  for (int i = 0; i < this->syncreq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->syncreq(i), target);
  }

  // repeated .qihoo.protocol.group.GroupMessageReq getmsgreq = 7;
  for (int i = 0; i < this->getmsgreq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->getmsgreq(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupUpPacket)
  return target;
}

int GroupUpPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload());
    }

  }
  // repeated .qihoo.protocol.group.GroupSyncReq syncreq = 6;
  total_size += 1 * this->syncreq_size();
  for (int i = 0; i < this->syncreq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->syncreq(i));
  }

  // repeated .qihoo.protocol.group.GroupMessageReq getmsgreq = 7;
  total_size += 1 * this->getmsgreq_size();
  for (int i = 0; i < this->getmsgreq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getmsgreq(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUpPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupUpPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupUpPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupUpPacket::MergeFrom(const GroupUpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  syncreq_.MergeFrom(from.syncreq_);
  getmsgreq_.MergeFrom(from.getmsgreq_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupUpPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUpPacket::CopyFrom(const GroupUpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->syncreq())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->getmsgreq())) return false;
  return true;
}

void GroupUpPacket::Swap(GroupUpPacket* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    syncreq_.Swap(&other->syncreq_);
    getmsgreq_.Swap(&other->getmsgreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupUpPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUpPacket_descriptor_;
  metadata.reflection = GroupUpPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupDownPacket::kResultFieldNumber;
const int GroupDownPacket::kPayloadFieldNumber;
const int GroupDownPacket::kReasonFieldNumber;
const int GroupDownPacket::kSleepFieldNumber;
const int GroupDownPacket::kNewmsgnotifyFieldNumber;
const int GroupDownPacket::kSyncrespFieldNumber;
const int GroupDownPacket::kGetmsgrespFieldNumber;
#endif  // !_MSC_VER

GroupDownPacket::GroupDownPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.group.GroupDownPacket)
}

void GroupDownPacket::InitAsDefaultInstance() {
}

GroupDownPacket::GroupDownPacket(const GroupDownPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.group.GroupDownPacket)
}

void GroupDownPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  payload_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sleep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDownPacket::~GroupDownPacket() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.group.GroupDownPacket)
  SharedDtor();
}

void GroupDownPacket::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void GroupDownPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupDownPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDownPacket_descriptor_;
}

const GroupDownPacket& GroupDownPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupchat_2eproto();
  return *default_instance_;
}

GroupDownPacket* GroupDownPacket::default_instance_ = NULL;

GroupDownPacket* GroupDownPacket::New() const {
  return new GroupDownPacket;
}

void GroupDownPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupDownPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_, payload_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    sleep_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  newmsgnotify_.Clear();
  syncresp_.Clear();
  getmsgresp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupDownPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.group.GroupDownPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_payload;
        break;
      }

      // required uint32 payload = 2;
      case 2: {
        if (tag == 16) {
         parse_payload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_)));
          set_has_payload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sleep;
        break;
      }

      // optional int32 sleep = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sleep_)));
          set_has_sleep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newmsgnotify;
        break;
      }

      // repeated .qihoo.protocol.group.GroupNotify newmsgnotify = 5;
      case 5: {
        if (tag == 42) {
         parse_newmsgnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newmsgnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newmsgnotify;
        if (input->ExpectTag(50)) goto parse_syncresp;
        break;
      }

      // repeated .qihoo.protocol.group.GroupInfo syncresp = 6;
      case 6: {
        if (tag == 50) {
         parse_syncresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_syncresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_syncresp;
        if (input->ExpectTag(58)) goto parse_getmsgresp;
        break;
      }

      // repeated .qihoo.protocol.group.GroupMessageResp getmsgresp = 7;
      case 7: {
        if (tag == 58) {
         parse_getmsgresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getmsgresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_getmsgresp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.group.GroupDownPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.group.GroupDownPacket)
  return false;
#undef DO_
}

void GroupDownPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.group.GroupDownPacket)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payload(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional int32 sleep = 4 [default = 0];
  if (has_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sleep(), output);
  }

  // repeated .qihoo.protocol.group.GroupNotify newmsgnotify = 5;
  for (int i = 0; i < this->newmsgnotify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->newmsgnotify(i), output);
  }

  // repeated .qihoo.protocol.group.GroupInfo syncresp = 6;
  for (int i = 0; i < this->syncresp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->syncresp(i), output);
  }

  // repeated .qihoo.protocol.group.GroupMessageResp getmsgresp = 7;
  for (int i = 0; i < this->getmsgresp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->getmsgresp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.group.GroupDownPacket)
}

::google::protobuf::uint8* GroupDownPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.group.GroupDownPacket)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 payload = 2;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payload(), target);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // optional int32 sleep = 4 [default = 0];
  if (has_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sleep(), target);
  }

  // repeated .qihoo.protocol.group.GroupNotify newmsgnotify = 5;
  for (int i = 0; i < this->newmsgnotify_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->newmsgnotify(i), target);
  }

  // repeated .qihoo.protocol.group.GroupInfo syncresp = 6;
  for (int i = 0; i < this->syncresp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->syncresp(i), target);
  }

  // repeated .qihoo.protocol.group.GroupMessageResp getmsgresp = 7;
  for (int i = 0; i < this->getmsgresp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->getmsgresp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.group.GroupDownPacket)
  return target;
}

int GroupDownPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint32 payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 sleep = 4 [default = 0];
    if (has_sleep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sleep());
    }

  }
  // repeated .qihoo.protocol.group.GroupNotify newmsgnotify = 5;
  total_size += 1 * this->newmsgnotify_size();
  for (int i = 0; i < this->newmsgnotify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newmsgnotify(i));
  }

  // repeated .qihoo.protocol.group.GroupInfo syncresp = 6;
  total_size += 1 * this->syncresp_size();
  for (int i = 0; i < this->syncresp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->syncresp(i));
  }

  // repeated .qihoo.protocol.group.GroupMessageResp getmsgresp = 7;
  total_size += 1 * this->getmsgresp_size();
  for (int i = 0; i < this->getmsgresp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getmsgresp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDownPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupDownPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupDownPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupDownPacket::MergeFrom(const GroupDownPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  newmsgnotify_.MergeFrom(from.newmsgnotify_);
  syncresp_.MergeFrom(from.syncresp_);
  getmsgresp_.MergeFrom(from.getmsgresp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_sleep()) {
      set_sleep(from.sleep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupDownPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDownPacket::CopyFrom(const GroupDownPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDownPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->newmsgnotify())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->syncresp())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->getmsgresp())) return false;
  return true;
}

void GroupDownPacket::Swap(GroupDownPacket* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(payload_, other->payload_);
    std::swap(reason_, other->reason_);
    std::swap(sleep_, other->sleep_);
    newmsgnotify_.Swap(&other->newmsgnotify_);
    syncresp_.Swap(&other->syncresp_);
    getmsgresp_.Swap(&other->getmsgresp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupDownPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupDownPacket_descriptor_;
  metadata.reflection = GroupDownPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace group
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
