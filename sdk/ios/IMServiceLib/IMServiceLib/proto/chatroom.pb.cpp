// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatroom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatroom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace chatroom {

namespace {

const ::google::protobuf::Descriptor* CRPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChatRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChatRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChatRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChatRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMultiChatRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMultiChatRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMultiChatRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMultiChatRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChatRoomDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChatRoomDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChatRoomDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChatRoomDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinChatRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinChatRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinChatRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinChatRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitChatRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitChatRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitChatRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitChatRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllGameRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllGameRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllGameRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllGameRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryChatRoomIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryChatRoomIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryChatRoomIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryChatRoomIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRoomIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRoomIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRoomIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRoomIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChatRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChatRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChatRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChatRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickChatRoomMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickChatRoomMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickChatRoomMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickChatRoomMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRoomToDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRoomToDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChatRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChatRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberJoinChatRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberJoinChatRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberQuitChatRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberQuitChatRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickMemberNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickMemberNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChatRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChatRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomNewMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomNewMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomMNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomMNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomUpToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomUpToServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomDownToUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomDownToUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatroom_2eproto() {
  protobuf_AddDesc_chatroom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatroom.proto");
  GOOGLE_CHECK(file != NULL);
  CRPair_descriptor_ = file->message_type(0);
  static const int CRPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, value_),
  };
  CRPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRPair_descriptor_,
      CRPair::default_instance_,
      CRPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRPair));
  CRUser_descriptor_ = file->message_type(1);
  static const int CRUser_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, publicsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, privatesetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, userdata_),
  };
  CRUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRUser_descriptor_,
      CRUser::default_instance_,
      CRUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRUser));
  ChatRoom_descriptor_ = file->message_type(2);
  static const int ChatRoom_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, creater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, maxmsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, memcountlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, tempmembers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, partnerdata_),
  };
  ChatRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoom_descriptor_,
      ChatRoom::default_instance_,
      ChatRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoom));
  CreateChatRoomRequest_descriptor_ = file->message_type(3);
  static const int CreateChatRoomRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, memcountlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, creater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, properties_),
  };
  CreateChatRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChatRoomRequest_descriptor_,
      CreateChatRoomRequest::default_instance_,
      CreateChatRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChatRoomRequest));
  CreateChatRoomResponse_descriptor_ = file->message_type(4);
  static const int CreateChatRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, room_),
  };
  CreateChatRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChatRoomResponse_descriptor_,
      CreateChatRoomResponse::default_instance_,
      CreateChatRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChatRoomResponse));
  CreateMultiChatRoomRequest_descriptor_ = file->message_type(5);
  static const int CreateMultiChatRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, rooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, creater_),
  };
  CreateMultiChatRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMultiChatRoomRequest_descriptor_,
      CreateMultiChatRoomRequest::default_instance_,
      CreateMultiChatRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMultiChatRoomRequest));
  CreateMultiChatRoomResponse_descriptor_ = file->message_type(6);
  static const int CreateMultiChatRoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, rooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, creater_),
  };
  CreateMultiChatRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMultiChatRoomResponse_descriptor_,
      CreateMultiChatRoomResponse::default_instance_,
      CreateMultiChatRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMultiChatRoomResponse));
  GetChatRoomDetailRequest_descriptor_ = file->message_type(7);
  static const int GetChatRoomDetailRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, offset_),
  };
  GetChatRoomDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChatRoomDetailRequest_descriptor_,
      GetChatRoomDetailRequest::default_instance_,
      GetChatRoomDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChatRoomDetailRequest));
  GetChatRoomDetailResponse_descriptor_ = file->message_type(8);
  static const int GetChatRoomDetailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailResponse, room_),
  };
  GetChatRoomDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChatRoomDetailResponse_descriptor_,
      GetChatRoomDetailResponse::default_instance_,
      GetChatRoomDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChatRoomDetailResponse));
  ApplyJoinChatRoomRequest_descriptor_ = file->message_type(9);
  static const int ApplyJoinChatRoomRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, userid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, no_userlist_),
  };
  ApplyJoinChatRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinChatRoomRequest_descriptor_,
      ApplyJoinChatRoomRequest::default_instance_,
      ApplyJoinChatRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinChatRoomRequest));
  ApplyJoinChatRoomResponse_descriptor_ = file->message_type(10);
  static const int ApplyJoinChatRoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, pull_lost_),
  };
  ApplyJoinChatRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinChatRoomResponse_descriptor_,
      ApplyJoinChatRoomResponse::default_instance_,
      ApplyJoinChatRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinChatRoomResponse));
  QuitChatRoomRequest_descriptor_ = file->message_type(11);
  static const int QuitChatRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, room_),
  };
  QuitChatRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitChatRoomRequest_descriptor_,
      QuitChatRoomRequest::default_instance_,
      QuitChatRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitChatRoomRequest));
  QuitChatRoomResponse_descriptor_ = file->message_type(12);
  static const int QuitChatRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResponse, room_),
  };
  QuitChatRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitChatRoomResponse_descriptor_,
      QuitChatRoomResponse::default_instance_,
      QuitChatRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitChatRoomResponse));
  QueryAllGameRoomRequest_descriptor_ = file->message_type(13);
  static const int QueryAllGameRoomRequest_offsets_[1] = {
  };
  QueryAllGameRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllGameRoomRequest_descriptor_,
      QueryAllGameRoomRequest::default_instance_,
      QueryAllGameRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllGameRoomRequest));
  QueryAllGameRoomResponse_descriptor_ = file->message_type(14);
  static const int QueryAllGameRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomResponse, maplist_),
  };
  QueryAllGameRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllGameRoomResponse_descriptor_,
      QueryAllGameRoomResponse::default_instance_,
      QueryAllGameRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllGameRoomResponse));
  QueryChatRoomIDRequest_descriptor_ = file->message_type(15);
  static const int QueryChatRoomIDRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDRequest, gameid_),
  };
  QueryChatRoomIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryChatRoomIDRequest_descriptor_,
      QueryChatRoomIDRequest::default_instance_,
      QueryChatRoomIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryChatRoomIDRequest));
  QueryChatRoomIDResponse_descriptor_ = file->message_type(16);
  static const int QueryChatRoomIDResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, gameid_),
  };
  QueryChatRoomIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryChatRoomIDResponse_descriptor_,
      QueryChatRoomIDResponse::default_instance_,
      QueryChatRoomIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryChatRoomIDResponse));
  UpdateRoomIDRequest_descriptor_ = file->message_type(17);
  static const int UpdateRoomIDRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, roomid_),
  };
  UpdateRoomIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRoomIDRequest_descriptor_,
      UpdateRoomIDRequest::default_instance_,
      UpdateRoomIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRoomIDRequest));
  UpdateRoomIDResponse_descriptor_ = file->message_type(18);
  static const int UpdateRoomIDResponse_offsets_[1] = {
  };
  UpdateRoomIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRoomIDResponse_descriptor_,
      UpdateRoomIDResponse::default_instance_,
      UpdateRoomIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRoomIDResponse));
  UpdateChatRoomRequest_descriptor_ = file->message_type(19);
  static const int UpdateChatRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, room_),
  };
  UpdateChatRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChatRoomRequest_descriptor_,
      UpdateChatRoomRequest::default_instance_,
      UpdateChatRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChatRoomRequest));
  UpdateChatRoomResponse_descriptor_ = file->message_type(20);
  static const int UpdateChatRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomResponse, room_),
  };
  UpdateChatRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChatRoomResponse_descriptor_,
      UpdateChatRoomResponse::default_instance_,
      UpdateChatRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChatRoomResponse));
  KickChatRoomMemberRequest_descriptor_ = file->message_type(21);
  static const int KickChatRoomMemberRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, room_),
  };
  KickChatRoomMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickChatRoomMemberRequest_descriptor_,
      KickChatRoomMemberRequest::default_instance_,
      KickChatRoomMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickChatRoomMemberRequest));
  KickChatRoomMemberResponse_descriptor_ = file->message_type(22);
  static const int KickChatRoomMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberResponse, room_),
  };
  KickChatRoomMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickChatRoomMemberResponse_descriptor_,
      KickChatRoomMemberResponse::default_instance_,
      KickChatRoomMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickChatRoomMemberResponse));
  SyncRoomToDBRequest_descriptor_ = file->message_type(23);
  static const int SyncRoomToDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomToDBRequest, roomid_),
  };
  SyncRoomToDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRoomToDBRequest_descriptor_,
      SyncRoomToDBRequest::default_instance_,
      SyncRoomToDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomToDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomToDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRoomToDBRequest));
  CreateChatRoomNotify_descriptor_ = file->message_type(24);
  static const int CreateChatRoomNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomNotify, room_),
  };
  CreateChatRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChatRoomNotify_descriptor_,
      CreateChatRoomNotify::default_instance_,
      CreateChatRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChatRoomNotify));
  MemberJoinChatRoomNotify_descriptor_ = file->message_type(25);
  static const int MemberJoinChatRoomNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberJoinChatRoomNotify, room_),
  };
  MemberJoinChatRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberJoinChatRoomNotify_descriptor_,
      MemberJoinChatRoomNotify::default_instance_,
      MemberJoinChatRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberJoinChatRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberJoinChatRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberJoinChatRoomNotify));
  MemberQuitChatRoomNotify_descriptor_ = file->message_type(26);
  static const int MemberQuitChatRoomNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberQuitChatRoomNotify, room_),
  };
  MemberQuitChatRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberQuitChatRoomNotify_descriptor_,
      MemberQuitChatRoomNotify::default_instance_,
      MemberQuitChatRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberQuitChatRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberQuitChatRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberQuitChatRoomNotify));
  KickMemberNotify_descriptor_ = file->message_type(27);
  static const int KickMemberNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, user_),
  };
  KickMemberNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickMemberNotify_descriptor_,
      KickMemberNotify::default_instance_,
      KickMemberNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickMemberNotify));
  UpdateChatRoomNotify_descriptor_ = file->message_type(28);
  static const int UpdateChatRoomNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, user_),
  };
  UpdateChatRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChatRoomNotify_descriptor_,
      UpdateChatRoomNotify::default_instance_,
      UpdateChatRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChatRoomNotify));
  ChatRoomMessageRequest_descriptor_ = file->message_type(29);
  static const int ChatRoomMessageRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, msgcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, clientparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, clientcache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, createnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, joinnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, quitnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, kicknotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, updatenotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, propertylist_),
  };
  ChatRoomMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomMessageRequest_descriptor_,
      ChatRoomMessageRequest::default_instance_,
      ChatRoomMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomMessageRequest));
  ChatRoomMessageResponse_descriptor_ = file->message_type(30);
  static const int ChatRoomMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageResponse, msgid_),
  };
  ChatRoomMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomMessageResponse_descriptor_,
      ChatRoomMessageResponse::default_instance_,
      ChatRoomMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomMessageResponse));
  ChatRoomNewMsg_descriptor_ = file->message_type(31);
  static const int ChatRoomNewMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, msgcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, regmemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, memcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, maxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, timestamp_),
  };
  ChatRoomNewMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomNewMsg_descriptor_,
      ChatRoomNewMsg::default_instance_,
      ChatRoomNewMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomNewMsg));
  ChatRoomErrorMsg_descriptor_ = file->message_type(32);
  static const int ChatRoomErrorMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, clientsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, errorcode_),
  };
  ChatRoomErrorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomErrorMsg_descriptor_,
      ChatRoomErrorMsg::default_instance_,
      ChatRoomErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomErrorMsg));
  ChatRoomMNotify_descriptor_ = file->message_type(33);
  static const int ChatRoomMNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, regmemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, memcount_),
  };
  ChatRoomMNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomMNotify_descriptor_,
      ChatRoomMNotify::default_instance_,
      ChatRoomMNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomMNotify));
  SubscribeRequest_descriptor_ = file->message_type(34);
  static const int SubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, sub_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(35);
  static const int SubscribeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, sub_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  ChatRoomUpToServer_descriptor_ = file->message_type(36);
  static const int ChatRoomUpToServer_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, payloadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, createchatroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, getchatroominforeq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, applyjoinchatroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, quitchatroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, updatechatroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, kickmemberreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, querychatroomidreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, updategameidreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, queryallgameroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, chatroommessagereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, createrooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, syncroomtodba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, subreq_),
  };
  ChatRoomUpToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomUpToServer_descriptor_,
      ChatRoomUpToServer::default_instance_,
      ChatRoomUpToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomUpToServer));
  ChatRoomDownToUser_descriptor_ = file->message_type(37);
  static const int ChatRoomDownToUser_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, payloadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, createchatroomresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, getchatroominforesp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, applyjoinchatroomresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, quitchatroomresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, updatechatroomresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, kickmemberresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, querychatroomidresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, updategameidresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, queryallgameroomresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, chatroommessageresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, newmsgnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, errormsgnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, createrooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, memberjoinnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, memberquitnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, subresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, multinotify_),
  };
  ChatRoomDownToUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomDownToUser_descriptor_,
      ChatRoomDownToUser::default_instance_,
      ChatRoomDownToUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomDownToUser));
  ChatRoomPacket_descriptor_ = file->message_type(38);
  static const int ChatRoomPacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, to_server_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, to_user_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, client_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, appid_),
  };
  ChatRoomPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomPacket_descriptor_,
      ChatRoomPacket::default_instance_,
      ChatRoomPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatroom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRPair_descriptor_, &CRPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRUser_descriptor_, &CRUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoom_descriptor_, &ChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChatRoomRequest_descriptor_, &CreateChatRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChatRoomResponse_descriptor_, &CreateChatRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMultiChatRoomRequest_descriptor_, &CreateMultiChatRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMultiChatRoomResponse_descriptor_, &CreateMultiChatRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChatRoomDetailRequest_descriptor_, &GetChatRoomDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChatRoomDetailResponse_descriptor_, &GetChatRoomDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinChatRoomRequest_descriptor_, &ApplyJoinChatRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinChatRoomResponse_descriptor_, &ApplyJoinChatRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitChatRoomRequest_descriptor_, &QuitChatRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitChatRoomResponse_descriptor_, &QuitChatRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllGameRoomRequest_descriptor_, &QueryAllGameRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllGameRoomResponse_descriptor_, &QueryAllGameRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryChatRoomIDRequest_descriptor_, &QueryChatRoomIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryChatRoomIDResponse_descriptor_, &QueryChatRoomIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRoomIDRequest_descriptor_, &UpdateRoomIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRoomIDResponse_descriptor_, &UpdateRoomIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChatRoomRequest_descriptor_, &UpdateChatRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChatRoomResponse_descriptor_, &UpdateChatRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickChatRoomMemberRequest_descriptor_, &KickChatRoomMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickChatRoomMemberResponse_descriptor_, &KickChatRoomMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRoomToDBRequest_descriptor_, &SyncRoomToDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChatRoomNotify_descriptor_, &CreateChatRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberJoinChatRoomNotify_descriptor_, &MemberJoinChatRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberQuitChatRoomNotify_descriptor_, &MemberQuitChatRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickMemberNotify_descriptor_, &KickMemberNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChatRoomNotify_descriptor_, &UpdateChatRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomMessageRequest_descriptor_, &ChatRoomMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomMessageResponse_descriptor_, &ChatRoomMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomNewMsg_descriptor_, &ChatRoomNewMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomErrorMsg_descriptor_, &ChatRoomErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomMNotify_descriptor_, &ChatRoomMNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomUpToServer_descriptor_, &ChatRoomUpToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomDownToUser_descriptor_, &ChatRoomDownToUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomPacket_descriptor_, &ChatRoomPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatroom_2eproto() {
  delete CRPair::default_instance_;
  delete CRPair_reflection_;
  delete CRUser::default_instance_;
  delete CRUser_reflection_;
  delete ChatRoom::default_instance_;
  delete ChatRoom_reflection_;
  delete CreateChatRoomRequest::default_instance_;
  delete CreateChatRoomRequest_reflection_;
  delete CreateChatRoomResponse::default_instance_;
  delete CreateChatRoomResponse_reflection_;
  delete CreateMultiChatRoomRequest::default_instance_;
  delete CreateMultiChatRoomRequest_reflection_;
  delete CreateMultiChatRoomResponse::default_instance_;
  delete CreateMultiChatRoomResponse_reflection_;
  delete GetChatRoomDetailRequest::default_instance_;
  delete GetChatRoomDetailRequest_reflection_;
  delete GetChatRoomDetailResponse::default_instance_;
  delete GetChatRoomDetailResponse_reflection_;
  delete ApplyJoinChatRoomRequest::default_instance_;
  delete ApplyJoinChatRoomRequest_reflection_;
  delete ApplyJoinChatRoomResponse::default_instance_;
  delete ApplyJoinChatRoomResponse_reflection_;
  delete QuitChatRoomRequest::default_instance_;
  delete QuitChatRoomRequest_reflection_;
  delete QuitChatRoomResponse::default_instance_;
  delete QuitChatRoomResponse_reflection_;
  delete QueryAllGameRoomRequest::default_instance_;
  delete QueryAllGameRoomRequest_reflection_;
  delete QueryAllGameRoomResponse::default_instance_;
  delete QueryAllGameRoomResponse_reflection_;
  delete QueryChatRoomIDRequest::default_instance_;
  delete QueryChatRoomIDRequest_reflection_;
  delete QueryChatRoomIDResponse::default_instance_;
  delete QueryChatRoomIDResponse_reflection_;
  delete UpdateRoomIDRequest::default_instance_;
  delete UpdateRoomIDRequest_reflection_;
  delete UpdateRoomIDResponse::default_instance_;
  delete UpdateRoomIDResponse_reflection_;
  delete UpdateChatRoomRequest::default_instance_;
  delete UpdateChatRoomRequest_reflection_;
  delete UpdateChatRoomResponse::default_instance_;
  delete UpdateChatRoomResponse_reflection_;
  delete KickChatRoomMemberRequest::default_instance_;
  delete KickChatRoomMemberRequest_reflection_;
  delete KickChatRoomMemberResponse::default_instance_;
  delete KickChatRoomMemberResponse_reflection_;
  delete SyncRoomToDBRequest::default_instance_;
  delete SyncRoomToDBRequest_reflection_;
  delete CreateChatRoomNotify::default_instance_;
  delete CreateChatRoomNotify_reflection_;
  delete MemberJoinChatRoomNotify::default_instance_;
  delete MemberJoinChatRoomNotify_reflection_;
  delete MemberQuitChatRoomNotify::default_instance_;
  delete MemberQuitChatRoomNotify_reflection_;
  delete KickMemberNotify::default_instance_;
  delete KickMemberNotify_reflection_;
  delete UpdateChatRoomNotify::default_instance_;
  delete UpdateChatRoomNotify_reflection_;
  delete ChatRoomMessageRequest::default_instance_;
  delete ChatRoomMessageRequest_reflection_;
  delete ChatRoomMessageResponse::default_instance_;
  delete ChatRoomMessageResponse_reflection_;
  delete ChatRoomNewMsg::default_instance_;
  delete ChatRoomNewMsg_reflection_;
  delete ChatRoomErrorMsg::default_instance_;
  delete ChatRoomErrorMsg_reflection_;
  delete ChatRoomMNotify::default_instance_;
  delete ChatRoomMNotify_reflection_;
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete ChatRoomUpToServer::default_instance_;
  delete ChatRoomUpToServer_reflection_;
  delete ChatRoomDownToUser::default_instance_;
  delete ChatRoomDownToUser_reflection_;
  delete ChatRoomPacket::default_instance_;
  delete ChatRoomPacket_reflection_;
}

void protobuf_AddDesc_chatroom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016chatroom.proto\022\027qihoo.protocol.chatroo"
    "m\"$\n\006CRPair\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001(\014\""
    "\271\001\n\006CRUser\022\016\n\006userid\030\001 \001(\014\022\014\n\004name\030\002 \001(\t"
    "\0226\n\rpublicsetting\030\003 \003(\0132\037.qihoo.protocol"
    ".chatroom.CRPair\0227\n\016privatesetting\030\004 \003(\013"
    "2\037.qihoo.protocol.chatroom.CRPair\022\016\n\006sta"
    "tus\030\005 \001(\005\022\020\n\010userdata\030\006 \001(\014\"\373\002\n\010ChatRoom"
    "\022\016\n\006roomid\030\001 \002(\014\0220\n\007creater\030\002 \001(\0132\037.qiho"
    "o.protocol.chatroom.CRUser\022\014\n\004name\030\003 \001(\t"
    "\022\017\n\007version\030\004 \001(\004\022\020\n\010maxmsgid\030\005 \001(\004\022\025\n\rm"
    "emcountlimit\030\006 \001(\004\022\020\n\010roomtype\030\007 \001(\t\0223\n\n"
    "properties\030\010 \003(\0132\037.qihoo.protocol.chatro"
    "om.CRPair\0220\n\007members\030\t \003(\0132\037.qihoo.proto"
    "col.chatroom.CRUser\022\021\n\tblacklist\030\n \003(\014\022\016"
    "\n\006gameid\030\013 \001(\t\0224\n\013tempmembers\030\014 \003(\0132\037.qi"
    "hoo.protocol.chatroom.CRUser\022\023\n\013partnerd"
    "ata\030\r \001(\014\"\373\001\n\025CreateChatRoomRequest\022\016\n\006g"
    "ameid\030\001 \001(\t\022\020\n\010roomname\030\002 \001(\t\022\025\n\rmemcoun"
    "tlimit\030\003 \001(\004\022\020\n\010roomtype\030\004 \001(\t\0220\n\007member"
    "s\030\005 \003(\0132\037.qihoo.protocol.chatroom.CRUser"
    "\0220\n\007creater\030\006 \001(\0132\037.qihoo.protocol.chatr"
    "oom.CRUser\0223\n\nproperties\030\007 \003(\0132\037.qihoo.p"
    "rotocol.chatroom.CRPair\"I\n\026CreateChatRoo"
    "mResponse\022/\n\004room\030\001 \001(\0132!.qihoo.protocol"
    ".chatroom.ChatRoom\"\215\001\n\032CreateMultiChatRo"
    "omRequest\022=\n\005rooms\030\001 \003(\0132..qihoo.protoco"
    "l.chatroom.CreateChatRoomRequest\0220\n\007crea"
    "ter\030\002 \001(\0132\037.qihoo.protocol.chatroom.CRUs"
    "er\"\201\001\n\033CreateMultiChatRoomResponse\0220\n\005ro"
    "oms\030\001 \003(\0132!.qihoo.protocol.chatroom.Chat"
    "Room\0220\n\007creater\030\002 \001(\0132\037.qihoo.protocol.c"
    "hatroom.CRUser\"I\n\030GetChatRoomDetailReque"
    "st\022\016\n\006roomid\030\001 \002(\014\022\r\n\005index\030\002 \001(\005\022\016\n\006off"
    "set\030\003 \001(\005\"L\n\031GetChatRoomDetailResponse\022/"
    "\n\004room\030\001 \001(\0132!.qihoo.protocol.chatroom.C"
    "hatRoom\"\236\001\n\030ApplyJoinChatRoomRequest\022\016\n\006"
    "roomid\030\001 \002(\014\022/\n\004room\030\002 \001(\0132!.qihoo.proto"
    "col.chatroom.ChatRoom\022\023\n\013userid_type\030\003 \001"
    "(\005\022\020\n\010userdata\030\004 \001(\014\022\032\n\013no_userlist\030\005 \001("
    "\010:\005false\"e\n\031ApplyJoinChatRoomResponse\022/\n"
    "\004room\030\001 \001(\0132!.qihoo.protocol.chatroom.Ch"
    "atRoom\022\027\n\tpull_lost\030\002 \001(\010:\004true\"V\n\023QuitC"
    "hatRoomRequest\022\016\n\006roomid\030\001 \002(\014\022/\n\004room\030\002"
    " \001(\0132!.qihoo.protocol.chatroom.ChatRoom\""
    "G\n\024QuitChatRoomResponse\022/\n\004room\030\001 \001(\0132!."
    "qihoo.protocol.chatroom.ChatRoom\"\031\n\027Quer"
    "yAllGameRoomRequest\"L\n\030QueryAllGameRoomR"
    "esponse\0220\n\007maplist\030\001 \003(\0132\037.qihoo.protoco"
    "l.chatroom.CRPair\"(\n\026QueryChatRoomIDRequ"
    "est\022\016\n\006gameid\030\001 \002(\t\"9\n\027QueryChatRoomIDRe"
    "sponse\022\016\n\006roomid\030\001 \001(\014\022\016\n\006gameid\030\002 \001(\t\"5"
    "\n\023UpdateRoomIDRequest\022\016\n\006gameid\030\001 \002(\t\022\016\n"
    "\006roomid\030\002 \002(\014\"\026\n\024UpdateRoomIDResponse\"X\n"
    "\025UpdateChatRoomRequest\022\016\n\006roomid\030\001 \002(\014\022/"
    "\n\004room\030\002 \002(\0132!.qihoo.protocol.chatroom.C"
    "hatRoom\"I\n\026UpdateChatRoomResponse\022/\n\004roo"
    "m\030\001 \001(\0132!.qihoo.protocol.chatroom.ChatRo"
    "om\"\216\001\n\031KickChatRoomMemberRequest\022\016\n\006room"
    "id\030\001 \002(\014\0220\n\007members\030\002 \003(\0132\037.qihoo.protoc"
    "ol.chatroom.CRUser\022/\n\004room\030\003 \001(\0132!.qihoo"
    ".protocol.chatroom.ChatRoom\"M\n\032KickChatR"
    "oomMemberResponse\022/\n\004room\030\001 \001(\0132!.qihoo."
    "protocol.chatroom.ChatRoom\"%\n\023SyncRoomTo"
    "DBRequest\022\016\n\006roomid\030\001 \002(\014\"G\n\024CreateChatR"
    "oomNotify\022/\n\004room\030\001 \002(\0132!.qihoo.protocol"
    ".chatroom.ChatRoom\"K\n\030MemberJoinChatRoom"
    "Notify\022/\n\004room\030\001 \002(\0132!.qihoo.protocol.ch"
    "atroom.ChatRoom\"K\n\030MemberQuitChatRoomNot"
    "ify\022/\n\004room\030\001 \002(\0132!.qihoo.protocol.chatr"
    "oom.ChatRoom\"r\n\020KickMemberNotify\022/\n\004room"
    "\030\001 \002(\0132!.qihoo.protocol.chatroom.ChatRoo"
    "m\022-\n\004user\030\002 \001(\0132\037.qihoo.protocol.chatroo"
    "m.CRUser\"v\n\024UpdateChatRoomNotify\022/\n\004room"
    "\030\001 \002(\0132!.qihoo.protocol.chatroom.ChatRoo"
    "m\022-\n\004user\030\002 \001(\0132\037.qihoo.protocol.chatroo"
    "m.CRUser\"\272\004\n\026ChatRoomMessageRequest\022/\n\006s"
    "ender\030\001 \001(\0132\037.qihoo.protocol.chatroom.CR"
    "User\022\016\n\006roomid\030\002 \002(\014\022\017\n\007msgtype\030\003 \002(\005\022\022\n"
    "\nmsgcontent\030\004 \001(\014\022\027\n\017clientparameter\030\005 \001"
    "(\014\022\023\n\013clientcache\030\006 \001(\014\022C\n\014createnotify\030"
    "\007 \001(\0132-.qihoo.protocol.chatroom.CreateCh"
    "atRoomNotify\022E\n\njoinnotify\030\010 \001(\01321.qihoo"
    ".protocol.chatroom.MemberJoinChatRoomNot"
    "ify\022E\n\nquitnotify\030\t \001(\01321.qihoo.protocol"
    ".chatroom.MemberQuitChatRoomNotify\022=\n\nki"
    "cknotify\030\n \001(\0132).qihoo.protocol.chatroom"
    ".KickMemberNotify\022C\n\014updatenotify\030\013 \001(\0132"
    "-.qihoo.protocol.chatroom.UpdateChatRoom"
    "Notify\0225\n\014propertylist\030\014 \003(\0132\037.qihoo.pro"
    "tocol.chatroom.CRPair\"(\n\027ChatRoomMessage"
    "Response\022\r\n\005msgid\030\001 \001(\004\"\316\001\n\016ChatRoomNewM"
    "sg\022\016\n\006roomid\030\001 \002(\014\022/\n\006sender\030\002 \001(\0132\037.qih"
    "oo.protocol.chatroom.CRUser\022\017\n\007msgtype\030\003"
    " \001(\005\022\022\n\nmsgcontent\030\004 \001(\014\022\023\n\013regmemcount\030"
    "\005 \001(\005\022\020\n\010memcount\030\006 \001(\005\022\r\n\005msgid\030\007 \001(\r\022\r"
    "\n\005maxid\030\010 \001(\r\022\021\n\ttimestamp\030\t \001(\004\"G\n\020Chat"
    "RoomErrorMsg\022\016\n\006roomid\030\001 \002(\014\022\020\n\010clientsn"
    "\030\002 \002(\004\022\021\n\terrorcode\030\003 \001(\005\"T\n\017ChatRoomMNo"
    "tify\022\014\n\004type\030\001 \002(\005\022\014\n\004data\030\002 \002(\014\022\023\n\013regm"
    "emcount\030\003 \001(\005\022\020\n\010memcount\030\004 \001(\005\"6\n\020Subsc"
    "ribeRequest\022\016\n\006roomid\030\001 \002(\014\022\022\n\003sub\030\002 \001(\010"
    ":\005false\"0\n\021SubscribeResponse\022\016\n\006roomid\030\001"
    " \002(\014\022\013\n\003sub\030\002 \001(\010\"\353\007\n\022ChatRoomUpToServer"
    "\022\023\n\013payloadtype\030\001 \002(\r\022I\n\021createchatroomr"
    "eq\030\002 \001(\0132..qihoo.protocol.chatroom.Creat"
    "eChatRoomRequest\022M\n\022getchatroominforeq\030\003"
    " \001(\01321.qihoo.protocol.chatroom.GetChatRo"
    "omDetailRequest\022O\n\024applyjoinchatroomreq\030"
    "\004 \001(\01321.qihoo.protocol.chatroom.ApplyJoi"
    "nChatRoomRequest\022E\n\017quitchatroomreq\030\005 \001("
    "\0132,.qihoo.protocol.chatroom.QuitChatRoom"
    "Request\022I\n\021updatechatroomreq\030\006 \001(\0132..qih"
    "oo.protocol.chatroom.UpdateChatRoomReque"
    "st\022I\n\rkickmemberreq\030\007 \001(\01322.qihoo.protoc"
    "ol.chatroom.KickChatRoomMemberRequest\022K\n"
    "\022querychatroomidreq\030\010 \001(\0132/.qihoo.protoc"
    "ol.chatroom.QueryChatRoomIDRequest\022E\n\017up"
    "dategameidreq\030\t \001(\0132,.qihoo.protocol.cha"
    "troom.UpdateRoomIDRequest\022M\n\023queryallgam"
    "eroomreq\030\n \001(\01320.qihoo.protocol.chatroom"
    ".QueryAllGameRoomRequest\022K\n\022chatroommess"
    "agereq\030\013 \001(\0132/.qihoo.protocol.chatroom.C"
    "hatRoomMessageRequest\022H\n\013createrooms\030\014 \001"
    "(\01323.qihoo.protocol.chatroom.CreateMulti"
    "ChatRoomRequest\022C\n\rsyncroomtodba\030\r \001(\0132,"
    ".qihoo.protocol.chatroom.SyncRoomToDBReq"
    "uest\0229\n\006subreq\030\016 \001(\0132).qihoo.protocol.ch"
    "atroom.SubscribeRequest\"\271\n\n\022ChatRoomDown"
    "ToUser\022\016\n\006result\030\001 \002(\005\022\023\n\013payloadtype\030\002 "
    "\002(\r\022K\n\022createchatroomresp\030\003 \001(\0132/.qihoo."
    "protocol.chatroom.CreateChatRoomResponse"
    "\022O\n\023getchatroominforesp\030\004 \001(\01322.qihoo.pr"
    "otocol.chatroom.GetChatRoomDetailRespons"
    "e\022Q\n\025applyjoinchatroomresp\030\005 \001(\01322.qihoo"
    ".protocol.chatroom.ApplyJoinChatRoomResp"
    "onse\022G\n\020quitchatroomresp\030\006 \001(\0132-.qihoo.p"
    "rotocol.chatroom.QuitChatRoomResponse\022K\n"
    "\022updatechatroomresp\030\007 \001(\0132/.qihoo.protoc"
    "ol.chatroom.UpdateChatRoomResponse\022K\n\016ki"
    "ckmemberresp\030\010 \001(\01323.qihoo.protocol.chat"
    "room.KickChatRoomMemberResponse\022M\n\023query"
    "chatroomidresp\030\t \001(\01320.qihoo.protocol.ch"
    "atroom.QueryChatRoomIDResponse\022G\n\020update"
    "gameidresp\030\n \001(\0132-.qihoo.protocol.chatro"
    "om.UpdateRoomIDResponse\022O\n\024queryallgamer"
    "oomresp\030\013 \001(\01321.qihoo.protocol.chatroom."
    "QueryAllGameRoomResponse\022M\n\023chatroommess"
    "ageresp\030\014 \001(\01320.qihoo.protocol.chatroom."
    "ChatRoomMessageResponse\022=\n\014newmsgnotify\030"
    "\r \001(\0132\'.qihoo.protocol.chatroom.ChatRoom"
    "NewMsg\022A\n\016errormsgnotify\030\016 \001(\0132).qihoo.p"
    "rotocol.chatroom.ChatRoomErrorMsg\022I\n\013cre"
    "aterooms\030\017 \001(\01324.qihoo.protocol.chatroom"
    ".CreateMultiChatRoomResponse\022K\n\020memberjo"
    "innotify\030\020 \001(\01321.qihoo.protocol.chatroom"
    ".MemberJoinChatRoomNotify\022K\n\020memberquitn"
    "otify\030\021 \001(\01321.qihoo.protocol.chatroom.Me"
    "mberQuitChatRoomNotify\022;\n\007subresp\030\022 \001(\0132"
    "*.qihoo.protocol.chatroom.SubscribeRespo"
    "nse\022\016\n\006reason\030d \001(\014\022>\n\013multinotify\030\310\001 \003("
    "\0132(.qihoo.protocol.chatroom.ChatRoomMNot"
    "ify\"\330\001\n\016ChatRoomPacket\022\016\n\006roomid\030\001 \002(\014\022C"
    "\n\016to_server_data\030\002 \001(\0132+.qihoo.protocol."
    "chatroom.ChatRoomUpToServer\022A\n\014to_user_d"
    "ata\030\003 \001(\0132+.qihoo.protocol.chatroom.Chat"
    "RoomDownToUser\022\014\n\004uuid\030\004 \001(\t\022\021\n\tclient_s"
    "n\030\005 \001(\004\022\r\n\005appid\030\006 \001(\rB5\n)com.qihoo.cont"
    "act.cloud.protocol.messagesB\010ChatRoom", 6717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatroom.proto", &protobuf_RegisterTypes);
  CRPair::default_instance_ = new CRPair();
  CRUser::default_instance_ = new CRUser();
  ChatRoom::default_instance_ = new ChatRoom();
  CreateChatRoomRequest::default_instance_ = new CreateChatRoomRequest();
  CreateChatRoomResponse::default_instance_ = new CreateChatRoomResponse();
  CreateMultiChatRoomRequest::default_instance_ = new CreateMultiChatRoomRequest();
  CreateMultiChatRoomResponse::default_instance_ = new CreateMultiChatRoomResponse();
  GetChatRoomDetailRequest::default_instance_ = new GetChatRoomDetailRequest();
  GetChatRoomDetailResponse::default_instance_ = new GetChatRoomDetailResponse();
  ApplyJoinChatRoomRequest::default_instance_ = new ApplyJoinChatRoomRequest();
  ApplyJoinChatRoomResponse::default_instance_ = new ApplyJoinChatRoomResponse();
  QuitChatRoomRequest::default_instance_ = new QuitChatRoomRequest();
  QuitChatRoomResponse::default_instance_ = new QuitChatRoomResponse();
  QueryAllGameRoomRequest::default_instance_ = new QueryAllGameRoomRequest();
  QueryAllGameRoomResponse::default_instance_ = new QueryAllGameRoomResponse();
  QueryChatRoomIDRequest::default_instance_ = new QueryChatRoomIDRequest();
  QueryChatRoomIDResponse::default_instance_ = new QueryChatRoomIDResponse();
  UpdateRoomIDRequest::default_instance_ = new UpdateRoomIDRequest();
  UpdateRoomIDResponse::default_instance_ = new UpdateRoomIDResponse();
  UpdateChatRoomRequest::default_instance_ = new UpdateChatRoomRequest();
  UpdateChatRoomResponse::default_instance_ = new UpdateChatRoomResponse();
  KickChatRoomMemberRequest::default_instance_ = new KickChatRoomMemberRequest();
  KickChatRoomMemberResponse::default_instance_ = new KickChatRoomMemberResponse();
  SyncRoomToDBRequest::default_instance_ = new SyncRoomToDBRequest();
  CreateChatRoomNotify::default_instance_ = new CreateChatRoomNotify();
  MemberJoinChatRoomNotify::default_instance_ = new MemberJoinChatRoomNotify();
  MemberQuitChatRoomNotify::default_instance_ = new MemberQuitChatRoomNotify();
  KickMemberNotify::default_instance_ = new KickMemberNotify();
  UpdateChatRoomNotify::default_instance_ = new UpdateChatRoomNotify();
  ChatRoomMessageRequest::default_instance_ = new ChatRoomMessageRequest();
  ChatRoomMessageResponse::default_instance_ = new ChatRoomMessageResponse();
  ChatRoomNewMsg::default_instance_ = new ChatRoomNewMsg();
  ChatRoomErrorMsg::default_instance_ = new ChatRoomErrorMsg();
  ChatRoomMNotify::default_instance_ = new ChatRoomMNotify();
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  ChatRoomUpToServer::default_instance_ = new ChatRoomUpToServer();
  ChatRoomDownToUser::default_instance_ = new ChatRoomDownToUser();
  ChatRoomPacket::default_instance_ = new ChatRoomPacket();
  CRPair::default_instance_->InitAsDefaultInstance();
  CRUser::default_instance_->InitAsDefaultInstance();
  ChatRoom::default_instance_->InitAsDefaultInstance();
  CreateChatRoomRequest::default_instance_->InitAsDefaultInstance();
  CreateChatRoomResponse::default_instance_->InitAsDefaultInstance();
  CreateMultiChatRoomRequest::default_instance_->InitAsDefaultInstance();
  CreateMultiChatRoomResponse::default_instance_->InitAsDefaultInstance();
  GetChatRoomDetailRequest::default_instance_->InitAsDefaultInstance();
  GetChatRoomDetailResponse::default_instance_->InitAsDefaultInstance();
  ApplyJoinChatRoomRequest::default_instance_->InitAsDefaultInstance();
  ApplyJoinChatRoomResponse::default_instance_->InitAsDefaultInstance();
  QuitChatRoomRequest::default_instance_->InitAsDefaultInstance();
  QuitChatRoomResponse::default_instance_->InitAsDefaultInstance();
  QueryAllGameRoomRequest::default_instance_->InitAsDefaultInstance();
  QueryAllGameRoomResponse::default_instance_->InitAsDefaultInstance();
  QueryChatRoomIDRequest::default_instance_->InitAsDefaultInstance();
  QueryChatRoomIDResponse::default_instance_->InitAsDefaultInstance();
  UpdateRoomIDRequest::default_instance_->InitAsDefaultInstance();
  UpdateRoomIDResponse::default_instance_->InitAsDefaultInstance();
  UpdateChatRoomRequest::default_instance_->InitAsDefaultInstance();
  UpdateChatRoomResponse::default_instance_->InitAsDefaultInstance();
  KickChatRoomMemberRequest::default_instance_->InitAsDefaultInstance();
  KickChatRoomMemberResponse::default_instance_->InitAsDefaultInstance();
  SyncRoomToDBRequest::default_instance_->InitAsDefaultInstance();
  CreateChatRoomNotify::default_instance_->InitAsDefaultInstance();
  MemberJoinChatRoomNotify::default_instance_->InitAsDefaultInstance();
  MemberQuitChatRoomNotify::default_instance_->InitAsDefaultInstance();
  KickMemberNotify::default_instance_->InitAsDefaultInstance();
  UpdateChatRoomNotify::default_instance_->InitAsDefaultInstance();
  ChatRoomMessageRequest::default_instance_->InitAsDefaultInstance();
  ChatRoomMessageResponse::default_instance_->InitAsDefaultInstance();
  ChatRoomNewMsg::default_instance_->InitAsDefaultInstance();
  ChatRoomErrorMsg::default_instance_->InitAsDefaultInstance();
  ChatRoomMNotify::default_instance_->InitAsDefaultInstance();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  ChatRoomUpToServer::default_instance_->InitAsDefaultInstance();
  ChatRoomDownToUser::default_instance_->InitAsDefaultInstance();
  ChatRoomPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatroom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatroom_2eproto {
  StaticDescriptorInitializer_chatroom_2eproto() {
    protobuf_AddDesc_chatroom_2eproto();
  }
} static_descriptor_initializer_chatroom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CRPair::kKeyFieldNumber;
const int CRPair::kValueFieldNumber;
#endif  // !_MSC_VER

CRPair::CRPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CRPair)
}

void CRPair::InitAsDefaultInstance() {
}

CRPair::CRPair(const CRPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CRPair)
}

void CRPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRPair::~CRPair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CRPair)
  SharedDtor();
}

void CRPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CRPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRPair_descriptor_;
}

const CRPair& CRPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CRPair* CRPair::default_instance_ = NULL;

CRPair* CRPair::New() const {
  return new CRPair;
}

void CRPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CRPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CRPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CRPair)
  return false;
#undef DO_
}

void CRPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CRPair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CRPair)
}

::google::protobuf::uint8* CRPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CRPair)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CRPair)
  return target;
}

int CRPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRPair::MergeFrom(const CRPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRPair::CopyFrom(const CRPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CRPair::Swap(CRPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRPair_descriptor_;
  metadata.reflection = CRPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRUser::kUseridFieldNumber;
const int CRUser::kNameFieldNumber;
const int CRUser::kPublicsettingFieldNumber;
const int CRUser::kPrivatesettingFieldNumber;
const int CRUser::kStatusFieldNumber;
const int CRUser::kUserdataFieldNumber;
#endif  // !_MSC_VER

CRUser::CRUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CRUser)
}

void CRUser::InitAsDefaultInstance() {
}

CRUser::CRUser(const CRUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CRUser)
}

void CRUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRUser::~CRUser() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CRUser)
  SharedDtor();
}

void CRUser::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void CRUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRUser_descriptor_;
}

const CRUser& CRUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CRUser* CRUser::default_instance_ = NULL;

CRUser* CRUser::New() const {
  return new CRUser;
}

void CRUser::Clear() {
  if (_has_bits_[0 / 32] & 51) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    status_ = 0;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userdata_->clear();
      }
    }
  }
  publicsetting_.Clear();
  privatesetting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CRUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publicsetting;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
      case 3: {
        if (tag == 26) {
         parse_publicsetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publicsetting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publicsetting;
        if (input->ExpectTag(34)) goto parse_privatesetting;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
      case 4: {
        if (tag == 34) {
         parse_privatesetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privatesetting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_privatesetting;
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_userdata;
        break;
      }

      // optional bytes userdata = 6;
      case 6: {
        if (tag == 50) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CRUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CRUser)
  return false;
#undef DO_
}

void CRUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CRUser)
  // optional bytes userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  for (int i = 0; i < this->publicsetting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->publicsetting(i), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  for (int i = 0; i < this->privatesetting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->privatesetting(i), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional bytes userdata = 6;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CRUser)
}

::google::protobuf::uint8* CRUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CRUser)
  // optional bytes userid = 1;
  if (has_userid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  for (int i = 0; i < this->publicsetting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->publicsetting(i), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  for (int i = 0; i < this->privatesetting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->privatesetting(i), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional bytes userdata = 6;
  if (has_userdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CRUser)
  return target;
}

int CRUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional bytes userdata = 6;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

  }
  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  total_size += 1 * this->publicsetting_size();
  for (int i = 0; i < this->publicsetting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publicsetting(i));
  }

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  total_size += 1 * this->privatesetting_size();
  for (int i = 0; i < this->privatesetting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privatesetting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRUser::MergeFrom(const CRUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  publicsetting_.MergeFrom(from.publicsetting_);
  privatesetting_.MergeFrom(from.privatesetting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRUser::CopyFrom(const CRUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRUser::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->publicsetting())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->privatesetting())) return false;
  return true;
}

void CRUser::Swap(CRUser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    publicsetting_.Swap(&other->publicsetting_);
    privatesetting_.Swap(&other->privatesetting_);
    std::swap(status_, other->status_);
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRUser_descriptor_;
  metadata.reflection = CRUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoom::kRoomidFieldNumber;
const int ChatRoom::kCreaterFieldNumber;
const int ChatRoom::kNameFieldNumber;
const int ChatRoom::kVersionFieldNumber;
const int ChatRoom::kMaxmsgidFieldNumber;
const int ChatRoom::kMemcountlimitFieldNumber;
const int ChatRoom::kRoomtypeFieldNumber;
const int ChatRoom::kPropertiesFieldNumber;
const int ChatRoom::kMembersFieldNumber;
const int ChatRoom::kBlacklistFieldNumber;
const int ChatRoom::kGameidFieldNumber;
const int ChatRoom::kTempmembersFieldNumber;
const int ChatRoom::kPartnerdataFieldNumber;
#endif  // !_MSC_VER

ChatRoom::ChatRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoom)
}

void ChatRoom::InitAsDefaultInstance() {
  creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

ChatRoom::ChatRoom(const ChatRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoom)
}

void ChatRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creater_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  maxmsgid_ = GOOGLE_ULONGLONG(0);
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnerdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoom::~ChatRoom() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoom)
  SharedDtor();
}

void ChatRoom::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtype_;
  }
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (partnerdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partnerdata_;
  }
  if (this != default_instance_) {
    delete creater_;
  }
}

void ChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoom_descriptor_;
}

const ChatRoom& ChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoom* ChatRoom::default_instance_ = NULL;

ChatRoom* ChatRoom::New() const {
  return new ChatRoom;
}

void ChatRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(version_, memcountlimit_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_creater()) {
      if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_roomtype()) {
      if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomtype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 5120) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
    if (has_partnerdata()) {
      if (partnerdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        partnerdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  properties_.Clear();
  members_.Clear();
  blacklist_.Clear();
  tempmembers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creater;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 2;
      case 2: {
        if (tag == 18) {
         parse_creater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional uint64 version = 4;
      case 4: {
        if (tag == 32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxmsgid;
        break;
      }

      // optional uint64 maxmsgid = 5;
      case 5: {
        if (tag == 40) {
         parse_maxmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxmsgid_)));
          set_has_maxmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_memcountlimit;
        break;
      }

      // optional uint64 memcountlimit = 6;
      case 6: {
        if (tag == 48) {
         parse_memcountlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memcountlimit_)));
          set_has_memcountlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_roomtype;
        break;
      }

      // optional string roomtype = 7;
      case 7: {
        if (tag == 58) {
         parse_roomtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_properties;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
      case 8: {
        if (tag == 66) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_properties;
        if (input->ExpectTag(74)) goto parse_members;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser members = 9;
      case 9: {
        if (tag == 74) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_members;
        if (input->ExpectTag(82)) goto parse_blacklist;
        break;
      }

      // repeated bytes blacklist = 10;
      case 10: {
        if (tag == 82) {
         parse_blacklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_blacklist;
        if (input->ExpectTag(90)) goto parse_gameid;
        break;
      }

      // optional string gameid = 11;
      case 11: {
        if (tag == 90) {
         parse_gameid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_tempmembers;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
      case 12: {
        if (tag == 98) {
         parse_tempmembers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tempmembers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_tempmembers;
        if (input->ExpectTag(106)) goto parse_partnerdata;
        break;
      }

      // optional bytes partnerdata = 13;
      case 13: {
        if (tag == 106) {
         parse_partnerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_partnerdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoom)
  return false;
#undef DO_
}

void ChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoom)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creater(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->version(), output);
  }

  // optional uint64 maxmsgid = 5;
  if (has_maxmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->maxmsgid(), output);
  }

  // optional uint64 memcountlimit = 6;
  if (has_memcountlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->memcountlimit(), output);
  }

  // optional string roomtype = 7;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->roomtype(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->properties(i), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }

  // repeated bytes blacklist = 10;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->blacklist(i), output);
  }

  // optional string gameid = 11;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gameid(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  for (int i = 0; i < this->tempmembers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tempmembers(i), output);
  }

  // optional bytes partnerdata = 13;
  if (has_partnerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->partnerdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoom)
}

::google::protobuf::uint8* ChatRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoom)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creater(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->version(), target);
  }

  // optional uint64 maxmsgid = 5;
  if (has_maxmsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->maxmsgid(), target);
  }

  // optional uint64 memcountlimit = 6;
  if (has_memcountlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->memcountlimit(), target);
  }

  // optional string roomtype = 7;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->roomtype(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->properties(i), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->members(i), target);
  }

  // repeated bytes blacklist = 10;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->blacklist(i), target);
  }

  // optional string gameid = 11;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gameid(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  for (int i = 0; i < this->tempmembers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tempmembers(i), target);
  }

  // optional bytes partnerdata = 13;
  if (has_partnerdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->partnerdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoom)
  return target;
}

int ChatRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional .qihoo.protocol.chatroom.CRUser creater = 2;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creater());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint64 maxmsgid = 5;
    if (has_maxmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxmsgid());
    }

    // optional uint64 memcountlimit = 6;
    if (has_memcountlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memcountlimit());
    }

    // optional string roomtype = 7;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string gameid = 11;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional bytes partnerdata = 13;
    if (has_partnerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->partnerdata());
    }

  }
  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated bytes blacklist = 10;
  total_size += 1 * this->blacklist_size();
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->blacklist(i));
  }

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  total_size += 1 * this->tempmembers_size();
  for (int i = 0; i < this->tempmembers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tempmembers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoom::MergeFrom(const ChatRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  members_.MergeFrom(from.members_);
  blacklist_.MergeFrom(from.blacklist_);
  tempmembers_.MergeFrom(from.tempmembers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_creater()) {
      mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_maxmsgid()) {
      set_maxmsgid(from.maxmsgid());
    }
    if (from.has_memcountlimit()) {
      set_memcountlimit(from.memcountlimit());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_partnerdata()) {
      set_partnerdata(from.partnerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoom::CopyFrom(const ChatRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_creater()) {
    if (!this->creater().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tempmembers())) return false;
  return true;
}

void ChatRoom::Swap(ChatRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(creater_, other->creater_);
    std::swap(name_, other->name_);
    std::swap(version_, other->version_);
    std::swap(maxmsgid_, other->maxmsgid_);
    std::swap(memcountlimit_, other->memcountlimit_);
    std::swap(roomtype_, other->roomtype_);
    properties_.Swap(&other->properties_);
    members_.Swap(&other->members_);
    blacklist_.Swap(&other->blacklist_);
    std::swap(gameid_, other->gameid_);
    tempmembers_.Swap(&other->tempmembers_);
    std::swap(partnerdata_, other->partnerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoom_descriptor_;
  metadata.reflection = ChatRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChatRoomRequest::kGameidFieldNumber;
const int CreateChatRoomRequest::kRoomnameFieldNumber;
const int CreateChatRoomRequest::kMemcountlimitFieldNumber;
const int CreateChatRoomRequest::kRoomtypeFieldNumber;
const int CreateChatRoomRequest::kMembersFieldNumber;
const int CreateChatRoomRequest::kCreaterFieldNumber;
const int CreateChatRoomRequest::kPropertiesFieldNumber;
#endif  // !_MSC_VER

CreateChatRoomRequest::CreateChatRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateChatRoomRequest)
}

void CreateChatRoomRequest::InitAsDefaultInstance() {
  creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

CreateChatRoomRequest::CreateChatRoomRequest(const CreateChatRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateChatRoomRequest)
}

void CreateChatRoomRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creater_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChatRoomRequest::~CreateChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateChatRoomRequest)
  SharedDtor();
}

void CreateChatRoomRequest::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtype_;
  }
  if (this != default_instance_) {
    delete creater_;
  }
}

void CreateChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChatRoomRequest_descriptor_;
}

const CreateChatRoomRequest& CreateChatRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CreateChatRoomRequest* CreateChatRoomRequest::default_instance_ = NULL;

CreateChatRoomRequest* CreateChatRoomRequest::New() const {
  return new CreateChatRoomRequest;
}

void CreateChatRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    memcountlimit_ = GOOGLE_ULONGLONG(0);
    if (has_roomtype()) {
      if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomtype_->clear();
      }
    }
    if (has_creater()) {
      if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  members_.Clear();
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomname;
        break;
      }

      // optional string roomname = 2;
      case 2: {
        if (tag == 18) {
         parse_roomname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memcountlimit;
        break;
      }

      // optional uint64 memcountlimit = 3;
      case 3: {
        if (tag == 24) {
         parse_memcountlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memcountlimit_)));
          set_has_memcountlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomtype;
        break;
      }

      // optional string roomtype = 4;
      case 4: {
        if (tag == 34) {
         parse_roomtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser members = 5;
      case 5: {
        if (tag == 42) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        if (input->ExpectTag(50)) goto parse_creater;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 6;
      case 6: {
        if (tag == 50) {
         parse_creater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_properties;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
      case 7: {
        if (tag == 58) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_properties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateChatRoomRequest)
  return false;
#undef DO_
}

void CreateChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  // optional string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  // optional string roomname = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // optional uint64 memcountlimit = 3;
  if (has_memcountlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memcountlimit(), output);
  }

  // optional string roomtype = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomtype(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 6;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->creater(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateChatRoomRequest)
}

::google::protobuf::uint8* CreateChatRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  // optional string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // optional string roomname = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // optional uint64 memcountlimit = 3;
  if (has_memcountlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memcountlimit(), target);
  }

  // optional string roomtype = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomtype(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->members(i), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 6;
  if (has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->creater(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateChatRoomRequest)
  return target;
}

int CreateChatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string roomname = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional uint64 memcountlimit = 3;
    if (has_memcountlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memcountlimit());
    }

    // optional string roomtype = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }

    // optional .qihoo.protocol.chatroom.CRUser creater = 6;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creater());
    }

  }
  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChatRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChatRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChatRoomRequest::MergeFrom(const CreateChatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_memcountlimit()) {
      set_memcountlimit(from.memcountlimit());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_creater()) {
      mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomRequest::CopyFrom(const CreateChatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (has_creater()) {
    if (!this->creater().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void CreateChatRoomRequest::Swap(CreateChatRoomRequest* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(roomname_, other->roomname_);
    std::swap(memcountlimit_, other->memcountlimit_);
    std::swap(roomtype_, other->roomtype_);
    members_.Swap(&other->members_);
    std::swap(creater_, other->creater_);
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChatRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChatRoomRequest_descriptor_;
  metadata.reflection = CreateChatRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChatRoomResponse::kRoomFieldNumber;
#endif  // !_MSC_VER

CreateChatRoomResponse::CreateChatRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateChatRoomResponse)
}

void CreateChatRoomResponse::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

CreateChatRoomResponse::CreateChatRoomResponse(const CreateChatRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateChatRoomResponse)
}

void CreateChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChatRoomResponse::~CreateChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateChatRoomResponse)
  SharedDtor();
}

void CreateChatRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void CreateChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChatRoomResponse_descriptor_;
}

const CreateChatRoomResponse& CreateChatRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CreateChatRoomResponse* CreateChatRoomResponse::default_instance_ = NULL;

CreateChatRoomResponse* CreateChatRoomResponse::New() const {
  return new CreateChatRoomResponse;
}

void CreateChatRoomResponse::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateChatRoomResponse)
  return false;
#undef DO_
}

void CreateChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateChatRoomResponse)
}

::google::protobuf::uint8* CreateChatRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateChatRoomResponse)
  return target;
}

int CreateChatRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChatRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChatRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChatRoomResponse::MergeFrom(const CreateChatRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomResponse::CopyFrom(const CreateChatRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomResponse::IsInitialized() const {

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomResponse::Swap(CreateChatRoomResponse* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChatRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChatRoomResponse_descriptor_;
  metadata.reflection = CreateChatRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMultiChatRoomRequest::kRoomsFieldNumber;
const int CreateMultiChatRoomRequest::kCreaterFieldNumber;
#endif  // !_MSC_VER

CreateMultiChatRoomRequest::CreateMultiChatRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
}

void CreateMultiChatRoomRequest::InitAsDefaultInstance() {
  creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

CreateMultiChatRoomRequest::CreateMultiChatRoomRequest(const CreateMultiChatRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
}

void CreateMultiChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  creater_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMultiChatRoomRequest::~CreateMultiChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  SharedDtor();
}

void CreateMultiChatRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete creater_;
  }
}

void CreateMultiChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMultiChatRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMultiChatRoomRequest_descriptor_;
}

const CreateMultiChatRoomRequest& CreateMultiChatRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CreateMultiChatRoomRequest* CreateMultiChatRoomRequest::default_instance_ = NULL;

CreateMultiChatRoomRequest* CreateMultiChatRoomRequest::New() const {
  return new CreateMultiChatRoomRequest;
}

void CreateMultiChatRoomRequest::Clear() {
  if (has_creater()) {
    if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMultiChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
      case 1: {
        if (tag == 10) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectTag(18)) goto parse_creater;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 2;
      case 2: {
        if (tag == 18) {
         parse_creater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  return false;
#undef DO_
}

void CreateMultiChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creater(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
}

::google::protobuf::uint8* CreateMultiChatRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creater(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  return target;
}

int CreateMultiChatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .qihoo.protocol.chatroom.CRUser creater = 2;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creater());
    }

  }
  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMultiChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMultiChatRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMultiChatRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMultiChatRoomRequest::MergeFrom(const CreateMultiChatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_creater()) {
      mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMultiChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMultiChatRoomRequest::CopyFrom(const CreateMultiChatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMultiChatRoomRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rooms())) return false;
  if (has_creater()) {
    if (!this->creater().IsInitialized()) return false;
  }
  return true;
}

void CreateMultiChatRoomRequest::Swap(CreateMultiChatRoomRequest* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(creater_, other->creater_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMultiChatRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMultiChatRoomRequest_descriptor_;
  metadata.reflection = CreateMultiChatRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMultiChatRoomResponse::kRoomsFieldNumber;
const int CreateMultiChatRoomResponse::kCreaterFieldNumber;
#endif  // !_MSC_VER

CreateMultiChatRoomResponse::CreateMultiChatRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
}

void CreateMultiChatRoomResponse::InitAsDefaultInstance() {
  creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

CreateMultiChatRoomResponse::CreateMultiChatRoomResponse(const CreateMultiChatRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
}

void CreateMultiChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  creater_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMultiChatRoomResponse::~CreateMultiChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  SharedDtor();
}

void CreateMultiChatRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete creater_;
  }
}

void CreateMultiChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMultiChatRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMultiChatRoomResponse_descriptor_;
}

const CreateMultiChatRoomResponse& CreateMultiChatRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CreateMultiChatRoomResponse* CreateMultiChatRoomResponse::default_instance_ = NULL;

CreateMultiChatRoomResponse* CreateMultiChatRoomResponse::New() const {
  return new CreateMultiChatRoomResponse;
}

void CreateMultiChatRoomResponse::Clear() {
  if (has_creater()) {
    if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMultiChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
      case 1: {
        if (tag == 10) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectTag(18)) goto parse_creater;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 2;
      case 2: {
        if (tag == 18) {
         parse_creater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  return false;
#undef DO_
}

void CreateMultiChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creater(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
}

::google::protobuf::uint8* CreateMultiChatRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creater(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  return target;
}

int CreateMultiChatRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .qihoo.protocol.chatroom.CRUser creater = 2;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creater());
    }

  }
  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMultiChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMultiChatRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMultiChatRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMultiChatRoomResponse::MergeFrom(const CreateMultiChatRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_creater()) {
      mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMultiChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMultiChatRoomResponse::CopyFrom(const CreateMultiChatRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMultiChatRoomResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rooms())) return false;
  if (has_creater()) {
    if (!this->creater().IsInitialized()) return false;
  }
  return true;
}

void CreateMultiChatRoomResponse::Swap(CreateMultiChatRoomResponse* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(creater_, other->creater_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMultiChatRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMultiChatRoomResponse_descriptor_;
  metadata.reflection = CreateMultiChatRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChatRoomDetailRequest::kRoomidFieldNumber;
const int GetChatRoomDetailRequest::kIndexFieldNumber;
const int GetChatRoomDetailRequest::kOffsetFieldNumber;
#endif  // !_MSC_VER

GetChatRoomDetailRequest::GetChatRoomDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
}

void GetChatRoomDetailRequest::InitAsDefaultInstance() {
}

GetChatRoomDetailRequest::GetChatRoomDetailRequest(const GetChatRoomDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
}

void GetChatRoomDetailRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChatRoomDetailRequest::~GetChatRoomDetailRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  SharedDtor();
}

void GetChatRoomDetailRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void GetChatRoomDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChatRoomDetailRequest_descriptor_;
}

const GetChatRoomDetailRequest& GetChatRoomDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

GetChatRoomDetailRequest* GetChatRoomDetailRequest::default_instance_ = NULL;

GetChatRoomDetailRequest* GetChatRoomDetailRequest::New() const {
  return new GetChatRoomDetailRequest;
}

void GetChatRoomDetailRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetChatRoomDetailRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, offset_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChatRoomDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  return false;
#undef DO_
}

void GetChatRoomDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
}

::google::protobuf::uint8* GetChatRoomDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  return target;
}

int GetChatRoomDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChatRoomDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChatRoomDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChatRoomDetailRequest::MergeFrom(const GetChatRoomDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChatRoomDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomDetailRequest::CopyFrom(const GetChatRoomDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetChatRoomDetailRequest::Swap(GetChatRoomDetailRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(index_, other->index_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChatRoomDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChatRoomDetailRequest_descriptor_;
  metadata.reflection = GetChatRoomDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChatRoomDetailResponse::kRoomFieldNumber;
#endif  // !_MSC_VER

GetChatRoomDetailResponse::GetChatRoomDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
}

void GetChatRoomDetailResponse::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

GetChatRoomDetailResponse::GetChatRoomDetailResponse(const GetChatRoomDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
}

void GetChatRoomDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChatRoomDetailResponse::~GetChatRoomDetailResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  SharedDtor();
}

void GetChatRoomDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void GetChatRoomDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChatRoomDetailResponse_descriptor_;
}

const GetChatRoomDetailResponse& GetChatRoomDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

GetChatRoomDetailResponse* GetChatRoomDetailResponse::default_instance_ = NULL;

GetChatRoomDetailResponse* GetChatRoomDetailResponse::New() const {
  return new GetChatRoomDetailResponse;
}

void GetChatRoomDetailResponse::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChatRoomDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  return false;
#undef DO_
}

void GetChatRoomDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
}

::google::protobuf::uint8* GetChatRoomDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  return target;
}

int GetChatRoomDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChatRoomDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChatRoomDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChatRoomDetailResponse::MergeFrom(const GetChatRoomDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChatRoomDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomDetailResponse::CopyFrom(const GetChatRoomDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomDetailResponse::IsInitialized() const {

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomDetailResponse::Swap(GetChatRoomDetailResponse* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChatRoomDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChatRoomDetailResponse_descriptor_;
  metadata.reflection = GetChatRoomDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinChatRoomRequest::kRoomidFieldNumber;
const int ApplyJoinChatRoomRequest::kRoomFieldNumber;
const int ApplyJoinChatRoomRequest::kUseridTypeFieldNumber;
const int ApplyJoinChatRoomRequest::kUserdataFieldNumber;
const int ApplyJoinChatRoomRequest::kNoUserlistFieldNumber;
#endif  // !_MSC_VER

ApplyJoinChatRoomRequest::ApplyJoinChatRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
}

void ApplyJoinChatRoomRequest::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

ApplyJoinChatRoomRequest::ApplyJoinChatRoomRequest(const ApplyJoinChatRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
}

void ApplyJoinChatRoomRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
  userid_type_ = 0;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  no_userlist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinChatRoomRequest::~ApplyJoinChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  SharedDtor();
}

void ApplyJoinChatRoomRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (this != default_instance_) {
    delete room_;
  }
}

void ApplyJoinChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinChatRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinChatRoomRequest_descriptor_;
}

const ApplyJoinChatRoomRequest& ApplyJoinChatRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ApplyJoinChatRoomRequest* ApplyJoinChatRoomRequest::default_instance_ = NULL;

ApplyJoinChatRoomRequest* ApplyJoinChatRoomRequest::New() const {
  return new ApplyJoinChatRoomRequest;
}

void ApplyJoinChatRoomRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApplyJoinChatRoomRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userid_type_, no_userlist_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
      case 2: {
        if (tag == 18) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid_type;
        break;
      }

      // optional int32 userid_type = 3;
      case 3: {
        if (tag == 24) {
         parse_userid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_type_)));
          set_has_userid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userdata;
        break;
      }

      // optional bytes userdata = 4;
      case 4: {
        if (tag == 34) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_no_userlist;
        break;
      }

      // optional bool no_userlist = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_no_userlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_userlist_)));
          set_has_no_userlist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  return false;
#undef DO_
}

void ApplyJoinChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room(), output);
  }

  // optional int32 userid_type = 3;
  if (has_userid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid_type(), output);
  }

  // optional bytes userdata = 4;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->userdata(), output);
  }

  // optional bool no_userlist = 5 [default = false];
  if (has_no_userlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->no_userlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
}

::google::protobuf::uint8* ApplyJoinChatRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room(), target);
  }

  // optional int32 userid_type = 3;
  if (has_userid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid_type(), target);
  }

  // optional bytes userdata = 4;
  if (has_userdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->userdata(), target);
  }

  // optional bool no_userlist = 5 [default = false];
  if (has_no_userlist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->no_userlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  return target;
}

int ApplyJoinChatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional int32 userid_type = 3;
    if (has_userid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid_type());
    }

    // optional bytes userdata = 4;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

    // optional bool no_userlist = 5 [default = false];
    if (has_no_userlist()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinChatRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinChatRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinChatRoomRequest::MergeFrom(const ApplyJoinChatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (from.has_userid_type()) {
      set_userid_type(from.userid_type());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
    if (from.has_no_userlist()) {
      set_no_userlist(from.no_userlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinChatRoomRequest::CopyFrom(const ApplyJoinChatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void ApplyJoinChatRoomRequest::Swap(ApplyJoinChatRoomRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(room_, other->room_);
    std::swap(userid_type_, other->userid_type_);
    std::swap(userdata_, other->userdata_);
    std::swap(no_userlist_, other->no_userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinChatRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinChatRoomRequest_descriptor_;
  metadata.reflection = ApplyJoinChatRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinChatRoomResponse::kRoomFieldNumber;
const int ApplyJoinChatRoomResponse::kPullLostFieldNumber;
#endif  // !_MSC_VER

ApplyJoinChatRoomResponse::ApplyJoinChatRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
}

void ApplyJoinChatRoomResponse::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

ApplyJoinChatRoomResponse::ApplyJoinChatRoomResponse(const ApplyJoinChatRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
}

void ApplyJoinChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  pull_lost_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinChatRoomResponse::~ApplyJoinChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  SharedDtor();
}

void ApplyJoinChatRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void ApplyJoinChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinChatRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinChatRoomResponse_descriptor_;
}

const ApplyJoinChatRoomResponse& ApplyJoinChatRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ApplyJoinChatRoomResponse* ApplyJoinChatRoomResponse::default_instance_ = NULL;

ApplyJoinChatRoomResponse* ApplyJoinChatRoomResponse::New() const {
  return new ApplyJoinChatRoomResponse;
}

void ApplyJoinChatRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    pull_lost_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pull_lost;
        break;
      }

      // optional bool pull_lost = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_pull_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pull_lost_)));
          set_has_pull_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  return false;
#undef DO_
}

void ApplyJoinChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // optional bool pull_lost = 2 [default = true];
  if (has_pull_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pull_lost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
}

::google::protobuf::uint8* ApplyJoinChatRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // optional bool pull_lost = 2 [default = true];
  if (has_pull_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pull_lost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  return target;
}

int ApplyJoinChatRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional bool pull_lost = 2 [default = true];
    if (has_pull_lost()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinChatRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinChatRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinChatRoomResponse::MergeFrom(const ApplyJoinChatRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (from.has_pull_lost()) {
      set_pull_lost(from.pull_lost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinChatRoomResponse::CopyFrom(const ApplyJoinChatRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinChatRoomResponse::IsInitialized() const {

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void ApplyJoinChatRoomResponse::Swap(ApplyJoinChatRoomResponse* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(pull_lost_, other->pull_lost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinChatRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinChatRoomResponse_descriptor_;
  metadata.reflection = ApplyJoinChatRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitChatRoomRequest::kRoomidFieldNumber;
const int QuitChatRoomRequest::kRoomFieldNumber;
#endif  // !_MSC_VER

QuitChatRoomRequest::QuitChatRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QuitChatRoomRequest)
}

void QuitChatRoomRequest::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

QuitChatRoomRequest::QuitChatRoomRequest(const QuitChatRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QuitChatRoomRequest)
}

void QuitChatRoomRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitChatRoomRequest::~QuitChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QuitChatRoomRequest)
  SharedDtor();
}

void QuitChatRoomRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
    delete room_;
  }
}

void QuitChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitChatRoomRequest_descriptor_;
}

const QuitChatRoomRequest& QuitChatRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

QuitChatRoomRequest* QuitChatRoomRequest::default_instance_ = NULL;

QuitChatRoomRequest* QuitChatRoomRequest::New() const {
  return new QuitChatRoomRequest;
}

void QuitChatRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
      case 2: {
        if (tag == 18) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QuitChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QuitChatRoomRequest)
  return false;
#undef DO_
}

void QuitChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QuitChatRoomRequest)
}

::google::protobuf::uint8* QuitChatRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QuitChatRoomRequest)
  return target;
}

int QuitChatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitChatRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitChatRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitChatRoomRequest::MergeFrom(const QuitChatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoomRequest::CopyFrom(const QuitChatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void QuitChatRoomRequest::Swap(QuitChatRoomRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitChatRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitChatRoomRequest_descriptor_;
  metadata.reflection = QuitChatRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitChatRoomResponse::kRoomFieldNumber;
#endif  // !_MSC_VER

QuitChatRoomResponse::QuitChatRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QuitChatRoomResponse)
}

void QuitChatRoomResponse::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

QuitChatRoomResponse::QuitChatRoomResponse(const QuitChatRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QuitChatRoomResponse)
}

void QuitChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitChatRoomResponse::~QuitChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QuitChatRoomResponse)
  SharedDtor();
}

void QuitChatRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void QuitChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitChatRoomResponse_descriptor_;
}

const QuitChatRoomResponse& QuitChatRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

QuitChatRoomResponse* QuitChatRoomResponse::default_instance_ = NULL;

QuitChatRoomResponse* QuitChatRoomResponse::New() const {
  return new QuitChatRoomResponse;
}

void QuitChatRoomResponse::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QuitChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QuitChatRoomResponse)
  return false;
#undef DO_
}

void QuitChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QuitChatRoomResponse)
}

::google::protobuf::uint8* QuitChatRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QuitChatRoomResponse)
  return target;
}

int QuitChatRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitChatRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitChatRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitChatRoomResponse::MergeFrom(const QuitChatRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoomResponse::CopyFrom(const QuitChatRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoomResponse::IsInitialized() const {

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void QuitChatRoomResponse::Swap(QuitChatRoomResponse* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitChatRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitChatRoomResponse_descriptor_;
  metadata.reflection = QuitChatRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QueryAllGameRoomRequest::QueryAllGameRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
}

void QueryAllGameRoomRequest::InitAsDefaultInstance() {
}

QueryAllGameRoomRequest::QueryAllGameRoomRequest(const QueryAllGameRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
}

void QueryAllGameRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllGameRoomRequest::~QueryAllGameRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  SharedDtor();
}

void QueryAllGameRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAllGameRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllGameRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllGameRoomRequest_descriptor_;
}

const QueryAllGameRoomRequest& QueryAllGameRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

QueryAllGameRoomRequest* QueryAllGameRoomRequest::default_instance_ = NULL;

QueryAllGameRoomRequest* QueryAllGameRoomRequest::New() const {
  return new QueryAllGameRoomRequest;
}

void QueryAllGameRoomRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllGameRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  return false;
#undef DO_
}

void QueryAllGameRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
}

::google::protobuf::uint8* QueryAllGameRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  return target;
}

int QueryAllGameRoomRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllGameRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllGameRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllGameRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllGameRoomRequest::MergeFrom(const QueryAllGameRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllGameRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllGameRoomRequest::CopyFrom(const QueryAllGameRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllGameRoomRequest::IsInitialized() const {

  return true;
}

void QueryAllGameRoomRequest::Swap(QueryAllGameRoomRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllGameRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllGameRoomRequest_descriptor_;
  metadata.reflection = QueryAllGameRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAllGameRoomResponse::kMaplistFieldNumber;
#endif  // !_MSC_VER

QueryAllGameRoomResponse::QueryAllGameRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
}

void QueryAllGameRoomResponse::InitAsDefaultInstance() {
}

QueryAllGameRoomResponse::QueryAllGameRoomResponse(const QueryAllGameRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
}

void QueryAllGameRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllGameRoomResponse::~QueryAllGameRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  SharedDtor();
}

void QueryAllGameRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAllGameRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllGameRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllGameRoomResponse_descriptor_;
}

const QueryAllGameRoomResponse& QueryAllGameRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

QueryAllGameRoomResponse* QueryAllGameRoomResponse::default_instance_ = NULL;

QueryAllGameRoomResponse* QueryAllGameRoomResponse::New() const {
  return new QueryAllGameRoomResponse;
}

void QueryAllGameRoomResponse::Clear() {
  maplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllGameRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
      case 1: {
        if (tag == 10) {
         parse_maplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_maplist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  return false;
#undef DO_
}

void QueryAllGameRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  for (int i = 0; i < this->maplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
}

::google::protobuf::uint8* QueryAllGameRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  for (int i = 0; i < this->maplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  return target;
}

int QueryAllGameRoomResponse::ByteSize() const {
  int total_size = 0;

  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  total_size += 1 * this->maplist_size();
  for (int i = 0; i < this->maplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllGameRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllGameRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllGameRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllGameRoomResponse::MergeFrom(const QueryAllGameRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  maplist_.MergeFrom(from.maplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllGameRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllGameRoomResponse::CopyFrom(const QueryAllGameRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllGameRoomResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->maplist())) return false;
  return true;
}

void QueryAllGameRoomResponse::Swap(QueryAllGameRoomResponse* other) {
  if (other != this) {
    maplist_.Swap(&other->maplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllGameRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllGameRoomResponse_descriptor_;
  metadata.reflection = QueryAllGameRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryChatRoomIDRequest::kGameidFieldNumber;
#endif  // !_MSC_VER

QueryChatRoomIDRequest::QueryChatRoomIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
}

void QueryChatRoomIDRequest::InitAsDefaultInstance() {
}

QueryChatRoomIDRequest::QueryChatRoomIDRequest(const QueryChatRoomIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
}

void QueryChatRoomIDRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryChatRoomIDRequest::~QueryChatRoomIDRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  SharedDtor();
}

void QueryChatRoomIDRequest::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void QueryChatRoomIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChatRoomIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryChatRoomIDRequest_descriptor_;
}

const QueryChatRoomIDRequest& QueryChatRoomIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

QueryChatRoomIDRequest* QueryChatRoomIDRequest::default_instance_ = NULL;

QueryChatRoomIDRequest* QueryChatRoomIDRequest::New() const {
  return new QueryChatRoomIDRequest;
}

void QueryChatRoomIDRequest::Clear() {
  if (has_gameid()) {
    if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      gameid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryChatRoomIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  return false;
#undef DO_
}

void QueryChatRoomIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  // required string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
}

::google::protobuf::uint8* QueryChatRoomIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  // required string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  return target;
}

int QueryChatRoomIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChatRoomIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryChatRoomIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryChatRoomIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryChatRoomIDRequest::MergeFrom(const QueryChatRoomIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryChatRoomIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChatRoomIDRequest::CopyFrom(const QueryChatRoomIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChatRoomIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryChatRoomIDRequest::Swap(QueryChatRoomIDRequest* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryChatRoomIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryChatRoomIDRequest_descriptor_;
  metadata.reflection = QueryChatRoomIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryChatRoomIDResponse::kRoomidFieldNumber;
const int QueryChatRoomIDResponse::kGameidFieldNumber;
#endif  // !_MSC_VER

QueryChatRoomIDResponse::QueryChatRoomIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
}

void QueryChatRoomIDResponse::InitAsDefaultInstance() {
}

QueryChatRoomIDResponse::QueryChatRoomIDResponse(const QueryChatRoomIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
}

void QueryChatRoomIDResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryChatRoomIDResponse::~QueryChatRoomIDResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  SharedDtor();
}

void QueryChatRoomIDResponse::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void QueryChatRoomIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChatRoomIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryChatRoomIDResponse_descriptor_;
}

const QueryChatRoomIDResponse& QueryChatRoomIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

QueryChatRoomIDResponse* QueryChatRoomIDResponse::default_instance_ = NULL;

QueryChatRoomIDResponse* QueryChatRoomIDResponse::New() const {
  return new QueryChatRoomIDResponse;
}

void QueryChatRoomIDResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryChatRoomIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gameid;
        break;
      }

      // optional string gameid = 2;
      case 2: {
        if (tag == 18) {
         parse_gameid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  return false;
#undef DO_
}

void QueryChatRoomIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  // optional bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional string gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
}

::google::protobuf::uint8* QueryChatRoomIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  // optional bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional string gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  return target;
}

int QueryChatRoomIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional string gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChatRoomIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryChatRoomIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryChatRoomIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryChatRoomIDResponse::MergeFrom(const QueryChatRoomIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryChatRoomIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChatRoomIDResponse::CopyFrom(const QueryChatRoomIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChatRoomIDResponse::IsInitialized() const {

  return true;
}

void QueryChatRoomIDResponse::Swap(QueryChatRoomIDResponse* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryChatRoomIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryChatRoomIDResponse_descriptor_;
  metadata.reflection = QueryChatRoomIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRoomIDRequest::kGameidFieldNumber;
const int UpdateRoomIDRequest::kRoomidFieldNumber;
#endif  // !_MSC_VER

UpdateRoomIDRequest::UpdateRoomIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateRoomIDRequest)
}

void UpdateRoomIDRequest::InitAsDefaultInstance() {
}

UpdateRoomIDRequest::UpdateRoomIDRequest(const UpdateRoomIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateRoomIDRequest)
}

void UpdateRoomIDRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRoomIDRequest::~UpdateRoomIDRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  SharedDtor();
}

void UpdateRoomIDRequest::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void UpdateRoomIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoomIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRoomIDRequest_descriptor_;
}

const UpdateRoomIDRequest& UpdateRoomIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

UpdateRoomIDRequest* UpdateRoomIDRequest::default_instance_ = NULL;

UpdateRoomIDRequest* UpdateRoomIDRequest::New() const {
  return new UpdateRoomIDRequest;
}

void UpdateRoomIDRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameid_->clear();
      }
    }
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRoomIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // required bytes roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  return false;
#undef DO_
}

void UpdateRoomIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  // required string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  // required bytes roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateRoomIDRequest)
}

::google::protobuf::uint8* UpdateRoomIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  // required string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // required bytes roomid = 2;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  return target;
}

int UpdateRoomIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // required bytes roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoomIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRoomIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRoomIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRoomIDRequest::MergeFrom(const UpdateRoomIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRoomIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoomIDRequest::CopyFrom(const UpdateRoomIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateRoomIDRequest::Swap(UpdateRoomIDRequest* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRoomIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRoomIDRequest_descriptor_;
  metadata.reflection = UpdateRoomIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateRoomIDResponse::UpdateRoomIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateRoomIDResponse)
}

void UpdateRoomIDResponse::InitAsDefaultInstance() {
}

UpdateRoomIDResponse::UpdateRoomIDResponse(const UpdateRoomIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateRoomIDResponse)
}

void UpdateRoomIDResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRoomIDResponse::~UpdateRoomIDResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  SharedDtor();
}

void UpdateRoomIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRoomIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoomIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRoomIDResponse_descriptor_;
}

const UpdateRoomIDResponse& UpdateRoomIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

UpdateRoomIDResponse* UpdateRoomIDResponse::default_instance_ = NULL;

UpdateRoomIDResponse* UpdateRoomIDResponse::New() const {
  return new UpdateRoomIDResponse;
}

void UpdateRoomIDResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRoomIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  return false;
#undef DO_
}

void UpdateRoomIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateRoomIDResponse)
}

::google::protobuf::uint8* UpdateRoomIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  return target;
}

int UpdateRoomIDResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoomIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRoomIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRoomIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRoomIDResponse::MergeFrom(const UpdateRoomIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRoomIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoomIDResponse::CopyFrom(const UpdateRoomIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomIDResponse::IsInitialized() const {

  return true;
}

void UpdateRoomIDResponse::Swap(UpdateRoomIDResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRoomIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRoomIDResponse_descriptor_;
  metadata.reflection = UpdateRoomIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChatRoomRequest::kRoomidFieldNumber;
const int UpdateChatRoomRequest::kRoomFieldNumber;
#endif  // !_MSC_VER

UpdateChatRoomRequest::UpdateChatRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateChatRoomRequest)
}

void UpdateChatRoomRequest::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

UpdateChatRoomRequest::UpdateChatRoomRequest(const UpdateChatRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateChatRoomRequest)
}

void UpdateChatRoomRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChatRoomRequest::~UpdateChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  SharedDtor();
}

void UpdateChatRoomRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
    delete room_;
  }
}

void UpdateChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChatRoomRequest_descriptor_;
}

const UpdateChatRoomRequest& UpdateChatRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

UpdateChatRoomRequest* UpdateChatRoomRequest::default_instance_ = NULL;

UpdateChatRoomRequest* UpdateChatRoomRequest::New() const {
  return new UpdateChatRoomRequest;
}

void UpdateChatRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room;
        break;
      }

      // required .qihoo.protocol.chatroom.ChatRoom room = 2;
      case 2: {
        if (tag == 18) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  return false;
#undef DO_
}

void UpdateChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // required .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateChatRoomRequest)
}

::google::protobuf::uint8* UpdateChatRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // required .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  return target;
}

int UpdateChatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // required .qihoo.protocol.chatroom.ChatRoom room = 2;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChatRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChatRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChatRoomRequest::MergeFrom(const UpdateChatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatRoomRequest::CopyFrom(const UpdateChatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void UpdateChatRoomRequest::Swap(UpdateChatRoomRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateChatRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChatRoomRequest_descriptor_;
  metadata.reflection = UpdateChatRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChatRoomResponse::kRoomFieldNumber;
#endif  // !_MSC_VER

UpdateChatRoomResponse::UpdateChatRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateChatRoomResponse)
}

void UpdateChatRoomResponse::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

UpdateChatRoomResponse::UpdateChatRoomResponse(const UpdateChatRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateChatRoomResponse)
}

void UpdateChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChatRoomResponse::~UpdateChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  SharedDtor();
}

void UpdateChatRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void UpdateChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChatRoomResponse_descriptor_;
}

const UpdateChatRoomResponse& UpdateChatRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

UpdateChatRoomResponse* UpdateChatRoomResponse::default_instance_ = NULL;

UpdateChatRoomResponse* UpdateChatRoomResponse::New() const {
  return new UpdateChatRoomResponse;
}

void UpdateChatRoomResponse::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  return false;
#undef DO_
}

void UpdateChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateChatRoomResponse)
}

::google::protobuf::uint8* UpdateChatRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  return target;
}

int UpdateChatRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChatRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChatRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChatRoomResponse::MergeFrom(const UpdateChatRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatRoomResponse::CopyFrom(const UpdateChatRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatRoomResponse::IsInitialized() const {

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void UpdateChatRoomResponse::Swap(UpdateChatRoomResponse* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateChatRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChatRoomResponse_descriptor_;
  metadata.reflection = UpdateChatRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickChatRoomMemberRequest::kRoomidFieldNumber;
const int KickChatRoomMemberRequest::kMembersFieldNumber;
const int KickChatRoomMemberRequest::kRoomFieldNumber;
#endif  // !_MSC_VER

KickChatRoomMemberRequest::KickChatRoomMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
}

void KickChatRoomMemberRequest::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

KickChatRoomMemberRequest::KickChatRoomMemberRequest(const KickChatRoomMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
}

void KickChatRoomMemberRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickChatRoomMemberRequest::~KickChatRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  SharedDtor();
}

void KickChatRoomMemberRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
    delete room_;
  }
}

void KickChatRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickChatRoomMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickChatRoomMemberRequest_descriptor_;
}

const KickChatRoomMemberRequest& KickChatRoomMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

KickChatRoomMemberRequest* KickChatRoomMemberRequest::default_instance_ = NULL;

KickChatRoomMemberRequest* KickChatRoomMemberRequest::New() const {
  return new KickChatRoomMemberRequest;
}

void KickChatRoomMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickChatRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(26)) goto parse_room;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
      case 3: {
        if (tag == 26) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  return false;
#undef DO_
}

void KickChatRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
}

::google::protobuf::uint8* KickChatRoomMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  return target;
}

int KickChatRoomMemberRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickChatRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickChatRoomMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickChatRoomMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickChatRoomMemberRequest::MergeFrom(const KickChatRoomMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickChatRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickChatRoomMemberRequest::CopyFrom(const KickChatRoomMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickChatRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void KickChatRoomMemberRequest::Swap(KickChatRoomMemberRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    members_.Swap(&other->members_);
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickChatRoomMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickChatRoomMemberRequest_descriptor_;
  metadata.reflection = KickChatRoomMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickChatRoomMemberResponse::kRoomFieldNumber;
#endif  // !_MSC_VER

KickChatRoomMemberResponse::KickChatRoomMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
}

void KickChatRoomMemberResponse::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

KickChatRoomMemberResponse::KickChatRoomMemberResponse(const KickChatRoomMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
}

void KickChatRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickChatRoomMemberResponse::~KickChatRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  SharedDtor();
}

void KickChatRoomMemberResponse::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void KickChatRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickChatRoomMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickChatRoomMemberResponse_descriptor_;
}

const KickChatRoomMemberResponse& KickChatRoomMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

KickChatRoomMemberResponse* KickChatRoomMemberResponse::default_instance_ = NULL;

KickChatRoomMemberResponse* KickChatRoomMemberResponse::New() const {
  return new KickChatRoomMemberResponse;
}

void KickChatRoomMemberResponse::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickChatRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  return false;
#undef DO_
}

void KickChatRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
}

::google::protobuf::uint8* KickChatRoomMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  return target;
}

int KickChatRoomMemberResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickChatRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickChatRoomMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickChatRoomMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickChatRoomMemberResponse::MergeFrom(const KickChatRoomMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickChatRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickChatRoomMemberResponse::CopyFrom(const KickChatRoomMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickChatRoomMemberResponse::IsInitialized() const {

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void KickChatRoomMemberResponse::Swap(KickChatRoomMemberResponse* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickChatRoomMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickChatRoomMemberResponse_descriptor_;
  metadata.reflection = KickChatRoomMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRoomToDBRequest::kRoomidFieldNumber;
#endif  // !_MSC_VER

SyncRoomToDBRequest::SyncRoomToDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.SyncRoomToDBRequest)
}

void SyncRoomToDBRequest::InitAsDefaultInstance() {
}

SyncRoomToDBRequest::SyncRoomToDBRequest(const SyncRoomToDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.SyncRoomToDBRequest)
}

void SyncRoomToDBRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRoomToDBRequest::~SyncRoomToDBRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  SharedDtor();
}

void SyncRoomToDBRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void SyncRoomToDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRoomToDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRoomToDBRequest_descriptor_;
}

const SyncRoomToDBRequest& SyncRoomToDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

SyncRoomToDBRequest* SyncRoomToDBRequest::default_instance_ = NULL;

SyncRoomToDBRequest* SyncRoomToDBRequest::New() const {
  return new SyncRoomToDBRequest;
}

void SyncRoomToDBRequest::Clear() {
  if (has_roomid()) {
    if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      roomid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRoomToDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  return false;
#undef DO_
}

void SyncRoomToDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.SyncRoomToDBRequest)
}

::google::protobuf::uint8* SyncRoomToDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  return target;
}

int SyncRoomToDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRoomToDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRoomToDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRoomToDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRoomToDBRequest::MergeFrom(const SyncRoomToDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRoomToDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRoomToDBRequest::CopyFrom(const SyncRoomToDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRoomToDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncRoomToDBRequest::Swap(SyncRoomToDBRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRoomToDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRoomToDBRequest_descriptor_;
  metadata.reflection = SyncRoomToDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChatRoomNotify::kRoomFieldNumber;
#endif  // !_MSC_VER

CreateChatRoomNotify::CreateChatRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateChatRoomNotify)
}

void CreateChatRoomNotify::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

CreateChatRoomNotify::CreateChatRoomNotify(const CreateChatRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateChatRoomNotify)
}

void CreateChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChatRoomNotify::~CreateChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateChatRoomNotify)
  SharedDtor();
}

void CreateChatRoomNotify::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void CreateChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChatRoomNotify_descriptor_;
}

const CreateChatRoomNotify& CreateChatRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

CreateChatRoomNotify* CreateChatRoomNotify::default_instance_ = NULL;

CreateChatRoomNotify* CreateChatRoomNotify::New() const {
  return new CreateChatRoomNotify;
}

void CreateChatRoomNotify::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateChatRoomNotify)
  return false;
#undef DO_
}

void CreateChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateChatRoomNotify)
}

::google::protobuf::uint8* CreateChatRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateChatRoomNotify)
  return target;
}

int CreateChatRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChatRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChatRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChatRoomNotify::MergeFrom(const CreateChatRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomNotify::CopyFrom(const CreateChatRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomNotify::Swap(CreateChatRoomNotify* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChatRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChatRoomNotify_descriptor_;
  metadata.reflection = CreateChatRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberJoinChatRoomNotify::kRoomFieldNumber;
#endif  // !_MSC_VER

MemberJoinChatRoomNotify::MemberJoinChatRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
}

void MemberJoinChatRoomNotify::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

MemberJoinChatRoomNotify::MemberJoinChatRoomNotify(const MemberJoinChatRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
}

void MemberJoinChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberJoinChatRoomNotify::~MemberJoinChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  SharedDtor();
}

void MemberJoinChatRoomNotify::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void MemberJoinChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberJoinChatRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberJoinChatRoomNotify_descriptor_;
}

const MemberJoinChatRoomNotify& MemberJoinChatRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

MemberJoinChatRoomNotify* MemberJoinChatRoomNotify::default_instance_ = NULL;

MemberJoinChatRoomNotify* MemberJoinChatRoomNotify::New() const {
  return new MemberJoinChatRoomNotify;
}

void MemberJoinChatRoomNotify::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberJoinChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  return false;
#undef DO_
}

void MemberJoinChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
}

::google::protobuf::uint8* MemberJoinChatRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  return target;
}

int MemberJoinChatRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberJoinChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberJoinChatRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberJoinChatRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberJoinChatRoomNotify::MergeFrom(const MemberJoinChatRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberJoinChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberJoinChatRoomNotify::CopyFrom(const MemberJoinChatRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberJoinChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void MemberJoinChatRoomNotify::Swap(MemberJoinChatRoomNotify* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberJoinChatRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberJoinChatRoomNotify_descriptor_;
  metadata.reflection = MemberJoinChatRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberQuitChatRoomNotify::kRoomFieldNumber;
#endif  // !_MSC_VER

MemberQuitChatRoomNotify::MemberQuitChatRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
}

void MemberQuitChatRoomNotify::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
}

MemberQuitChatRoomNotify::MemberQuitChatRoomNotify(const MemberQuitChatRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
}

void MemberQuitChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberQuitChatRoomNotify::~MemberQuitChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  SharedDtor();
}

void MemberQuitChatRoomNotify::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void MemberQuitChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberQuitChatRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberQuitChatRoomNotify_descriptor_;
}

const MemberQuitChatRoomNotify& MemberQuitChatRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

MemberQuitChatRoomNotify* MemberQuitChatRoomNotify::default_instance_ = NULL;

MemberQuitChatRoomNotify* MemberQuitChatRoomNotify::New() const {
  return new MemberQuitChatRoomNotify;
}

void MemberQuitChatRoomNotify::Clear() {
  if (has_room()) {
    if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberQuitChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  return false;
#undef DO_
}

void MemberQuitChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
}

::google::protobuf::uint8* MemberQuitChatRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  return target;
}

int MemberQuitChatRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberQuitChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberQuitChatRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberQuitChatRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberQuitChatRoomNotify::MergeFrom(const MemberQuitChatRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberQuitChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberQuitChatRoomNotify::CopyFrom(const MemberQuitChatRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberQuitChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  return true;
}

void MemberQuitChatRoomNotify::Swap(MemberQuitChatRoomNotify* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberQuitChatRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberQuitChatRoomNotify_descriptor_;
  metadata.reflection = MemberQuitChatRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickMemberNotify::kRoomFieldNumber;
const int KickMemberNotify::kUserFieldNumber;
#endif  // !_MSC_VER

KickMemberNotify::KickMemberNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.KickMemberNotify)
}

void KickMemberNotify::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
  user_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

KickMemberNotify::KickMemberNotify(const KickMemberNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.KickMemberNotify)
}

void KickMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickMemberNotify::~KickMemberNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.KickMemberNotify)
  SharedDtor();
}

void KickMemberNotify::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
    delete user_;
  }
}

void KickMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickMemberNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickMemberNotify_descriptor_;
}

const KickMemberNotify& KickMemberNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

KickMemberNotify* KickMemberNotify::default_instance_ = NULL;

KickMemberNotify* KickMemberNotify::New() const {
  return new KickMemberNotify;
}

void KickMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.KickMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.KickMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.KickMemberNotify)
  return false;
#undef DO_
}

void KickMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.KickMemberNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.KickMemberNotify)
}

::google::protobuf::uint8* KickMemberNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.KickMemberNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.KickMemberNotify)
  return target;
}

int KickMemberNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional .qihoo.protocol.chatroom.CRUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickMemberNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickMemberNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickMemberNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickMemberNotify::MergeFrom(const KickMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (from.has_user()) {
      mutable_user()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickMemberNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickMemberNotify::CopyFrom(const KickMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void KickMemberNotify::Swap(KickMemberNotify* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickMemberNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickMemberNotify_descriptor_;
  metadata.reflection = KickMemberNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChatRoomNotify::kRoomFieldNumber;
const int UpdateChatRoomNotify::kUserFieldNumber;
#endif  // !_MSC_VER

UpdateChatRoomNotify::UpdateChatRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateChatRoomNotify)
}

void UpdateChatRoomNotify::InitAsDefaultInstance() {
  room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(&::qihoo::protocol::chatroom::ChatRoom::default_instance());
  user_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

UpdateChatRoomNotify::UpdateChatRoomNotify(const UpdateChatRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateChatRoomNotify)
}

void UpdateChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChatRoomNotify::~UpdateChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  SharedDtor();
}

void UpdateChatRoomNotify::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
    delete user_;
  }
}

void UpdateChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChatRoomNotify_descriptor_;
}

const UpdateChatRoomNotify& UpdateChatRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

UpdateChatRoomNotify* UpdateChatRoomNotify::default_instance_ = NULL;

UpdateChatRoomNotify* UpdateChatRoomNotify::New() const {
  return new UpdateChatRoomNotify;
}

void UpdateChatRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room()) {
      if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  return false;
#undef DO_
}

void UpdateChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateChatRoomNotify)
}

::google::protobuf::uint8* UpdateChatRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  return target;
}

int UpdateChatRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional .qihoo.protocol.chatroom.CRUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChatRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChatRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChatRoomNotify::MergeFrom(const UpdateChatRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (from.has_user()) {
      mutable_user()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatRoomNotify::CopyFrom(const UpdateChatRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room()) {
    if (!this->room().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void UpdateChatRoomNotify::Swap(UpdateChatRoomNotify* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateChatRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChatRoomNotify_descriptor_;
  metadata.reflection = UpdateChatRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomMessageRequest::kSenderFieldNumber;
const int ChatRoomMessageRequest::kRoomidFieldNumber;
const int ChatRoomMessageRequest::kMsgtypeFieldNumber;
const int ChatRoomMessageRequest::kMsgcontentFieldNumber;
const int ChatRoomMessageRequest::kClientparameterFieldNumber;
const int ChatRoomMessageRequest::kClientcacheFieldNumber;
const int ChatRoomMessageRequest::kCreatenotifyFieldNumber;
const int ChatRoomMessageRequest::kJoinnotifyFieldNumber;
const int ChatRoomMessageRequest::kQuitnotifyFieldNumber;
const int ChatRoomMessageRequest::kKicknotifyFieldNumber;
const int ChatRoomMessageRequest::kUpdatenotifyFieldNumber;
const int ChatRoomMessageRequest::kPropertylistFieldNumber;
#endif  // !_MSC_VER

ChatRoomMessageRequest::ChatRoomMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomMessageRequest)
}

void ChatRoomMessageRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
  createnotify_ = const_cast< ::qihoo::protocol::chatroom::CreateChatRoomNotify*>(&::qihoo::protocol::chatroom::CreateChatRoomNotify::default_instance());
  joinnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify*>(&::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::default_instance());
  quitnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify*>(&::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::default_instance());
  kicknotify_ = const_cast< ::qihoo::protocol::chatroom::KickMemberNotify*>(&::qihoo::protocol::chatroom::KickMemberNotify::default_instance());
  updatenotify_ = const_cast< ::qihoo::protocol::chatroom::UpdateChatRoomNotify*>(&::qihoo::protocol::chatroom::UpdateChatRoomNotify::default_instance());
}

ChatRoomMessageRequest::ChatRoomMessageRequest(const ChatRoomMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomMessageRequest)
}

void ChatRoomMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_ = NULL;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientparameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientcache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createnotify_ = NULL;
  joinnotify_ = NULL;
  quitnotify_ = NULL;
  kicknotify_ = NULL;
  updatenotify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomMessageRequest::~ChatRoomMessageRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  SharedDtor();
}

void ChatRoomMessageRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcontent_;
  }
  if (clientparameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientparameter_;
  }
  if (clientcache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientcache_;
  }
  if (this != default_instance_) {
    delete sender_;
    delete createnotify_;
    delete joinnotify_;
    delete quitnotify_;
    delete kicknotify_;
    delete updatenotify_;
  }
}

void ChatRoomMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomMessageRequest_descriptor_;
}

const ChatRoomMessageRequest& ChatRoomMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomMessageRequest* ChatRoomMessageRequest::default_instance_ = NULL;

ChatRoomMessageRequest* ChatRoomMessageRequest::New() const {
  return new ChatRoomMessageRequest;
}

void ChatRoomMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    msgtype_ = 0;
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgcontent_->clear();
      }
    }
    if (has_clientparameter()) {
      if (clientparameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientparameter_->clear();
      }
    }
    if (has_clientcache()) {
      if (clientcache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientcache_->clear();
      }
    }
    if (has_createnotify()) {
      if (createnotify_ != NULL) createnotify_->::qihoo::protocol::chatroom::CreateChatRoomNotify::Clear();
    }
    if (has_joinnotify()) {
      if (joinnotify_ != NULL) joinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_quitnotify()) {
      if (quitnotify_ != NULL) quitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
    }
    if (has_kicknotify()) {
      if (kicknotify_ != NULL) kicknotify_->::qihoo::protocol::chatroom::KickMemberNotify::Clear();
    }
    if (has_updatenotify()) {
      if (updatenotify_ != NULL) updatenotify_->::qihoo::protocol::chatroom::UpdateChatRoomNotify::Clear();
    }
  }
  propertylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.CRUser sender = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // required bytes roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgtype;
        break;
      }

      // required int32 msgtype = 3;
      case 3: {
        if (tag == 24) {
         parse_msgtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgcontent;
        break;
      }

      // optional bytes msgcontent = 4;
      case 4: {
        if (tag == 34) {
         parse_msgcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_clientparameter;
        break;
      }

      // optional bytes clientparameter = 5;
      case 5: {
        if (tag == 42) {
         parse_clientparameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientparameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_clientcache;
        break;
      }

      // optional bytes clientcache = 6;
      case 6: {
        if (tag == 50) {
         parse_clientcache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientcache()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_createnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
      case 7: {
        if (tag == 58) {
         parse_createnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_joinnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
      case 8: {
        if (tag == 66) {
         parse_joinnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_quitnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
      case 9: {
        if (tag == 74) {
         parse_quitnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_kicknotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
      case 10: {
        if (tag == 82) {
         parse_kicknotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kicknotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_updatenotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
      case 11: {
        if (tag == 90) {
         parse_updatenotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatenotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_propertylist;
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
      case 12: {
        if (tag == 98) {
         parse_propertylist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propertylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_propertylist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  return false;
#undef DO_
}

void ChatRoomMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  // optional .qihoo.protocol.chatroom.CRUser sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }

  // required bytes roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomid(), output);
  }

  // required int32 msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgtype(), output);
  }

  // optional bytes msgcontent = 4;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msgcontent(), output);
  }

  // optional bytes clientparameter = 5;
  if (has_clientparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->clientparameter(), output);
  }

  // optional bytes clientcache = 6;
  if (has_clientcache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->clientcache(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
  if (has_createnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->createnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
  if (has_joinnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->joinnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
  if (has_quitnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->quitnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
  if (has_kicknotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->kicknotify(), output);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
  if (has_updatenotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->updatenotify(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  for (int i = 0; i < this->propertylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->propertylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomMessageRequest)
}

::google::protobuf::uint8* ChatRoomMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  // optional .qihoo.protocol.chatroom.CRUser sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }

  // required bytes roomid = 2;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomid(), target);
  }

  // required int32 msgtype = 3;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgtype(), target);
  }

  // optional bytes msgcontent = 4;
  if (has_msgcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msgcontent(), target);
  }

  // optional bytes clientparameter = 5;
  if (has_clientparameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->clientparameter(), target);
  }

  // optional bytes clientcache = 6;
  if (has_clientcache()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->clientcache(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
  if (has_createnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->createnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
  if (has_joinnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->joinnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
  if (has_quitnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->quitnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
  if (has_kicknotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->kicknotify(), target);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
  if (has_updatenotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->updatenotify(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  for (int i = 0; i < this->propertylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->propertylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  return target;
}

int ChatRoomMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.chatroom.CRUser sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // required bytes roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // required int32 msgtype = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }

    // optional bytes msgcontent = 4;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgcontent());
    }

    // optional bytes clientparameter = 5;
    if (has_clientparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientparameter());
    }

    // optional bytes clientcache = 6;
    if (has_clientcache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientcache());
    }

    // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
    if (has_createnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createnotify());
    }

    // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
    if (has_joinnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joinnotify());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
    if (has_quitnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitnotify());
    }

    // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
    if (has_kicknotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kicknotify());
    }

    // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
    if (has_updatenotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatenotify());
    }

  }
  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  total_size += 1 * this->propertylist_size();
  for (int i = 0; i < this->propertylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propertylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomMessageRequest::MergeFrom(const ChatRoomMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  propertylist_.MergeFrom(from.propertylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.sender());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
    if (from.has_clientparameter()) {
      set_clientparameter(from.clientparameter());
    }
    if (from.has_clientcache()) {
      set_clientcache(from.clientcache());
    }
    if (from.has_createnotify()) {
      mutable_createnotify()->::qihoo::protocol::chatroom::CreateChatRoomNotify::MergeFrom(from.createnotify());
    }
    if (from.has_joinnotify()) {
      mutable_joinnotify()->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::MergeFrom(from.joinnotify());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quitnotify()) {
      mutable_quitnotify()->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::MergeFrom(from.quitnotify());
    }
    if (from.has_kicknotify()) {
      mutable_kicknotify()->::qihoo::protocol::chatroom::KickMemberNotify::MergeFrom(from.kicknotify());
    }
    if (from.has_updatenotify()) {
      mutable_updatenotify()->::qihoo::protocol::chatroom::UpdateChatRoomNotify::MergeFrom(from.updatenotify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMessageRequest::CopyFrom(const ChatRoomMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  if (has_createnotify()) {
    if (!this->createnotify().IsInitialized()) return false;
  }
  if (has_joinnotify()) {
    if (!this->joinnotify().IsInitialized()) return false;
  }
  if (has_quitnotify()) {
    if (!this->quitnotify().IsInitialized()) return false;
  }
  if (has_kicknotify()) {
    if (!this->kicknotify().IsInitialized()) return false;
  }
  if (has_updatenotify()) {
    if (!this->updatenotify().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->propertylist())) return false;
  return true;
}

void ChatRoomMessageRequest::Swap(ChatRoomMessageRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(roomid_, other->roomid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(clientparameter_, other->clientparameter_);
    std::swap(clientcache_, other->clientcache_);
    std::swap(createnotify_, other->createnotify_);
    std::swap(joinnotify_, other->joinnotify_);
    std::swap(quitnotify_, other->quitnotify_);
    std::swap(kicknotify_, other->kicknotify_);
    std::swap(updatenotify_, other->updatenotify_);
    propertylist_.Swap(&other->propertylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomMessageRequest_descriptor_;
  metadata.reflection = ChatRoomMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomMessageResponse::kMsgidFieldNumber;
#endif  // !_MSC_VER

ChatRoomMessageResponse::ChatRoomMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomMessageResponse)
}

void ChatRoomMessageResponse::InitAsDefaultInstance() {
}

ChatRoomMessageResponse::ChatRoomMessageResponse(const ChatRoomMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomMessageResponse)
}

void ChatRoomMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomMessageResponse::~ChatRoomMessageResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  SharedDtor();
}

void ChatRoomMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRoomMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomMessageResponse_descriptor_;
}

const ChatRoomMessageResponse& ChatRoomMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomMessageResponse* ChatRoomMessageResponse::default_instance_ = NULL;

ChatRoomMessageResponse* ChatRoomMessageResponse::New() const {
  return new ChatRoomMessageResponse;
}

void ChatRoomMessageResponse::Clear() {
  msgid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  return false;
#undef DO_
}

void ChatRoomMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  // optional uint64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomMessageResponse)
}

::google::protobuf::uint8* ChatRoomMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  // optional uint64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  return target;
}

int ChatRoomMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomMessageResponse::MergeFrom(const ChatRoomMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMessageResponse::CopyFrom(const ChatRoomMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMessageResponse::IsInitialized() const {

  return true;
}

void ChatRoomMessageResponse::Swap(ChatRoomMessageResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomMessageResponse_descriptor_;
  metadata.reflection = ChatRoomMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomNewMsg::kRoomidFieldNumber;
const int ChatRoomNewMsg::kSenderFieldNumber;
const int ChatRoomNewMsg::kMsgtypeFieldNumber;
const int ChatRoomNewMsg::kMsgcontentFieldNumber;
const int ChatRoomNewMsg::kRegmemcountFieldNumber;
const int ChatRoomNewMsg::kMemcountFieldNumber;
const int ChatRoomNewMsg::kMsgidFieldNumber;
const int ChatRoomNewMsg::kMaxidFieldNumber;
const int ChatRoomNewMsg::kTimestampFieldNumber;
#endif  // !_MSC_VER

ChatRoomNewMsg::ChatRoomNewMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomNewMsg)
}

void ChatRoomNewMsg::InitAsDefaultInstance() {
  sender_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(&::qihoo::protocol::chatroom::CRUser::default_instance());
}

ChatRoomNewMsg::ChatRoomNewMsg(const ChatRoomNewMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomNewMsg)
}

void ChatRoomNewMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = NULL;
  msgtype_ = 0;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regmemcount_ = 0;
  memcount_ = 0;
  msgid_ = 0u;
  maxid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomNewMsg::~ChatRoomNewMsg() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomNewMsg)
  SharedDtor();
}

void ChatRoomNewMsg::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcontent_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void ChatRoomNewMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomNewMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomNewMsg_descriptor_;
}

const ChatRoomNewMsg& ChatRoomNewMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomNewMsg* ChatRoomNewMsg::default_instance_ = NULL;

ChatRoomNewMsg* ChatRoomNewMsg::New() const {
  return new ChatRoomNewMsg;
}

void ChatRoomNewMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomNewMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(msgtype_, msgid_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != NULL) sender_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgcontent_->clear();
      }
    }
    maxid_ = 0u;
  }
  timestamp_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomNewMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser sender = 2;
      case 2: {
        if (tag == 18) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgtype;
        break;
      }

      // optional int32 msgtype = 3;
      case 3: {
        if (tag == 24) {
         parse_msgtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgcontent;
        break;
      }

      // optional bytes msgcontent = 4;
      case 4: {
        if (tag == 34) {
         parse_msgcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_regmemcount;
        break;
      }

      // optional int32 regmemcount = 5;
      case 5: {
        if (tag == 40) {
         parse_regmemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regmemcount_)));
          set_has_regmemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_memcount;
        break;
      }

      // optional int32 memcount = 6;
      case 6: {
        if (tag == 48) {
         parse_memcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memcount_)));
          set_has_memcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 7;
      case 7: {
        if (tag == 56) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxid;
        break;
      }

      // optional uint32 maxid = 8;
      case 8: {
        if (tag == 64) {
         parse_maxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxid_)));
          set_has_maxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 9;
      case 9: {
        if (tag == 72) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomNewMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomNewMsg)
  return false;
#undef DO_
}

void ChatRoomNewMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sender(), output);
  }

  // optional int32 msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgtype(), output);
  }

  // optional bytes msgcontent = 4;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msgcontent(), output);
  }

  // optional int32 regmemcount = 5;
  if (has_regmemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->regmemcount(), output);
  }

  // optional int32 memcount = 6;
  if (has_memcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->memcount(), output);
  }

  // optional uint32 msgid = 7;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msgid(), output);
  }

  // optional uint32 maxid = 8;
  if (has_maxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxid(), output);
  }

  // optional uint64 timestamp = 9;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomNewMsg)
}

::google::protobuf::uint8* ChatRoomNewMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sender(), target);
  }

  // optional int32 msgtype = 3;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgtype(), target);
  }

  // optional bytes msgcontent = 4;
  if (has_msgcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msgcontent(), target);
  }

  // optional int32 regmemcount = 5;
  if (has_regmemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->regmemcount(), target);
  }

  // optional int32 memcount = 6;
  if (has_memcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->memcount(), target);
  }

  // optional uint32 msgid = 7;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->msgid(), target);
  }

  // optional uint32 maxid = 8;
  if (has_maxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxid(), target);
  }

  // optional uint64 timestamp = 9;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomNewMsg)
  return target;
}

int ChatRoomNewMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional .qihoo.protocol.chatroom.CRUser sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // optional int32 msgtype = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }

    // optional bytes msgcontent = 4;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgcontent());
    }

    // optional int32 regmemcount = 5;
    if (has_regmemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regmemcount());
    }

    // optional int32 memcount = 6;
    if (has_memcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memcount());
    }

    // optional uint32 msgid = 7;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional uint32 maxid = 8;
    if (has_maxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 timestamp = 9;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomNewMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomNewMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomNewMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomNewMsg::MergeFrom(const ChatRoomNewMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sender()) {
      mutable_sender()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.sender());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
    if (from.has_regmemcount()) {
      set_regmemcount(from.regmemcount());
    }
    if (from.has_memcount()) {
      set_memcount(from.memcount());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_maxid()) {
      set_maxid(from.maxid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomNewMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomNewMsg::CopyFrom(const ChatRoomNewMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomNewMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void ChatRoomNewMsg::Swap(ChatRoomNewMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(sender_, other->sender_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(regmemcount_, other->regmemcount_);
    std::swap(memcount_, other->memcount_);
    std::swap(msgid_, other->msgid_);
    std::swap(maxid_, other->maxid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomNewMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomNewMsg_descriptor_;
  metadata.reflection = ChatRoomNewMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomErrorMsg::kRoomidFieldNumber;
const int ChatRoomErrorMsg::kClientsnFieldNumber;
const int ChatRoomErrorMsg::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

ChatRoomErrorMsg::ChatRoomErrorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomErrorMsg)
}

void ChatRoomErrorMsg::InitAsDefaultInstance() {
}

ChatRoomErrorMsg::ChatRoomErrorMsg(const ChatRoomErrorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomErrorMsg)
}

void ChatRoomErrorMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsn_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomErrorMsg::~ChatRoomErrorMsg() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  SharedDtor();
}

void ChatRoomErrorMsg::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomErrorMsg_descriptor_;
}

const ChatRoomErrorMsg& ChatRoomErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomErrorMsg* ChatRoomErrorMsg::default_instance_ = NULL;

ChatRoomErrorMsg* ChatRoomErrorMsg::New() const {
  return new ChatRoomErrorMsg;
}

void ChatRoomErrorMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomErrorMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(clientsn_, errorcode_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientsn;
        break;
      }

      // required uint64 clientsn = 2;
      case 2: {
        if (tag == 16) {
         parse_clientsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientsn_)));
          set_has_clientsn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorcode;
        break;
      }

      // optional int32 errorcode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  return false;
#undef DO_
}

void ChatRoomErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // required uint64 clientsn = 2;
  if (has_clientsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientsn(), output);
  }

  // optional int32 errorcode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomErrorMsg)
}

::google::protobuf::uint8* ChatRoomErrorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // required uint64 clientsn = 2;
  if (has_clientsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientsn(), target);
  }

  // optional int32 errorcode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  return target;
}

int ChatRoomErrorMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // required uint64 clientsn = 2;
    if (has_clientsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientsn());
    }

    // optional int32 errorcode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomErrorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomErrorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomErrorMsg::MergeFrom(const ChatRoomErrorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_clientsn()) {
      set_clientsn(from.clientsn());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomErrorMsg::CopyFrom(const ChatRoomErrorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomErrorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatRoomErrorMsg::Swap(ChatRoomErrorMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(clientsn_, other->clientsn_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomErrorMsg_descriptor_;
  metadata.reflection = ChatRoomErrorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomMNotify::kTypeFieldNumber;
const int ChatRoomMNotify::kDataFieldNumber;
const int ChatRoomMNotify::kRegmemcountFieldNumber;
const int ChatRoomMNotify::kMemcountFieldNumber;
#endif  // !_MSC_VER

ChatRoomMNotify::ChatRoomMNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomMNotify)
}

void ChatRoomMNotify::InitAsDefaultInstance() {
}

ChatRoomMNotify::ChatRoomMNotify(const ChatRoomMNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomMNotify)
}

void ChatRoomMNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regmemcount_ = 0;
  memcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomMNotify::~ChatRoomMNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomMNotify)
  SharedDtor();
}

void ChatRoomMNotify::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomMNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomMNotify_descriptor_;
}

const ChatRoomMNotify& ChatRoomMNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomMNotify* ChatRoomMNotify::default_instance_ = NULL;

ChatRoomMNotify* ChatRoomMNotify::New() const {
  return new ChatRoomMNotify;
}

void ChatRoomMNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomMNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, memcount_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomMNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_regmemcount;
        break;
      }

      // optional int32 regmemcount = 3;
      case 3: {
        if (tag == 24) {
         parse_regmemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regmemcount_)));
          set_has_regmemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memcount;
        break;
      }

      // optional int32 memcount = 4;
      case 4: {
        if (tag == 32) {
         parse_memcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memcount_)));
          set_has_memcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomMNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomMNotify)
  return false;
#undef DO_
}

void ChatRoomMNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int32 regmemcount = 3;
  if (has_regmemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->regmemcount(), output);
  }

  // optional int32 memcount = 4;
  if (has_memcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomMNotify)
}

::google::protobuf::uint8* ChatRoomMNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int32 regmemcount = 3;
  if (has_regmemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->regmemcount(), target);
  }

  // optional int32 memcount = 4;
  if (has_memcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomMNotify)
  return target;
}

int ChatRoomMNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 regmemcount = 3;
    if (has_regmemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regmemcount());
    }

    // optional int32 memcount = 4;
    if (has_memcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomMNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomMNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomMNotify::MergeFrom(const ChatRoomMNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_regmemcount()) {
      set_regmemcount(from.regmemcount());
    }
    if (from.has_memcount()) {
      set_memcount(from.memcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomMNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMNotify::CopyFrom(const ChatRoomMNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatRoomMNotify::Swap(ChatRoomMNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(regmemcount_, other->regmemcount_);
    std::swap(memcount_, other->memcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomMNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomMNotify_descriptor_;
  metadata.reflection = ChatRoomMNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kRoomidFieldNumber;
const int SubscribeRequest::kSubFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    sub_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.SubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub;
        break;
      }

      // optional bool sub = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_sub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_)));
          set_has_sub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.SubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.SubscribeRequest)
  return false;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.SubscribeRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional bool sub = 2 [default = false];
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sub(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.SubscribeRequest)
}

::google::protobuf::uint8* SubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.SubscribeRequest)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional bool sub = 2 [default = false];
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sub(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.SubscribeRequest)
  return target;
}

int SubscribeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional bool sub = 2 [default = false];
    if (has_sub()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(sub_, other->sub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kRoomidFieldNumber;
const int SubscribeResponse::kSubFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.SubscribeResponse)
}

void SubscribeResponse::InitAsDefaultInstance() {
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    sub_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.SubscribeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub;
        break;
      }

      // optional bool sub = 2;
      case 2: {
        if (tag == 16) {
         parse_sub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_)));
          set_has_sub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.SubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.SubscribeResponse)
  return false;
#undef DO_
}

void SubscribeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.SubscribeResponse)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional bool sub = 2;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sub(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.SubscribeResponse)
}

::google::protobuf::uint8* SubscribeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.SubscribeResponse)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional bool sub = 2;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sub(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.SubscribeResponse)
  return target;
}

int SubscribeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional bool sub = 2;
    if (has_sub()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(sub_, other->sub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomUpToServer::kPayloadtypeFieldNumber;
const int ChatRoomUpToServer::kCreatechatroomreqFieldNumber;
const int ChatRoomUpToServer::kGetchatroominforeqFieldNumber;
const int ChatRoomUpToServer::kApplyjoinchatroomreqFieldNumber;
const int ChatRoomUpToServer::kQuitchatroomreqFieldNumber;
const int ChatRoomUpToServer::kUpdatechatroomreqFieldNumber;
const int ChatRoomUpToServer::kKickmemberreqFieldNumber;
const int ChatRoomUpToServer::kQuerychatroomidreqFieldNumber;
const int ChatRoomUpToServer::kUpdategameidreqFieldNumber;
const int ChatRoomUpToServer::kQueryallgameroomreqFieldNumber;
const int ChatRoomUpToServer::kChatroommessagereqFieldNumber;
const int ChatRoomUpToServer::kCreateroomsFieldNumber;
const int ChatRoomUpToServer::kSyncroomtodbaFieldNumber;
const int ChatRoomUpToServer::kSubreqFieldNumber;
#endif  // !_MSC_VER

ChatRoomUpToServer::ChatRoomUpToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomUpToServer)
}

void ChatRoomUpToServer::InitAsDefaultInstance() {
  createchatroomreq_ = const_cast< ::qihoo::protocol::chatroom::CreateChatRoomRequest*>(&::qihoo::protocol::chatroom::CreateChatRoomRequest::default_instance());
  getchatroominforeq_ = const_cast< ::qihoo::protocol::chatroom::GetChatRoomDetailRequest*>(&::qihoo::protocol::chatroom::GetChatRoomDetailRequest::default_instance());
  applyjoinchatroomreq_ = const_cast< ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest*>(&::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::default_instance());
  quitchatroomreq_ = const_cast< ::qihoo::protocol::chatroom::QuitChatRoomRequest*>(&::qihoo::protocol::chatroom::QuitChatRoomRequest::default_instance());
  updatechatroomreq_ = const_cast< ::qihoo::protocol::chatroom::UpdateChatRoomRequest*>(&::qihoo::protocol::chatroom::UpdateChatRoomRequest::default_instance());
  kickmemberreq_ = const_cast< ::qihoo::protocol::chatroom::KickChatRoomMemberRequest*>(&::qihoo::protocol::chatroom::KickChatRoomMemberRequest::default_instance());
  querychatroomidreq_ = const_cast< ::qihoo::protocol::chatroom::QueryChatRoomIDRequest*>(&::qihoo::protocol::chatroom::QueryChatRoomIDRequest::default_instance());
  updategameidreq_ = const_cast< ::qihoo::protocol::chatroom::UpdateRoomIDRequest*>(&::qihoo::protocol::chatroom::UpdateRoomIDRequest::default_instance());
  queryallgameroomreq_ = const_cast< ::qihoo::protocol::chatroom::QueryAllGameRoomRequest*>(&::qihoo::protocol::chatroom::QueryAllGameRoomRequest::default_instance());
  chatroommessagereq_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomMessageRequest*>(&::qihoo::protocol::chatroom::ChatRoomMessageRequest::default_instance());
  createrooms_ = const_cast< ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest*>(&::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::default_instance());
  syncroomtodba_ = const_cast< ::qihoo::protocol::chatroom::SyncRoomToDBRequest*>(&::qihoo::protocol::chatroom::SyncRoomToDBRequest::default_instance());
  subreq_ = const_cast< ::qihoo::protocol::chatroom::SubscribeRequest*>(&::qihoo::protocol::chatroom::SubscribeRequest::default_instance());
}

ChatRoomUpToServer::ChatRoomUpToServer(const ChatRoomUpToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomUpToServer)
}

void ChatRoomUpToServer::SharedCtor() {
  _cached_size_ = 0;
  payloadtype_ = 0u;
  createchatroomreq_ = NULL;
  getchatroominforeq_ = NULL;
  applyjoinchatroomreq_ = NULL;
  quitchatroomreq_ = NULL;
  updatechatroomreq_ = NULL;
  kickmemberreq_ = NULL;
  querychatroomidreq_ = NULL;
  updategameidreq_ = NULL;
  queryallgameroomreq_ = NULL;
  chatroommessagereq_ = NULL;
  createrooms_ = NULL;
  syncroomtodba_ = NULL;
  subreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomUpToServer::~ChatRoomUpToServer() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomUpToServer)
  SharedDtor();
}

void ChatRoomUpToServer::SharedDtor() {
  if (this != default_instance_) {
    delete createchatroomreq_;
    delete getchatroominforeq_;
    delete applyjoinchatroomreq_;
    delete quitchatroomreq_;
    delete updatechatroomreq_;
    delete kickmemberreq_;
    delete querychatroomidreq_;
    delete updategameidreq_;
    delete queryallgameroomreq_;
    delete chatroommessagereq_;
    delete createrooms_;
    delete syncroomtodba_;
    delete subreq_;
  }
}

void ChatRoomUpToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomUpToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomUpToServer_descriptor_;
}

const ChatRoomUpToServer& ChatRoomUpToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomUpToServer* ChatRoomUpToServer::default_instance_ = NULL;

ChatRoomUpToServer* ChatRoomUpToServer::New() const {
  return new ChatRoomUpToServer;
}

void ChatRoomUpToServer::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    payloadtype_ = 0u;
    if (has_createchatroomreq()) {
      if (createchatroomreq_ != NULL) createchatroomreq_->::qihoo::protocol::chatroom::CreateChatRoomRequest::Clear();
    }
    if (has_getchatroominforeq()) {
      if (getchatroominforeq_ != NULL) getchatroominforeq_->::qihoo::protocol::chatroom::GetChatRoomDetailRequest::Clear();
    }
    if (has_applyjoinchatroomreq()) {
      if (applyjoinchatroomreq_ != NULL) applyjoinchatroomreq_->::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::Clear();
    }
    if (has_quitchatroomreq()) {
      if (quitchatroomreq_ != NULL) quitchatroomreq_->::qihoo::protocol::chatroom::QuitChatRoomRequest::Clear();
    }
    if (has_updatechatroomreq()) {
      if (updatechatroomreq_ != NULL) updatechatroomreq_->::qihoo::protocol::chatroom::UpdateChatRoomRequest::Clear();
    }
    if (has_kickmemberreq()) {
      if (kickmemberreq_ != NULL) kickmemberreq_->::qihoo::protocol::chatroom::KickChatRoomMemberRequest::Clear();
    }
    if (has_querychatroomidreq()) {
      if (querychatroomidreq_ != NULL) querychatroomidreq_->::qihoo::protocol::chatroom::QueryChatRoomIDRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_updategameidreq()) {
      if (updategameidreq_ != NULL) updategameidreq_->::qihoo::protocol::chatroom::UpdateRoomIDRequest::Clear();
    }
    if (has_queryallgameroomreq()) {
      if (queryallgameroomreq_ != NULL) queryallgameroomreq_->::qihoo::protocol::chatroom::QueryAllGameRoomRequest::Clear();
    }
    if (has_chatroommessagereq()) {
      if (chatroommessagereq_ != NULL) chatroommessagereq_->::qihoo::protocol::chatroom::ChatRoomMessageRequest::Clear();
    }
    if (has_createrooms()) {
      if (createrooms_ != NULL) createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::Clear();
    }
    if (has_syncroomtodba()) {
      if (syncroomtodba_ != NULL) syncroomtodba_->::qihoo::protocol::chatroom::SyncRoomToDBRequest::Clear();
    }
    if (has_subreq()) {
      if (subreq_ != NULL) subreq_->::qihoo::protocol::chatroom::SubscribeRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomUpToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 payloadtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payloadtype_)));
          set_has_payloadtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createchatroomreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
      case 2: {
        if (tag == 18) {
         parse_createchatroomreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createchatroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getchatroominforeq;
        break;
      }

      // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
      case 3: {
        if (tag == 26) {
         parse_getchatroominforeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getchatroominforeq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_applyjoinchatroomreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
      case 4: {
        if (tag == 34) {
         parse_applyjoinchatroomreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyjoinchatroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quitchatroomreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
      case 5: {
        if (tag == 42) {
         parse_quitchatroomreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitchatroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_updatechatroomreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
      case 6: {
        if (tag == 50) {
         parse_updatechatroomreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatechatroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_kickmemberreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
      case 7: {
        if (tag == 58) {
         parse_kickmemberreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickmemberreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_querychatroomidreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
      case 8: {
        if (tag == 66) {
         parse_querychatroomidreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querychatroomidreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_updategameidreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
      case 9: {
        if (tag == 74) {
         parse_updategameidreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updategameidreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_queryallgameroomreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
      case 10: {
        if (tag == 82) {
         parse_queryallgameroomreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryallgameroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_chatroommessagereq;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
      case 11: {
        if (tag == 90) {
         parse_chatroommessagereq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroommessagereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_createrooms;
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
      case 12: {
        if (tag == 98) {
         parse_createrooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createrooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_syncroomtodba;
        break;
      }

      // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
      case 13: {
        if (tag == 106) {
         parse_syncroomtodba:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncroomtodba()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_subreq;
        break;
      }

      // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
      case 14: {
        if (tag == 114) {
         parse_subreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomUpToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomUpToServer)
  return false;
#undef DO_
}

void ChatRoomUpToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  // required uint32 payloadtype = 1;
  if (has_payloadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->payloadtype(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
  if (has_createchatroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->createchatroomreq(), output);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
  if (has_getchatroominforeq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getchatroominforeq(), output);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
  if (has_applyjoinchatroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->applyjoinchatroomreq(), output);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
  if (has_quitchatroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quitchatroomreq(), output);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
  if (has_updatechatroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->updatechatroomreq(), output);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
  if (has_kickmemberreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kickmemberreq(), output);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
  if (has_querychatroomidreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->querychatroomidreq(), output);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
  if (has_updategameidreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->updategameidreq(), output);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
  if (has_queryallgameroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->queryallgameroomreq(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
  if (has_chatroommessagereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->chatroommessagereq(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
  if (has_createrooms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->createrooms(), output);
  }

  // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
  if (has_syncroomtodba()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->syncroomtodba(), output);
  }

  // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
  if (has_subreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->subreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomUpToServer)
}

::google::protobuf::uint8* ChatRoomUpToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  // required uint32 payloadtype = 1;
  if (has_payloadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->payloadtype(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
  if (has_createchatroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->createchatroomreq(), target);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
  if (has_getchatroominforeq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getchatroominforeq(), target);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
  if (has_applyjoinchatroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->applyjoinchatroomreq(), target);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
  if (has_quitchatroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quitchatroomreq(), target);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
  if (has_updatechatroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->updatechatroomreq(), target);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
  if (has_kickmemberreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kickmemberreq(), target);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
  if (has_querychatroomidreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->querychatroomidreq(), target);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
  if (has_updategameidreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->updategameidreq(), target);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
  if (has_queryallgameroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->queryallgameroomreq(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
  if (has_chatroommessagereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->chatroommessagereq(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
  if (has_createrooms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->createrooms(), target);
  }

  // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
  if (has_syncroomtodba()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->syncroomtodba(), target);
  }

  // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
  if (has_subreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->subreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomUpToServer)
  return target;
}

int ChatRoomUpToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 payloadtype = 1;
    if (has_payloadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payloadtype());
    }

    // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
    if (has_createchatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createchatroomreq());
    }

    // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
    if (has_getchatroominforeq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getchatroominforeq());
    }

    // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
    if (has_applyjoinchatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applyjoinchatroomreq());
    }

    // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
    if (has_quitchatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitchatroomreq());
    }

    // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
    if (has_updatechatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatechatroomreq());
    }

    // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
    if (has_kickmemberreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickmemberreq());
    }

    // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
    if (has_querychatroomidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querychatroomidreq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
    if (has_updategameidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updategameidreq());
    }

    // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
    if (has_queryallgameroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryallgameroomreq());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
    if (has_chatroommessagereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatroommessagereq());
    }

    // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
    if (has_createrooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createrooms());
    }

    // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
    if (has_syncroomtodba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncroomtodba());
    }

    // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
    if (has_subreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomUpToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomUpToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomUpToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomUpToServer::MergeFrom(const ChatRoomUpToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payloadtype()) {
      set_payloadtype(from.payloadtype());
    }
    if (from.has_createchatroomreq()) {
      mutable_createchatroomreq()->::qihoo::protocol::chatroom::CreateChatRoomRequest::MergeFrom(from.createchatroomreq());
    }
    if (from.has_getchatroominforeq()) {
      mutable_getchatroominforeq()->::qihoo::protocol::chatroom::GetChatRoomDetailRequest::MergeFrom(from.getchatroominforeq());
    }
    if (from.has_applyjoinchatroomreq()) {
      mutable_applyjoinchatroomreq()->::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::MergeFrom(from.applyjoinchatroomreq());
    }
    if (from.has_quitchatroomreq()) {
      mutable_quitchatroomreq()->::qihoo::protocol::chatroom::QuitChatRoomRequest::MergeFrom(from.quitchatroomreq());
    }
    if (from.has_updatechatroomreq()) {
      mutable_updatechatroomreq()->::qihoo::protocol::chatroom::UpdateChatRoomRequest::MergeFrom(from.updatechatroomreq());
    }
    if (from.has_kickmemberreq()) {
      mutable_kickmemberreq()->::qihoo::protocol::chatroom::KickChatRoomMemberRequest::MergeFrom(from.kickmemberreq());
    }
    if (from.has_querychatroomidreq()) {
      mutable_querychatroomidreq()->::qihoo::protocol::chatroom::QueryChatRoomIDRequest::MergeFrom(from.querychatroomidreq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updategameidreq()) {
      mutable_updategameidreq()->::qihoo::protocol::chatroom::UpdateRoomIDRequest::MergeFrom(from.updategameidreq());
    }
    if (from.has_queryallgameroomreq()) {
      mutable_queryallgameroomreq()->::qihoo::protocol::chatroom::QueryAllGameRoomRequest::MergeFrom(from.queryallgameroomreq());
    }
    if (from.has_chatroommessagereq()) {
      mutable_chatroommessagereq()->::qihoo::protocol::chatroom::ChatRoomMessageRequest::MergeFrom(from.chatroommessagereq());
    }
    if (from.has_createrooms()) {
      mutable_createrooms()->::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::MergeFrom(from.createrooms());
    }
    if (from.has_syncroomtodba()) {
      mutable_syncroomtodba()->::qihoo::protocol::chatroom::SyncRoomToDBRequest::MergeFrom(from.syncroomtodba());
    }
    if (from.has_subreq()) {
      mutable_subreq()->::qihoo::protocol::chatroom::SubscribeRequest::MergeFrom(from.subreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomUpToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomUpToServer::CopyFrom(const ChatRoomUpToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomUpToServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_createchatroomreq()) {
    if (!this->createchatroomreq().IsInitialized()) return false;
  }
  if (has_getchatroominforeq()) {
    if (!this->getchatroominforeq().IsInitialized()) return false;
  }
  if (has_applyjoinchatroomreq()) {
    if (!this->applyjoinchatroomreq().IsInitialized()) return false;
  }
  if (has_quitchatroomreq()) {
    if (!this->quitchatroomreq().IsInitialized()) return false;
  }
  if (has_updatechatroomreq()) {
    if (!this->updatechatroomreq().IsInitialized()) return false;
  }
  if (has_kickmemberreq()) {
    if (!this->kickmemberreq().IsInitialized()) return false;
  }
  if (has_querychatroomidreq()) {
    if (!this->querychatroomidreq().IsInitialized()) return false;
  }
  if (has_updategameidreq()) {
    if (!this->updategameidreq().IsInitialized()) return false;
  }
  if (has_chatroommessagereq()) {
    if (!this->chatroommessagereq().IsInitialized()) return false;
  }
  if (has_createrooms()) {
    if (!this->createrooms().IsInitialized()) return false;
  }
  if (has_syncroomtodba()) {
    if (!this->syncroomtodba().IsInitialized()) return false;
  }
  if (has_subreq()) {
    if (!this->subreq().IsInitialized()) return false;
  }
  return true;
}

void ChatRoomUpToServer::Swap(ChatRoomUpToServer* other) {
  if (other != this) {
    std::swap(payloadtype_, other->payloadtype_);
    std::swap(createchatroomreq_, other->createchatroomreq_);
    std::swap(getchatroominforeq_, other->getchatroominforeq_);
    std::swap(applyjoinchatroomreq_, other->applyjoinchatroomreq_);
    std::swap(quitchatroomreq_, other->quitchatroomreq_);
    std::swap(updatechatroomreq_, other->updatechatroomreq_);
    std::swap(kickmemberreq_, other->kickmemberreq_);
    std::swap(querychatroomidreq_, other->querychatroomidreq_);
    std::swap(updategameidreq_, other->updategameidreq_);
    std::swap(queryallgameroomreq_, other->queryallgameroomreq_);
    std::swap(chatroommessagereq_, other->chatroommessagereq_);
    std::swap(createrooms_, other->createrooms_);
    std::swap(syncroomtodba_, other->syncroomtodba_);
    std::swap(subreq_, other->subreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomUpToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomUpToServer_descriptor_;
  metadata.reflection = ChatRoomUpToServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomDownToUser::kResultFieldNumber;
const int ChatRoomDownToUser::kPayloadtypeFieldNumber;
const int ChatRoomDownToUser::kCreatechatroomrespFieldNumber;
const int ChatRoomDownToUser::kGetchatroominforespFieldNumber;
const int ChatRoomDownToUser::kApplyjoinchatroomrespFieldNumber;
const int ChatRoomDownToUser::kQuitchatroomrespFieldNumber;
const int ChatRoomDownToUser::kUpdatechatroomrespFieldNumber;
const int ChatRoomDownToUser::kKickmemberrespFieldNumber;
const int ChatRoomDownToUser::kQuerychatroomidrespFieldNumber;
const int ChatRoomDownToUser::kUpdategameidrespFieldNumber;
const int ChatRoomDownToUser::kQueryallgameroomrespFieldNumber;
const int ChatRoomDownToUser::kChatroommessagerespFieldNumber;
const int ChatRoomDownToUser::kNewmsgnotifyFieldNumber;
const int ChatRoomDownToUser::kErrormsgnotifyFieldNumber;
const int ChatRoomDownToUser::kCreateroomsFieldNumber;
const int ChatRoomDownToUser::kMemberjoinnotifyFieldNumber;
const int ChatRoomDownToUser::kMemberquitnotifyFieldNumber;
const int ChatRoomDownToUser::kSubrespFieldNumber;
const int ChatRoomDownToUser::kReasonFieldNumber;
const int ChatRoomDownToUser::kMultinotifyFieldNumber;
#endif  // !_MSC_VER

ChatRoomDownToUser::ChatRoomDownToUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomDownToUser)
}

void ChatRoomDownToUser::InitAsDefaultInstance() {
  createchatroomresp_ = const_cast< ::qihoo::protocol::chatroom::CreateChatRoomResponse*>(&::qihoo::protocol::chatroom::CreateChatRoomResponse::default_instance());
  getchatroominforesp_ = const_cast< ::qihoo::protocol::chatroom::GetChatRoomDetailResponse*>(&::qihoo::protocol::chatroom::GetChatRoomDetailResponse::default_instance());
  applyjoinchatroomresp_ = const_cast< ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse*>(&::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::default_instance());
  quitchatroomresp_ = const_cast< ::qihoo::protocol::chatroom::QuitChatRoomResponse*>(&::qihoo::protocol::chatroom::QuitChatRoomResponse::default_instance());
  updatechatroomresp_ = const_cast< ::qihoo::protocol::chatroom::UpdateChatRoomResponse*>(&::qihoo::protocol::chatroom::UpdateChatRoomResponse::default_instance());
  kickmemberresp_ = const_cast< ::qihoo::protocol::chatroom::KickChatRoomMemberResponse*>(&::qihoo::protocol::chatroom::KickChatRoomMemberResponse::default_instance());
  querychatroomidresp_ = const_cast< ::qihoo::protocol::chatroom::QueryChatRoomIDResponse*>(&::qihoo::protocol::chatroom::QueryChatRoomIDResponse::default_instance());
  updategameidresp_ = const_cast< ::qihoo::protocol::chatroom::UpdateRoomIDResponse*>(&::qihoo::protocol::chatroom::UpdateRoomIDResponse::default_instance());
  queryallgameroomresp_ = const_cast< ::qihoo::protocol::chatroom::QueryAllGameRoomResponse*>(&::qihoo::protocol::chatroom::QueryAllGameRoomResponse::default_instance());
  chatroommessageresp_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomMessageResponse*>(&::qihoo::protocol::chatroom::ChatRoomMessageResponse::default_instance());
  newmsgnotify_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomNewMsg*>(&::qihoo::protocol::chatroom::ChatRoomNewMsg::default_instance());
  errormsgnotify_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomErrorMsg*>(&::qihoo::protocol::chatroom::ChatRoomErrorMsg::default_instance());
  createrooms_ = const_cast< ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse*>(&::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::default_instance());
  memberjoinnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify*>(&::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::default_instance());
  memberquitnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify*>(&::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::default_instance());
  subresp_ = const_cast< ::qihoo::protocol::chatroom::SubscribeResponse*>(&::qihoo::protocol::chatroom::SubscribeResponse::default_instance());
}

ChatRoomDownToUser::ChatRoomDownToUser(const ChatRoomDownToUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomDownToUser)
}

void ChatRoomDownToUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  payloadtype_ = 0u;
  createchatroomresp_ = NULL;
  getchatroominforesp_ = NULL;
  applyjoinchatroomresp_ = NULL;
  quitchatroomresp_ = NULL;
  updatechatroomresp_ = NULL;
  kickmemberresp_ = NULL;
  querychatroomidresp_ = NULL;
  updategameidresp_ = NULL;
  queryallgameroomresp_ = NULL;
  chatroommessageresp_ = NULL;
  newmsgnotify_ = NULL;
  errormsgnotify_ = NULL;
  createrooms_ = NULL;
  memberjoinnotify_ = NULL;
  memberquitnotify_ = NULL;
  subresp_ = NULL;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomDownToUser::~ChatRoomDownToUser() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomDownToUser)
  SharedDtor();
}

void ChatRoomDownToUser::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete createchatroomresp_;
    delete getchatroominforesp_;
    delete applyjoinchatroomresp_;
    delete quitchatroomresp_;
    delete updatechatroomresp_;
    delete kickmemberresp_;
    delete querychatroomidresp_;
    delete updategameidresp_;
    delete queryallgameroomresp_;
    delete chatroommessageresp_;
    delete newmsgnotify_;
    delete errormsgnotify_;
    delete createrooms_;
    delete memberjoinnotify_;
    delete memberquitnotify_;
    delete subresp_;
  }
}

void ChatRoomDownToUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomDownToUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomDownToUser_descriptor_;
}

const ChatRoomDownToUser& ChatRoomDownToUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomDownToUser* ChatRoomDownToUser::default_instance_ = NULL;

ChatRoomDownToUser* ChatRoomDownToUser::New() const {
  return new ChatRoomDownToUser;
}

void ChatRoomDownToUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomDownToUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_, payloadtype_);
    if (has_createchatroomresp()) {
      if (createchatroomresp_ != NULL) createchatroomresp_->::qihoo::protocol::chatroom::CreateChatRoomResponse::Clear();
    }
    if (has_getchatroominforesp()) {
      if (getchatroominforesp_ != NULL) getchatroominforesp_->::qihoo::protocol::chatroom::GetChatRoomDetailResponse::Clear();
    }
    if (has_applyjoinchatroomresp()) {
      if (applyjoinchatroomresp_ != NULL) applyjoinchatroomresp_->::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::Clear();
    }
    if (has_quitchatroomresp()) {
      if (quitchatroomresp_ != NULL) quitchatroomresp_->::qihoo::protocol::chatroom::QuitChatRoomResponse::Clear();
    }
    if (has_updatechatroomresp()) {
      if (updatechatroomresp_ != NULL) updatechatroomresp_->::qihoo::protocol::chatroom::UpdateChatRoomResponse::Clear();
    }
    if (has_kickmemberresp()) {
      if (kickmemberresp_ != NULL) kickmemberresp_->::qihoo::protocol::chatroom::KickChatRoomMemberResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_querychatroomidresp()) {
      if (querychatroomidresp_ != NULL) querychatroomidresp_->::qihoo::protocol::chatroom::QueryChatRoomIDResponse::Clear();
    }
    if (has_updategameidresp()) {
      if (updategameidresp_ != NULL) updategameidresp_->::qihoo::protocol::chatroom::UpdateRoomIDResponse::Clear();
    }
    if (has_queryallgameroomresp()) {
      if (queryallgameroomresp_ != NULL) queryallgameroomresp_->::qihoo::protocol::chatroom::QueryAllGameRoomResponse::Clear();
    }
    if (has_chatroommessageresp()) {
      if (chatroommessageresp_ != NULL) chatroommessageresp_->::qihoo::protocol::chatroom::ChatRoomMessageResponse::Clear();
    }
    if (has_newmsgnotify()) {
      if (newmsgnotify_ != NULL) newmsgnotify_->::qihoo::protocol::chatroom::ChatRoomNewMsg::Clear();
    }
    if (has_errormsgnotify()) {
      if (errormsgnotify_ != NULL) errormsgnotify_->::qihoo::protocol::chatroom::ChatRoomErrorMsg::Clear();
    }
    if (has_createrooms()) {
      if (createrooms_ != NULL) createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::Clear();
    }
    if (has_memberjoinnotify()) {
      if (memberjoinnotify_ != NULL) memberjoinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_memberquitnotify()) {
      if (memberquitnotify_ != NULL) memberquitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
    }
    if (has_subresp()) {
      if (subresp_ != NULL) subresp_->::qihoo::protocol::chatroom::SubscribeResponse::Clear();
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  multinotify_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomDownToUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_payloadtype;
        break;
      }

      // required uint32 payloadtype = 2;
      case 2: {
        if (tag == 16) {
         parse_payloadtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payloadtype_)));
          set_has_payloadtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_createchatroomresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
      case 3: {
        if (tag == 26) {
         parse_createchatroomresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createchatroomresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_getchatroominforesp;
        break;
      }

      // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
      case 4: {
        if (tag == 34) {
         parse_getchatroominforesp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getchatroominforesp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_applyjoinchatroomresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
      case 5: {
        if (tag == 42) {
         parse_applyjoinchatroomresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyjoinchatroomresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quitchatroomresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
      case 6: {
        if (tag == 50) {
         parse_quitchatroomresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitchatroomresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_updatechatroomresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
      case 7: {
        if (tag == 58) {
         parse_updatechatroomresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatechatroomresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_kickmemberresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
      case 8: {
        if (tag == 66) {
         parse_kickmemberresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickmemberresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_querychatroomidresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
      case 9: {
        if (tag == 74) {
         parse_querychatroomidresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querychatroomidresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_updategameidresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
      case 10: {
        if (tag == 82) {
         parse_updategameidresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updategameidresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_queryallgameroomresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
      case 11: {
        if (tag == 90) {
         parse_queryallgameroomresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryallgameroomresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_chatroommessageresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
      case 12: {
        if (tag == 98) {
         parse_chatroommessageresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroommessageresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_newmsgnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
      case 13: {
        if (tag == 106) {
         parse_newmsgnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newmsgnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_errormsgnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
      case 14: {
        if (tag == 114) {
         parse_errormsgnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormsgnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_createrooms;
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
      case 15: {
        if (tag == 122) {
         parse_createrooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createrooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_memberjoinnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
      case 16: {
        if (tag == 130) {
         parse_memberjoinnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberjoinnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_memberquitnotify;
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
      case 17: {
        if (tag == 138) {
         parse_memberquitnotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberquitnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_subresp;
        break;
      }

      // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
      case 18: {
        if (tag == 146) {
         parse_subresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_reason;
        break;
      }

      // optional bytes reason = 100;
      case 100: {
        if (tag == 802) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_multinotify;
        break;
      }

      // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
      case 200: {
        if (tag == 1602) {
         parse_multinotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multinotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_multinotify;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomDownToUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomDownToUser)
  return false;
#undef DO_
}

void ChatRoomDownToUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 payloadtype = 2;
  if (has_payloadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payloadtype(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
  if (has_createchatroomresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->createchatroomresp(), output);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
  if (has_getchatroominforesp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getchatroominforesp(), output);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
  if (has_applyjoinchatroomresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applyjoinchatroomresp(), output);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
  if (has_quitchatroomresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->quitchatroomresp(), output);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
  if (has_updatechatroomresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->updatechatroomresp(), output);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
  if (has_kickmemberresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->kickmemberresp(), output);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
  if (has_querychatroomidresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->querychatroomidresp(), output);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
  if (has_updategameidresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->updategameidresp(), output);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
  if (has_queryallgameroomresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->queryallgameroomresp(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
  if (has_chatroommessageresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->chatroommessageresp(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
  if (has_newmsgnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->newmsgnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
  if (has_errormsgnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->errormsgnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
  if (has_createrooms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->createrooms(), output);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
  if (has_memberjoinnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->memberjoinnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
  if (has_memberquitnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->memberquitnotify(), output);
  }

  // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
  if (has_subresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->subresp(), output);
  }

  // optional bytes reason = 100;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      100, this->reason(), output);
  }

  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  for (int i = 0; i < this->multinotify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->multinotify(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomDownToUser)
}

::google::protobuf::uint8* ChatRoomDownToUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 payloadtype = 2;
  if (has_payloadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payloadtype(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
  if (has_createchatroomresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->createchatroomresp(), target);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
  if (has_getchatroominforesp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getchatroominforesp(), target);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
  if (has_applyjoinchatroomresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applyjoinchatroomresp(), target);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
  if (has_quitchatroomresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->quitchatroomresp(), target);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
  if (has_updatechatroomresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->updatechatroomresp(), target);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
  if (has_kickmemberresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->kickmemberresp(), target);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
  if (has_querychatroomidresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->querychatroomidresp(), target);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
  if (has_updategameidresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->updategameidresp(), target);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
  if (has_queryallgameroomresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->queryallgameroomresp(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
  if (has_chatroommessageresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->chatroommessageresp(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
  if (has_newmsgnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->newmsgnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
  if (has_errormsgnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->errormsgnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
  if (has_createrooms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->createrooms(), target);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
  if (has_memberjoinnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->memberjoinnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
  if (has_memberquitnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->memberquitnotify(), target);
  }

  // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
  if (has_subresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->subresp(), target);
  }

  // optional bytes reason = 100;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->reason(), target);
  }

  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  for (int i = 0; i < this->multinotify_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->multinotify(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomDownToUser)
  return target;
}

int ChatRoomDownToUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint32 payloadtype = 2;
    if (has_payloadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payloadtype());
    }

    // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
    if (has_createchatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createchatroomresp());
    }

    // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
    if (has_getchatroominforesp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getchatroominforesp());
    }

    // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
    if (has_applyjoinchatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applyjoinchatroomresp());
    }

    // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
    if (has_quitchatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitchatroomresp());
    }

    // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
    if (has_updatechatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatechatroomresp());
    }

    // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
    if (has_kickmemberresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickmemberresp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
    if (has_querychatroomidresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querychatroomidresp());
    }

    // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
    if (has_updategameidresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updategameidresp());
    }

    // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
    if (has_queryallgameroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryallgameroomresp());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
    if (has_chatroommessageresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatroommessageresp());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
    if (has_newmsgnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newmsgnotify());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
    if (has_errormsgnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errormsgnotify());
    }

    // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
    if (has_createrooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createrooms());
    }

    // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
    if (has_memberjoinnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberjoinnotify());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
    if (has_memberquitnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberquitnotify());
    }

    // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
    if (has_subresp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subresp());
    }

    // optional bytes reason = 100;
    if (has_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

  }
  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  total_size += 2 * this->multinotify_size();
  for (int i = 0; i < this->multinotify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multinotify(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomDownToUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomDownToUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomDownToUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomDownToUser::MergeFrom(const ChatRoomDownToUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  multinotify_.MergeFrom(from.multinotify_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_payloadtype()) {
      set_payloadtype(from.payloadtype());
    }
    if (from.has_createchatroomresp()) {
      mutable_createchatroomresp()->::qihoo::protocol::chatroom::CreateChatRoomResponse::MergeFrom(from.createchatroomresp());
    }
    if (from.has_getchatroominforesp()) {
      mutable_getchatroominforesp()->::qihoo::protocol::chatroom::GetChatRoomDetailResponse::MergeFrom(from.getchatroominforesp());
    }
    if (from.has_applyjoinchatroomresp()) {
      mutable_applyjoinchatroomresp()->::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::MergeFrom(from.applyjoinchatroomresp());
    }
    if (from.has_quitchatroomresp()) {
      mutable_quitchatroomresp()->::qihoo::protocol::chatroom::QuitChatRoomResponse::MergeFrom(from.quitchatroomresp());
    }
    if (from.has_updatechatroomresp()) {
      mutable_updatechatroomresp()->::qihoo::protocol::chatroom::UpdateChatRoomResponse::MergeFrom(from.updatechatroomresp());
    }
    if (from.has_kickmemberresp()) {
      mutable_kickmemberresp()->::qihoo::protocol::chatroom::KickChatRoomMemberResponse::MergeFrom(from.kickmemberresp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_querychatroomidresp()) {
      mutable_querychatroomidresp()->::qihoo::protocol::chatroom::QueryChatRoomIDResponse::MergeFrom(from.querychatroomidresp());
    }
    if (from.has_updategameidresp()) {
      mutable_updategameidresp()->::qihoo::protocol::chatroom::UpdateRoomIDResponse::MergeFrom(from.updategameidresp());
    }
    if (from.has_queryallgameroomresp()) {
      mutable_queryallgameroomresp()->::qihoo::protocol::chatroom::QueryAllGameRoomResponse::MergeFrom(from.queryallgameroomresp());
    }
    if (from.has_chatroommessageresp()) {
      mutable_chatroommessageresp()->::qihoo::protocol::chatroom::ChatRoomMessageResponse::MergeFrom(from.chatroommessageresp());
    }
    if (from.has_newmsgnotify()) {
      mutable_newmsgnotify()->::qihoo::protocol::chatroom::ChatRoomNewMsg::MergeFrom(from.newmsgnotify());
    }
    if (from.has_errormsgnotify()) {
      mutable_errormsgnotify()->::qihoo::protocol::chatroom::ChatRoomErrorMsg::MergeFrom(from.errormsgnotify());
    }
    if (from.has_createrooms()) {
      mutable_createrooms()->::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::MergeFrom(from.createrooms());
    }
    if (from.has_memberjoinnotify()) {
      mutable_memberjoinnotify()->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::MergeFrom(from.memberjoinnotify());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_memberquitnotify()) {
      mutable_memberquitnotify()->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::MergeFrom(from.memberquitnotify());
    }
    if (from.has_subresp()) {
      mutable_subresp()->::qihoo::protocol::chatroom::SubscribeResponse::MergeFrom(from.subresp());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomDownToUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomDownToUser::CopyFrom(const ChatRoomDownToUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomDownToUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_createchatroomresp()) {
    if (!this->createchatroomresp().IsInitialized()) return false;
  }
  if (has_getchatroominforesp()) {
    if (!this->getchatroominforesp().IsInitialized()) return false;
  }
  if (has_applyjoinchatroomresp()) {
    if (!this->applyjoinchatroomresp().IsInitialized()) return false;
  }
  if (has_quitchatroomresp()) {
    if (!this->quitchatroomresp().IsInitialized()) return false;
  }
  if (has_updatechatroomresp()) {
    if (!this->updatechatroomresp().IsInitialized()) return false;
  }
  if (has_kickmemberresp()) {
    if (!this->kickmemberresp().IsInitialized()) return false;
  }
  if (has_queryallgameroomresp()) {
    if (!this->queryallgameroomresp().IsInitialized()) return false;
  }
  if (has_newmsgnotify()) {
    if (!this->newmsgnotify().IsInitialized()) return false;
  }
  if (has_errormsgnotify()) {
    if (!this->errormsgnotify().IsInitialized()) return false;
  }
  if (has_createrooms()) {
    if (!this->createrooms().IsInitialized()) return false;
  }
  if (has_memberjoinnotify()) {
    if (!this->memberjoinnotify().IsInitialized()) return false;
  }
  if (has_memberquitnotify()) {
    if (!this->memberquitnotify().IsInitialized()) return false;
  }
  if (has_subresp()) {
    if (!this->subresp().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->multinotify())) return false;
  return true;
}

void ChatRoomDownToUser::Swap(ChatRoomDownToUser* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(payloadtype_, other->payloadtype_);
    std::swap(createchatroomresp_, other->createchatroomresp_);
    std::swap(getchatroominforesp_, other->getchatroominforesp_);
    std::swap(applyjoinchatroomresp_, other->applyjoinchatroomresp_);
    std::swap(quitchatroomresp_, other->quitchatroomresp_);
    std::swap(updatechatroomresp_, other->updatechatroomresp_);
    std::swap(kickmemberresp_, other->kickmemberresp_);
    std::swap(querychatroomidresp_, other->querychatroomidresp_);
    std::swap(updategameidresp_, other->updategameidresp_);
    std::swap(queryallgameroomresp_, other->queryallgameroomresp_);
    std::swap(chatroommessageresp_, other->chatroommessageresp_);
    std::swap(newmsgnotify_, other->newmsgnotify_);
    std::swap(errormsgnotify_, other->errormsgnotify_);
    std::swap(createrooms_, other->createrooms_);
    std::swap(memberjoinnotify_, other->memberjoinnotify_);
    std::swap(memberquitnotify_, other->memberquitnotify_);
    std::swap(subresp_, other->subresp_);
    std::swap(reason_, other->reason_);
    multinotify_.Swap(&other->multinotify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomDownToUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomDownToUser_descriptor_;
  metadata.reflection = ChatRoomDownToUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomPacket::kRoomidFieldNumber;
const int ChatRoomPacket::kToServerDataFieldNumber;
const int ChatRoomPacket::kToUserDataFieldNumber;
const int ChatRoomPacket::kUuidFieldNumber;
const int ChatRoomPacket::kClientSnFieldNumber;
const int ChatRoomPacket::kAppidFieldNumber;
#endif  // !_MSC_VER

ChatRoomPacket::ChatRoomPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomPacket)
}

void ChatRoomPacket::InitAsDefaultInstance() {
  to_server_data_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomUpToServer*>(&::qihoo::protocol::chatroom::ChatRoomUpToServer::default_instance());
  to_user_data_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomDownToUser*>(&::qihoo::protocol::chatroom::ChatRoomDownToUser::default_instance());
}

ChatRoomPacket::ChatRoomPacket(const ChatRoomPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomPacket)
}

void ChatRoomPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_server_data_ = NULL;
  to_user_data_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_sn_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomPacket::~ChatRoomPacket() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomPacket)
  SharedDtor();
}

void ChatRoomPacket::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete to_server_data_;
    delete to_user_data_;
  }
}

void ChatRoomPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomPacket_descriptor_;
}

const ChatRoomPacket& ChatRoomPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ChatRoomPacket* ChatRoomPacket::default_instance_ = NULL;

ChatRoomPacket* ChatRoomPacket::New() const {
  return new ChatRoomPacket;
}

void ChatRoomPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(client_sn_, appid_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
    if (has_to_server_data()) {
      if (to_server_data_ != NULL) to_server_data_->::qihoo::protocol::chatroom::ChatRoomUpToServer::Clear();
    }
    if (has_to_user_data()) {
      if (to_user_data_ != NULL) to_user_data_->::qihoo::protocol::chatroom::ChatRoomDownToUser::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to_server_data;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
      case 2: {
        if (tag == 18) {
         parse_to_server_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_server_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_user_data;
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
      case 3: {
        if (tag == 26) {
         parse_to_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_client_sn;
        break;
      }

      // optional uint64 client_sn = 5;
      case 5: {
        if (tag == 40) {
         parse_client_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_sn_)));
          set_has_client_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (tag == 48) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomPacket)
  return false;
#undef DO_
}

void ChatRoomPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomPacket)
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
  if (has_to_server_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to_server_data(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
  if (has_to_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->to_user_data(), output);
  }

  // optional string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // optional uint64 client_sn = 5;
  if (has_client_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->client_sn(), output);
  }

  // optional uint32 appid = 6;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomPacket)
}

::google::protobuf::uint8* ChatRoomPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomPacket)
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
  if (has_to_server_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to_server_data(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
  if (has_to_user_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->to_user_data(), target);
  }

  // optional string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // optional uint64 client_sn = 5;
  if (has_client_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->client_sn(), target);
  }

  // optional uint32 appid = 6;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomPacket)
  return target;
}

int ChatRoomPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
    if (has_to_server_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_server_data());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
    if (has_to_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_user_data());
    }

    // optional string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional uint64 client_sn = 5;
    if (has_client_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_sn());
    }

    // optional uint32 appid = 6;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomPacket::MergeFrom(const ChatRoomPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_to_server_data()) {
      mutable_to_server_data()->::qihoo::protocol::chatroom::ChatRoomUpToServer::MergeFrom(from.to_server_data());
    }
    if (from.has_to_user_data()) {
      mutable_to_user_data()->::qihoo::protocol::chatroom::ChatRoomDownToUser::MergeFrom(from.to_user_data());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_client_sn()) {
      set_client_sn(from.client_sn());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomPacket::CopyFrom(const ChatRoomPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_to_server_data()) {
    if (!this->to_server_data().IsInitialized()) return false;
  }
  if (has_to_user_data()) {
    if (!this->to_user_data().IsInitialized()) return false;
  }
  return true;
}

void ChatRoomPacket::Swap(ChatRoomPacket* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(to_server_data_, other->to_server_data_);
    std::swap(to_user_data_, other->to_user_data_);
    std::swap(uuid_, other->uuid_);
    std::swap(client_sn_, other->client_sn_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomPacket_descriptor_;
  metadata.reflection = ChatRoomPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatroom
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
