// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "registry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace registry {

namespace {

const ::google::protobuf::Descriptor* Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Down_Request_Get_Verifi_Code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Down_Request_Get_Verifi_Code_reflection_ = NULL;
const ::google::protobuf::Descriptor* Down_Response_Get_Verifi_Code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Down_Response_Get_Verifi_Code_reflection_ = NULL;
const ::google::protobuf::Descriptor* Down_Request_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Down_Request_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* Down_Response_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Down_Response_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* QID_Register_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QID_Register_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* QID_Register_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QID_Register_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_Register_Status_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_Register_Status_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_Register_Status_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_Register_Status_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_registry_2eproto() {
  protobuf_AddDesc_registry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "registry.proto");
  GOOGLE_CHECK(file != NULL);
  Pair_descriptor_ = file->message_type(0);
  static const int Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, value_),
  };
  Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pair_descriptor_,
      Pair::default_instance_,
      Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pair));
  Down_Request_Get_Verifi_Code_descriptor_ = file->message_type(1);
  static const int Down_Request_Get_Verifi_Code_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Get_Verifi_Code, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Get_Verifi_Code, cliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Get_Verifi_Code, pn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Get_Verifi_Code, pwd_),
  };
  Down_Request_Get_Verifi_Code_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Down_Request_Get_Verifi_Code_descriptor_,
      Down_Request_Get_Verifi_Code::default_instance_,
      Down_Request_Get_Verifi_Code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Get_Verifi_Code, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Get_Verifi_Code, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Down_Request_Get_Verifi_Code));
  Down_Response_Get_Verifi_Code_descriptor_ = file->message_type(2);
  static const int Down_Response_Get_Verifi_Code_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Get_Verifi_Code, errorcode_),
  };
  Down_Response_Get_Verifi_Code_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Down_Response_Get_Verifi_Code_descriptor_,
      Down_Response_Get_Verifi_Code::default_instance_,
      Down_Response_Get_Verifi_Code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Get_Verifi_Code, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Get_Verifi_Code, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Down_Response_Get_Verifi_Code));
  Down_Request_Register_descriptor_ = file->message_type(3);
  static const int Down_Request_Register_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, cliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, pn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, rvc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, app_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, info_),
  };
  Down_Request_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Down_Request_Register_descriptor_,
      Down_Request_Register::default_instance_,
      Down_Request_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Request_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Down_Request_Register));
  Down_Response_Register_descriptor_ = file->message_type(4);
  static const int Down_Response_Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Register, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Register, jid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Register, password_),
  };
  Down_Response_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Down_Response_Register_descriptor_,
      Down_Response_Register::default_instance_,
      Down_Response_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Down_Response_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Down_Response_Register));
  QID_Register_Request_descriptor_ = file->message_type(5);
  static const int QID_Register_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, cookie_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, cookie_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, client_ver_),
  };
  QID_Register_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QID_Register_Request_descriptor_,
      QID_Register_Request::default_instance_,
      QID_Register_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QID_Register_Request));
  QID_Register_Response_descriptor_ = file->message_type(6);
  static const int QID_Register_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Response, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Response, jid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Response, password_),
  };
  QID_Register_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QID_Register_Response_descriptor_,
      QID_Register_Response::default_instance_,
      QID_Register_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QID_Register_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QID_Register_Response));
  Query_Register_Status_Request_descriptor_ = file->message_type(7);
  static const int Query_Register_Status_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Request, pn_),
  };
  Query_Register_Status_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Query_Register_Status_Request_descriptor_,
      Query_Register_Status_Request::default_instance_,
      Query_Register_Status_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Query_Register_Status_Request));
  Query_Register_Status_Response_descriptor_ = file->message_type(8);
  static const int Query_Register_Status_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Response, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Response, pn_idx_),
  };
  Query_Register_Status_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Query_Register_Status_Response_descriptor_,
      Query_Register_Status_Response::default_instance_,
      Query_Register_Status_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Register_Status_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Query_Register_Status_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_registry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pair_descriptor_, &Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Down_Request_Get_Verifi_Code_descriptor_, &Down_Request_Get_Verifi_Code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Down_Response_Get_Verifi_Code_descriptor_, &Down_Response_Get_Verifi_Code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Down_Request_Register_descriptor_, &Down_Request_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Down_Response_Register_descriptor_, &Down_Response_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QID_Register_Request_descriptor_, &QID_Register_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QID_Register_Response_descriptor_, &QID_Register_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_Register_Status_Request_descriptor_, &Query_Register_Status_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_Register_Status_Response_descriptor_, &Query_Register_Status_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_registry_2eproto() {
  delete Pair::default_instance_;
  delete Pair_reflection_;
  delete Down_Request_Get_Verifi_Code::default_instance_;
  delete Down_Request_Get_Verifi_Code_reflection_;
  delete Down_Response_Get_Verifi_Code::default_instance_;
  delete Down_Response_Get_Verifi_Code_reflection_;
  delete Down_Request_Register::default_instance_;
  delete Down_Request_Register_reflection_;
  delete Down_Response_Register::default_instance_;
  delete Down_Response_Register_reflection_;
  delete QID_Register_Request::default_instance_;
  delete QID_Register_Request_reflection_;
  delete QID_Register_Response::default_instance_;
  delete QID_Register_Response_reflection_;
  delete Query_Register_Status_Request::default_instance_;
  delete Query_Register_Status_Request_reflection_;
  delete Query_Register_Status_Response::default_instance_;
  delete Query_Register_Status_Response_reflection_;
}

void protobuf_AddDesc_registry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016registry.proto\022\027qihoo.protocol.registr"
    "y\"\"\n\004Pair\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"V\n"
    "\034Down_Request_Get_Verifi_Code\022\r\n\005appid\030\001"
    " \002(\005\022\016\n\006cliver\030\002 \002(\014\022\n\n\002pn\030\003 \002(\014\022\013\n\003pwd\030"
    "\004 \001(\014\"2\n\035Down_Response_Get_Verifi_Code\022\021"
    "\n\terrorcode\030\001 \002(\005\"\216\001\n\025Down_Request_Regis"
    "ter\022\r\n\005appid\030\001 \002(\005\022\016\n\006cliver\030\002 \002(\014\022\n\n\002pn"
    "\030\003 \002(\014\022\013\n\003rvc\030\004 \002(\014\022\020\n\010app_uuid\030\005 \001(\014\022+\n"
    "\004info\030\006 \003(\0132\035.qihoo.protocol.registry.Pa"
    "ir\"J\n\026Down_Response_Register\022\021\n\terrorcod"
    "e\030\001 \002(\005\022\013\n\003jid\030\002 \001(\014\022\020\n\010password\030\003 \001(\014\"\227"
    "\001\n\024QID_Register_Request\022\020\n\010cookie_Q\030\001 \002("
    "\014\022\020\n\010cookie_T\030\002 \002(\014\022\013\n\003qid\030\003 \002(\014\022+\n\004info"
    "\030\004 \003(\0132\035.qihoo.protocol.registry.Pair\022\r\n"
    "\005appid\030\005 \001(\005\022\022\n\nclient_ver\030\006 \001(\014\"Y\n\025QID_"
    "Register_Response\022\021\n\terrorcode\030\001 \002(\005\022\016\n\006"
    "errmsg\030\002 \001(\014\022\013\n\003jid\030\003 \001(\014\022\020\n\010password\030\004 "
    "\001(\014\"+\n\035Query_Register_Status_Request\022\n\n\002"
    "pn\030\001 \003(\014\"S\n\036Query_Register_Status_Respon"
    "se\022\021\n\terrorcode\030\001 \002(\005\022\016\n\006errmsg\030\002 \002(\014\022\016\n"
    "\006pn_idx\030\003 \003(\014B5\n)com.qihoo.contact.cloud"
    ".protocol.messagesB\010Registry", 868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "registry.proto", &protobuf_RegisterTypes);
  Pair::default_instance_ = new Pair();
  Down_Request_Get_Verifi_Code::default_instance_ = new Down_Request_Get_Verifi_Code();
  Down_Response_Get_Verifi_Code::default_instance_ = new Down_Response_Get_Verifi_Code();
  Down_Request_Register::default_instance_ = new Down_Request_Register();
  Down_Response_Register::default_instance_ = new Down_Response_Register();
  QID_Register_Request::default_instance_ = new QID_Register_Request();
  QID_Register_Response::default_instance_ = new QID_Register_Response();
  Query_Register_Status_Request::default_instance_ = new Query_Register_Status_Request();
  Query_Register_Status_Response::default_instance_ = new Query_Register_Status_Response();
  Pair::default_instance_->InitAsDefaultInstance();
  Down_Request_Get_Verifi_Code::default_instance_->InitAsDefaultInstance();
  Down_Response_Get_Verifi_Code::default_instance_->InitAsDefaultInstance();
  Down_Request_Register::default_instance_->InitAsDefaultInstance();
  Down_Response_Register::default_instance_->InitAsDefaultInstance();
  QID_Register_Request::default_instance_->InitAsDefaultInstance();
  QID_Register_Response::default_instance_->InitAsDefaultInstance();
  Query_Register_Status_Request::default_instance_->InitAsDefaultInstance();
  Query_Register_Status_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_registry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_registry_2eproto {
  StaticDescriptorInitializer_registry_2eproto() {
    protobuf_AddDesc_registry_2eproto();
  }
} static_descriptor_initializer_registry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Pair::kKeyFieldNumber;
const int Pair::kValueFieldNumber;
#endif  // !_MSC_VER

Pair::Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Pair)
}

void Pair::InitAsDefaultInstance() {
}

Pair::Pair(const Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Pair)
}

void Pair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Pair)
  SharedDtor();
}

void Pair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pair_descriptor_;
}

const Pair& Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Pair* Pair::default_instance_ = NULL;

Pair* Pair::New() const {
  return new Pair;
}

void Pair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Pair)
  return false;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Pair)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Pair)
}

::google::protobuf::uint8* Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Pair)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Pair)
  return target;
}

int Pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pair::Swap(Pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pair_descriptor_;
  metadata.reflection = Pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Down_Request_Get_Verifi_Code::kAppidFieldNumber;
const int Down_Request_Get_Verifi_Code::kCliverFieldNumber;
const int Down_Request_Get_Verifi_Code::kPnFieldNumber;
const int Down_Request_Get_Verifi_Code::kPwdFieldNumber;
#endif  // !_MSC_VER

Down_Request_Get_Verifi_Code::Down_Request_Get_Verifi_Code()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
}

void Down_Request_Get_Verifi_Code::InitAsDefaultInstance() {
}

Down_Request_Get_Verifi_Code::Down_Request_Get_Verifi_Code(const Down_Request_Get_Verifi_Code& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
}

void Down_Request_Get_Verifi_Code::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0;
  cliver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Down_Request_Get_Verifi_Code::~Down_Request_Get_Verifi_Code() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  SharedDtor();
}

void Down_Request_Get_Verifi_Code::SharedDtor() {
  if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cliver_;
  }
  if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pn_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void Down_Request_Get_Verifi_Code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Down_Request_Get_Verifi_Code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Down_Request_Get_Verifi_Code_descriptor_;
}

const Down_Request_Get_Verifi_Code& Down_Request_Get_Verifi_Code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Down_Request_Get_Verifi_Code* Down_Request_Get_Verifi_Code::default_instance_ = NULL;

Down_Request_Get_Verifi_Code* Down_Request_Get_Verifi_Code::New() const {
  return new Down_Request_Get_Verifi_Code;
}

void Down_Request_Get_Verifi_Code::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    appid_ = 0;
    if (has_cliver()) {
      if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cliver_->clear();
      }
    }
    if (has_pn()) {
      if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pn_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Down_Request_Get_Verifi_Code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cliver;
        break;
      }

      // required bytes cliver = 2;
      case 2: {
        if (tag == 18) {
         parse_cliver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cliver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pn;
        break;
      }

      // required bytes pn = 3;
      case 3: {
        if (tag == 26) {
         parse_pn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pwd;
        break;
      }

      // optional bytes pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  return false;
#undef DO_
}

void Down_Request_Get_Verifi_Code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  // required int32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // required bytes cliver = 2;
  if (has_cliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cliver(), output);
  }

  // required bytes pn = 3;
  if (has_pn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pn(), output);
  }

  // optional bytes pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
}

::google::protobuf::uint8* Down_Request_Get_Verifi_Code::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  // required int32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // required bytes cliver = 2;
  if (has_cliver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cliver(), target);
  }

  // required bytes pn = 3;
  if (has_pn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pn(), target);
  }

  // optional bytes pwd = 4;
  if (has_pwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Down_Request_Get_Verifi_Code)
  return target;
}

int Down_Request_Get_Verifi_Code::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // required bytes cliver = 2;
    if (has_cliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cliver());
    }

    // required bytes pn = 3;
    if (has_pn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pn());
    }

    // optional bytes pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Down_Request_Get_Verifi_Code::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Down_Request_Get_Verifi_Code* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Down_Request_Get_Verifi_Code*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Down_Request_Get_Verifi_Code::MergeFrom(const Down_Request_Get_Verifi_Code& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_cliver()) {
      set_cliver(from.cliver());
    }
    if (from.has_pn()) {
      set_pn(from.pn());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Down_Request_Get_Verifi_Code::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Down_Request_Get_Verifi_Code::CopyFrom(const Down_Request_Get_Verifi_Code& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Down_Request_Get_Verifi_Code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Down_Request_Get_Verifi_Code::Swap(Down_Request_Get_Verifi_Code* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(cliver_, other->cliver_);
    std::swap(pn_, other->pn_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Down_Request_Get_Verifi_Code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Down_Request_Get_Verifi_Code_descriptor_;
  metadata.reflection = Down_Request_Get_Verifi_Code_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Down_Response_Get_Verifi_Code::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

Down_Response_Get_Verifi_Code::Down_Response_Get_Verifi_Code()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
}

void Down_Response_Get_Verifi_Code::InitAsDefaultInstance() {
}

Down_Response_Get_Verifi_Code::Down_Response_Get_Verifi_Code(const Down_Response_Get_Verifi_Code& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
}

void Down_Response_Get_Verifi_Code::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Down_Response_Get_Verifi_Code::~Down_Response_Get_Verifi_Code() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  SharedDtor();
}

void Down_Response_Get_Verifi_Code::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Down_Response_Get_Verifi_Code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Down_Response_Get_Verifi_Code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Down_Response_Get_Verifi_Code_descriptor_;
}

const Down_Response_Get_Verifi_Code& Down_Response_Get_Verifi_Code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Down_Response_Get_Verifi_Code* Down_Response_Get_Verifi_Code::default_instance_ = NULL;

Down_Response_Get_Verifi_Code* Down_Response_Get_Verifi_Code::New() const {
  return new Down_Response_Get_Verifi_Code;
}

void Down_Response_Get_Verifi_Code::Clear() {
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Down_Response_Get_Verifi_Code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  return false;
#undef DO_
}

void Down_Response_Get_Verifi_Code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
}

::google::protobuf::uint8* Down_Response_Get_Verifi_Code::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Down_Response_Get_Verifi_Code)
  return target;
}

int Down_Response_Get_Verifi_Code::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Down_Response_Get_Verifi_Code::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Down_Response_Get_Verifi_Code* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Down_Response_Get_Verifi_Code*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Down_Response_Get_Verifi_Code::MergeFrom(const Down_Response_Get_Verifi_Code& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Down_Response_Get_Verifi_Code::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Down_Response_Get_Verifi_Code::CopyFrom(const Down_Response_Get_Verifi_Code& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Down_Response_Get_Verifi_Code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Down_Response_Get_Verifi_Code::Swap(Down_Response_Get_Verifi_Code* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Down_Response_Get_Verifi_Code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Down_Response_Get_Verifi_Code_descriptor_;
  metadata.reflection = Down_Response_Get_Verifi_Code_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Down_Request_Register::kAppidFieldNumber;
const int Down_Request_Register::kCliverFieldNumber;
const int Down_Request_Register::kPnFieldNumber;
const int Down_Request_Register::kRvcFieldNumber;
const int Down_Request_Register::kAppUuidFieldNumber;
const int Down_Request_Register::kInfoFieldNumber;
#endif  // !_MSC_VER

Down_Request_Register::Down_Request_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Down_Request_Register)
}

void Down_Request_Register::InitAsDefaultInstance() {
}

Down_Request_Register::Down_Request_Register(const Down_Request_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Down_Request_Register)
}

void Down_Request_Register::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0;
  cliver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rvc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Down_Request_Register::~Down_Request_Register() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Down_Request_Register)
  SharedDtor();
}

void Down_Request_Register::SharedDtor() {
  if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cliver_;
  }
  if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pn_;
  }
  if (rvc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rvc_;
  }
  if (app_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_uuid_;
  }
  if (this != default_instance_) {
  }
}

void Down_Request_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Down_Request_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Down_Request_Register_descriptor_;
}

const Down_Request_Register& Down_Request_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Down_Request_Register* Down_Request_Register::default_instance_ = NULL;

Down_Request_Register* Down_Request_Register::New() const {
  return new Down_Request_Register;
}

void Down_Request_Register::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    appid_ = 0;
    if (has_cliver()) {
      if (cliver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cliver_->clear();
      }
    }
    if (has_pn()) {
      if (pn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pn_->clear();
      }
    }
    if (has_rvc()) {
      if (rvc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rvc_->clear();
      }
    }
    if (has_app_uuid()) {
      if (app_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_uuid_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Down_Request_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Down_Request_Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cliver;
        break;
      }

      // required bytes cliver = 2;
      case 2: {
        if (tag == 18) {
         parse_cliver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cliver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pn;
        break;
      }

      // required bytes pn = 3;
      case 3: {
        if (tag == 26) {
         parse_pn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rvc;
        break;
      }

      // required bytes rvc = 4;
      case 4: {
        if (tag == 34) {
         parse_rvc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rvc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_app_uuid;
        break;
      }

      // optional bytes app_uuid = 5;
      case 5: {
        if (tag == 42) {
         parse_app_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // repeated .qihoo.protocol.registry.Pair info = 6;
      case 6: {
        if (tag == 50) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Down_Request_Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Down_Request_Register)
  return false;
#undef DO_
}

void Down_Request_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Down_Request_Register)
  // required int32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // required bytes cliver = 2;
  if (has_cliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cliver(), output);
  }

  // required bytes pn = 3;
  if (has_pn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pn(), output);
  }

  // required bytes rvc = 4;
  if (has_rvc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rvc(), output);
  }

  // optional bytes app_uuid = 5;
  if (has_app_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->app_uuid(), output);
  }

  // repeated .qihoo.protocol.registry.Pair info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Down_Request_Register)
}

::google::protobuf::uint8* Down_Request_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Down_Request_Register)
  // required int32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // required bytes cliver = 2;
  if (has_cliver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cliver(), target);
  }

  // required bytes pn = 3;
  if (has_pn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pn(), target);
  }

  // required bytes rvc = 4;
  if (has_rvc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rvc(), target);
  }

  // optional bytes app_uuid = 5;
  if (has_app_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->app_uuid(), target);
  }

  // repeated .qihoo.protocol.registry.Pair info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Down_Request_Register)
  return target;
}

int Down_Request_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // required bytes cliver = 2;
    if (has_cliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cliver());
    }

    // required bytes pn = 3;
    if (has_pn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pn());
    }

    // required bytes rvc = 4;
    if (has_rvc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rvc());
    }

    // optional bytes app_uuid = 5;
    if (has_app_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_uuid());
    }

  }
  // repeated .qihoo.protocol.registry.Pair info = 6;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Down_Request_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Down_Request_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Down_Request_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Down_Request_Register::MergeFrom(const Down_Request_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_cliver()) {
      set_cliver(from.cliver());
    }
    if (from.has_pn()) {
      set_pn(from.pn());
    }
    if (from.has_rvc()) {
      set_rvc(from.rvc());
    }
    if (from.has_app_uuid()) {
      set_app_uuid(from.app_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Down_Request_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Down_Request_Register::CopyFrom(const Down_Request_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Down_Request_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void Down_Request_Register::Swap(Down_Request_Register* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(cliver_, other->cliver_);
    std::swap(pn_, other->pn_);
    std::swap(rvc_, other->rvc_);
    std::swap(app_uuid_, other->app_uuid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Down_Request_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Down_Request_Register_descriptor_;
  metadata.reflection = Down_Request_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Down_Response_Register::kErrorcodeFieldNumber;
const int Down_Response_Register::kJidFieldNumber;
const int Down_Response_Register::kPasswordFieldNumber;
#endif  // !_MSC_VER

Down_Response_Register::Down_Response_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Down_Response_Register)
}

void Down_Response_Register::InitAsDefaultInstance() {
}

Down_Response_Register::Down_Response_Register(const Down_Response_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Down_Response_Register)
}

void Down_Response_Register::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 0;
  jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Down_Response_Register::~Down_Response_Register() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Down_Response_Register)
  SharedDtor();
}

void Down_Response_Register::SharedDtor() {
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jid_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Down_Response_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Down_Response_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Down_Response_Register_descriptor_;
}

const Down_Response_Register& Down_Response_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Down_Response_Register* Down_Response_Register::default_instance_ = NULL;

Down_Response_Register* Down_Response_Register::New() const {
  return new Down_Response_Register;
}

void Down_Response_Register::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errorcode_ = 0;
    if (has_jid()) {
      if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Down_Response_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Down_Response_Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_jid;
        break;
      }

      // optional bytes jid = 2;
      case 2: {
        if (tag == 18) {
         parse_jid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional bytes password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Down_Response_Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Down_Response_Register)
  return false;
#undef DO_
}

void Down_Response_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Down_Response_Register)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional bytes jid = 2;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->jid(), output);
  }

  // optional bytes password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Down_Response_Register)
}

::google::protobuf::uint8* Down_Response_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Down_Response_Register)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes jid = 2;
  if (has_jid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->jid(), target);
  }

  // optional bytes password = 3;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Down_Response_Register)
  return target;
}

int Down_Response_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional bytes jid = 2;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jid());
    }

    // optional bytes password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Down_Response_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Down_Response_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Down_Response_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Down_Response_Register::MergeFrom(const Down_Response_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_jid()) {
      set_jid(from.jid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Down_Response_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Down_Response_Register::CopyFrom(const Down_Response_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Down_Response_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Down_Response_Register::Swap(Down_Response_Register* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(jid_, other->jid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Down_Response_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Down_Response_Register_descriptor_;
  metadata.reflection = Down_Response_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QID_Register_Request::kCookieQFieldNumber;
const int QID_Register_Request::kCookieTFieldNumber;
const int QID_Register_Request::kQidFieldNumber;
const int QID_Register_Request::kInfoFieldNumber;
const int QID_Register_Request::kAppidFieldNumber;
const int QID_Register_Request::kClientVerFieldNumber;
#endif  // !_MSC_VER

QID_Register_Request::QID_Register_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.QID_Register_Request)
}

void QID_Register_Request::InitAsDefaultInstance() {
}

QID_Register_Request::QID_Register_Request(const QID_Register_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.QID_Register_Request)
}

void QID_Register_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cookie_q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0;
  client_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QID_Register_Request::~QID_Register_Request() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.QID_Register_Request)
  SharedDtor();
}

void QID_Register_Request::SharedDtor() {
  if (cookie_q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_q_;
  }
  if (cookie_t_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_t_;
  }
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qid_;
  }
  if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ver_;
  }
  if (this != default_instance_) {
  }
}

void QID_Register_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QID_Register_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QID_Register_Request_descriptor_;
}

const QID_Register_Request& QID_Register_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

QID_Register_Request* QID_Register_Request::default_instance_ = NULL;

QID_Register_Request* QID_Register_Request::New() const {
  return new QID_Register_Request;
}

void QID_Register_Request::Clear() {
  if (_has_bits_[0 / 32] & 55) {
    if (has_cookie_q()) {
      if (cookie_q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cookie_q_->clear();
      }
    }
    if (has_cookie_t()) {
      if (cookie_t_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cookie_t_->clear();
      }
    }
    if (has_qid()) {
      if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qid_->clear();
      }
    }
    appid_ = 0;
    if (has_client_ver()) {
      if (client_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ver_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QID_Register_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.QID_Register_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes cookie_Q = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cookie_q()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cookie_T;
        break;
      }

      // required bytes cookie_T = 2;
      case 2: {
        if (tag == 18) {
         parse_cookie_T:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cookie_t()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qid;
        break;
      }

      // required bytes qid = 3;
      case 3: {
        if (tag == 26) {
         parse_qid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .qihoo.protocol.registry.Pair info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectTag(40)) goto parse_appid;
        break;
      }

      // optional int32 appid = 5;
      case 5: {
        if (tag == 40) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_client_ver;
        break;
      }

      // optional bytes client_ver = 6;
      case 6: {
        if (tag == 50) {
         parse_client_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_ver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.QID_Register_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.QID_Register_Request)
  return false;
#undef DO_
}

void QID_Register_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.QID_Register_Request)
  // required bytes cookie_Q = 1;
  if (has_cookie_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cookie_q(), output);
  }

  // required bytes cookie_T = 2;
  if (has_cookie_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cookie_t(), output);
  }

  // required bytes qid = 3;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qid(), output);
  }

  // repeated .qihoo.protocol.registry.Pair info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  // optional int32 appid = 5;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->appid(), output);
  }

  // optional bytes client_ver = 6;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->client_ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.QID_Register_Request)
}

::google::protobuf::uint8* QID_Register_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.QID_Register_Request)
  // required bytes cookie_Q = 1;
  if (has_cookie_q()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cookie_q(), target);
  }

  // required bytes cookie_T = 2;
  if (has_cookie_t()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cookie_t(), target);
  }

  // required bytes qid = 3;
  if (has_qid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->qid(), target);
  }

  // repeated .qihoo.protocol.registry.Pair info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  // optional int32 appid = 5;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->appid(), target);
  }

  // optional bytes client_ver = 6;
  if (has_client_ver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->client_ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.QID_Register_Request)
  return target;
}

int QID_Register_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes cookie_Q = 1;
    if (has_cookie_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cookie_q());
    }

    // required bytes cookie_T = 2;
    if (has_cookie_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cookie_t());
    }

    // required bytes qid = 3;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qid());
    }

    // optional int32 appid = 5;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bytes client_ver = 6;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_ver());
    }

  }
  // repeated .qihoo.protocol.registry.Pair info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QID_Register_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QID_Register_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QID_Register_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QID_Register_Request::MergeFrom(const QID_Register_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie_q()) {
      set_cookie_q(from.cookie_q());
    }
    if (from.has_cookie_t()) {
      set_cookie_t(from.cookie_t());
    }
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_client_ver()) {
      set_client_ver(from.client_ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QID_Register_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QID_Register_Request::CopyFrom(const QID_Register_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QID_Register_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void QID_Register_Request::Swap(QID_Register_Request* other) {
  if (other != this) {
    std::swap(cookie_q_, other->cookie_q_);
    std::swap(cookie_t_, other->cookie_t_);
    std::swap(qid_, other->qid_);
    info_.Swap(&other->info_);
    std::swap(appid_, other->appid_);
    std::swap(client_ver_, other->client_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QID_Register_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QID_Register_Request_descriptor_;
  metadata.reflection = QID_Register_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QID_Register_Response::kErrorcodeFieldNumber;
const int QID_Register_Response::kErrmsgFieldNumber;
const int QID_Register_Response::kJidFieldNumber;
const int QID_Register_Response::kPasswordFieldNumber;
#endif  // !_MSC_VER

QID_Register_Response::QID_Register_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.QID_Register_Response)
}

void QID_Register_Response::InitAsDefaultInstance() {
}

QID_Register_Response::QID_Register_Response(const QID_Register_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.QID_Register_Response)
}

void QID_Register_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QID_Register_Response::~QID_Register_Response() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.QID_Register_Response)
  SharedDtor();
}

void QID_Register_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jid_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void QID_Register_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QID_Register_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QID_Register_Response_descriptor_;
}

const QID_Register_Response& QID_Register_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

QID_Register_Response* QID_Register_Response::default_instance_ = NULL;

QID_Register_Response* QID_Register_Response::New() const {
  return new QID_Register_Response;
}

void QID_Register_Response::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errorcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_jid()) {
      if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QID_Register_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.QID_Register_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional bytes errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_jid;
        break;
      }

      // optional bytes jid = 3;
      case 3: {
        if (tag == 26) {
         parse_jid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional bytes password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.QID_Register_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.QID_Register_Response)
  return false;
#undef DO_
}

void QID_Register_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.QID_Register_Response)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional bytes errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional bytes jid = 3;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->jid(), output);
  }

  // optional bytes password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.QID_Register_Response)
}

::google::protobuf::uint8* QID_Register_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.QID_Register_Response)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes errmsg = 2;
  if (has_errmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->errmsg(), target);
  }

  // optional bytes jid = 3;
  if (has_jid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->jid(), target);
  }

  // optional bytes password = 4;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.QID_Register_Response)
  return target;
}

int QID_Register_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional bytes errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errmsg());
    }

    // optional bytes jid = 3;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jid());
    }

    // optional bytes password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QID_Register_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QID_Register_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QID_Register_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QID_Register_Response::MergeFrom(const QID_Register_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_jid()) {
      set_jid(from.jid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QID_Register_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QID_Register_Response::CopyFrom(const QID_Register_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QID_Register_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QID_Register_Response::Swap(QID_Register_Response* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(jid_, other->jid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QID_Register_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QID_Register_Response_descriptor_;
  metadata.reflection = QID_Register_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Query_Register_Status_Request::kPnFieldNumber;
#endif  // !_MSC_VER

Query_Register_Status_Request::Query_Register_Status_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Query_Register_Status_Request)
}

void Query_Register_Status_Request::InitAsDefaultInstance() {
}

Query_Register_Status_Request::Query_Register_Status_Request(const Query_Register_Status_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Query_Register_Status_Request)
}

void Query_Register_Status_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query_Register_Status_Request::~Query_Register_Status_Request() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Query_Register_Status_Request)
  SharedDtor();
}

void Query_Register_Status_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Query_Register_Status_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query_Register_Status_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Register_Status_Request_descriptor_;
}

const Query_Register_Status_Request& Query_Register_Status_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Query_Register_Status_Request* Query_Register_Status_Request::default_instance_ = NULL;

Query_Register_Status_Request* Query_Register_Status_Request::New() const {
  return new Query_Register_Status_Request;
}

void Query_Register_Status_Request::Clear() {
  pn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query_Register_Status_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Query_Register_Status_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes pn = 1;
      case 1: {
        if (tag == 10) {
         parse_pn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pn;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Query_Register_Status_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Query_Register_Status_Request)
  return false;
#undef DO_
}

void Query_Register_Status_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Query_Register_Status_Request)
  // repeated bytes pn = 1;
  for (int i = 0; i < this->pn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pn(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Query_Register_Status_Request)
}

::google::protobuf::uint8* Query_Register_Status_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Query_Register_Status_Request)
  // repeated bytes pn = 1;
  for (int i = 0; i < this->pn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->pn(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Query_Register_Status_Request)
  return target;
}

int Query_Register_Status_Request::ByteSize() const {
  int total_size = 0;

  // repeated bytes pn = 1;
  total_size += 1 * this->pn_size();
  for (int i = 0; i < this->pn_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query_Register_Status_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query_Register_Status_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query_Register_Status_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query_Register_Status_Request::MergeFrom(const Query_Register_Status_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  pn_.MergeFrom(from.pn_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query_Register_Status_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_Register_Status_Request::CopyFrom(const Query_Register_Status_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Register_Status_Request::IsInitialized() const {

  return true;
}

void Query_Register_Status_Request::Swap(Query_Register_Status_Request* other) {
  if (other != this) {
    pn_.Swap(&other->pn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Query_Register_Status_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_Register_Status_Request_descriptor_;
  metadata.reflection = Query_Register_Status_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Query_Register_Status_Response::kErrorcodeFieldNumber;
const int Query_Register_Status_Response::kErrmsgFieldNumber;
const int Query_Register_Status_Response::kPnIdxFieldNumber;
#endif  // !_MSC_VER

Query_Register_Status_Response::Query_Register_Status_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.registry.Query_Register_Status_Response)
}

void Query_Register_Status_Response::InitAsDefaultInstance() {
}

Query_Register_Status_Response::Query_Register_Status_Response(const Query_Register_Status_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.registry.Query_Register_Status_Response)
}

void Query_Register_Status_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query_Register_Status_Response::~Query_Register_Status_Response() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.registry.Query_Register_Status_Response)
  SharedDtor();
}

void Query_Register_Status_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void Query_Register_Status_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query_Register_Status_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Register_Status_Response_descriptor_;
}

const Query_Register_Status_Response& Query_Register_Status_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registry_2eproto();
  return *default_instance_;
}

Query_Register_Status_Response* Query_Register_Status_Response::default_instance_ = NULL;

Query_Register_Status_Response* Query_Register_Status_Response::New() const {
  return new Query_Register_Status_Response;
}

void Query_Register_Status_Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  pn_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query_Register_Status_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.registry.Query_Register_Status_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // required bytes errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pn_idx;
        break;
      }

      // repeated bytes pn_idx = 3;
      case 3: {
        if (tag == 26) {
         parse_pn_idx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pn_idx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pn_idx;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.registry.Query_Register_Status_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.registry.Query_Register_Status_Response)
  return false;
#undef DO_
}

void Query_Register_Status_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.registry.Query_Register_Status_Response)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required bytes errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated bytes pn_idx = 3;
  for (int i = 0; i < this->pn_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->pn_idx(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.registry.Query_Register_Status_Response)
}

::google::protobuf::uint8* Query_Register_Status_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.registry.Query_Register_Status_Response)
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required bytes errmsg = 2;
  if (has_errmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->errmsg(), target);
  }

  // repeated bytes pn_idx = 3;
  for (int i = 0; i < this->pn_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->pn_idx(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.registry.Query_Register_Status_Response)
  return target;
}

int Query_Register_Status_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required bytes errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errmsg());
    }

  }
  // repeated bytes pn_idx = 3;
  total_size += 1 * this->pn_idx_size();
  for (int i = 0; i < this->pn_idx_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pn_idx(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query_Register_Status_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query_Register_Status_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query_Register_Status_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query_Register_Status_Response::MergeFrom(const Query_Register_Status_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  pn_idx_.MergeFrom(from.pn_idx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query_Register_Status_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_Register_Status_Response::CopyFrom(const Query_Register_Status_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Register_Status_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Query_Register_Status_Response::Swap(Query_Register_Status_Response* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(errmsg_, other->errmsg_);
    pn_idx_.Swap(&other->pn_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Query_Register_Status_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_Register_Status_Response_descriptor_;
  metadata.reflection = Query_Register_Status_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace registry
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
