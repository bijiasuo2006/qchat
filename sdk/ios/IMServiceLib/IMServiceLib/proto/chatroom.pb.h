// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatroom.proto

#ifndef PROTOBUF_chatroom_2eproto__INCLUDED
#define PROTOBUF_chatroom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace chatroom {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chatroom_2eproto();
void protobuf_AssignDesc_chatroom_2eproto();
void protobuf_ShutdownFile_chatroom_2eproto();

class CRPair;
class CRUser;
class ChatRoom;
class CreateChatRoomRequest;
class CreateChatRoomResponse;
class CreateMultiChatRoomRequest;
class CreateMultiChatRoomResponse;
class GetChatRoomDetailRequest;
class GetChatRoomDetailResponse;
class ApplyJoinChatRoomRequest;
class ApplyJoinChatRoomResponse;
class QuitChatRoomRequest;
class QuitChatRoomResponse;
class QueryAllGameRoomRequest;
class QueryAllGameRoomResponse;
class QueryChatRoomIDRequest;
class QueryChatRoomIDResponse;
class UpdateRoomIDRequest;
class UpdateRoomIDResponse;
class UpdateChatRoomRequest;
class UpdateChatRoomResponse;
class KickChatRoomMemberRequest;
class KickChatRoomMemberResponse;
class SyncRoomToDBRequest;
class CreateChatRoomNotify;
class MemberJoinChatRoomNotify;
class MemberQuitChatRoomNotify;
class KickMemberNotify;
class UpdateChatRoomNotify;
class ChatRoomMessageRequest;
class ChatRoomMessageResponse;
class ChatRoomNewMsg;
class ChatRoomErrorMsg;
class ChatRoomMNotify;
class SubscribeRequest;
class SubscribeResponse;
class ChatRoomUpToServer;
class ChatRoomDownToUser;
class ChatRoomPacket;

// ===================================================================

class CRPair : public ::google::protobuf::Message {
 public:
  CRPair();
  virtual ~CRPair();

  CRPair(const CRPair& from);

  inline CRPair& operator=(const CRPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CRPair& default_instance();

  void Swap(CRPair* other);

  // implements Message ----------------------------------------------

  CRPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CRPair& from);
  void MergeFrom(const CRPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CRPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CRPair* default_instance_;
};
// -------------------------------------------------------------------

class CRUser : public ::google::protobuf::Message {
 public:
  CRUser();
  virtual ~CRUser();

  CRUser(const CRUser& from);

  inline CRUser& operator=(const CRUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CRUser& default_instance();

  void Swap(CRUser* other);

  // implements Message ----------------------------------------------

  CRUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CRUser& from);
  void MergeFrom(const CRUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const void* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  inline int publicsetting_size() const;
  inline void clear_publicsetting();
  static const int kPublicsettingFieldNumber = 3;
  inline const ::qihoo::protocol::chatroom::CRPair& publicsetting(int index) const;
  inline ::qihoo::protocol::chatroom::CRPair* mutable_publicsetting(int index);
  inline ::qihoo::protocol::chatroom::CRPair* add_publicsetting();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
      publicsetting() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
      mutable_publicsetting();

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  inline int privatesetting_size() const;
  inline void clear_privatesetting();
  static const int kPrivatesettingFieldNumber = 4;
  inline const ::qihoo::protocol::chatroom::CRPair& privatesetting(int index) const;
  inline ::qihoo::protocol::chatroom::CRPair* mutable_privatesetting(int index);
  inline ::qihoo::protocol::chatroom::CRPair* add_privatesetting();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
      privatesetting() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
      mutable_privatesetting();

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes userdata = 6;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 6;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const void* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CRUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* userid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair > publicsetting_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair > privatesetting_;
  ::std::string* userdata_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CRUser* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoom : public ::google::protobuf::Message {
 public:
  ChatRoom();
  virtual ~ChatRoom();

  ChatRoom(const ChatRoom& from);

  inline ChatRoom& operator=(const ChatRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoom& default_instance();

  void Swap(ChatRoom* other);

  // implements Message ----------------------------------------------

  ChatRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoom& from);
  void MergeFrom(const ChatRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  inline bool has_creater() const;
  inline void clear_creater();
  static const int kCreaterFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& creater() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_creater();
  inline ::qihoo::protocol::chatroom::CRUser* release_creater();
  inline void set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // optional uint64 maxmsgid = 5;
  inline bool has_maxmsgid() const;
  inline void clear_maxmsgid();
  static const int kMaxmsgidFieldNumber = 5;
  inline ::google::protobuf::uint64 maxmsgid() const;
  inline void set_maxmsgid(::google::protobuf::uint64 value);

  // optional uint64 memcountlimit = 6;
  inline bool has_memcountlimit() const;
  inline void clear_memcountlimit();
  static const int kMemcountlimitFieldNumber = 6;
  inline ::google::protobuf::uint64 memcountlimit() const;
  inline void set_memcountlimit(::google::protobuf::uint64 value);

  // optional string roomtype = 7;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomtypeFieldNumber = 7;
  inline const ::std::string& roomtype() const;
  inline void set_roomtype(const ::std::string& value);
  inline void set_roomtype(const char* value);
  inline void set_roomtype(const char* value, size_t size);
  inline ::std::string* mutable_roomtype();
  inline ::std::string* release_roomtype();
  inline void set_allocated_roomtype(::std::string* roomtype);

  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 8;
  inline const ::qihoo::protocol::chatroom::CRPair& properties(int index) const;
  inline ::qihoo::protocol::chatroom::CRPair* mutable_properties(int index);
  inline ::qihoo::protocol::chatroom::CRPair* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
      mutable_properties();

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 9;
  inline const ::qihoo::protocol::chatroom::CRUser& members(int index) const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_members(int index);
  inline ::qihoo::protocol::chatroom::CRUser* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
      mutable_members();

  // repeated bytes blacklist = 10;
  inline int blacklist_size() const;
  inline void clear_blacklist();
  static const int kBlacklistFieldNumber = 10;
  inline const ::std::string& blacklist(int index) const;
  inline ::std::string* mutable_blacklist(int index);
  inline void set_blacklist(int index, const ::std::string& value);
  inline void set_blacklist(int index, const char* value);
  inline void set_blacklist(int index, const void* value, size_t size);
  inline ::std::string* add_blacklist();
  inline void add_blacklist(const ::std::string& value);
  inline void add_blacklist(const char* value);
  inline void add_blacklist(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& blacklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blacklist();

  // optional string gameid = 11;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 11;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  inline int tempmembers_size() const;
  inline void clear_tempmembers();
  static const int kTempmembersFieldNumber = 12;
  inline const ::qihoo::protocol::chatroom::CRUser& tempmembers(int index) const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_tempmembers(int index);
  inline ::qihoo::protocol::chatroom::CRUser* add_tempmembers();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
      tempmembers() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
      mutable_tempmembers();

  // optional bytes partnerdata = 13;
  inline bool has_partnerdata() const;
  inline void clear_partnerdata();
  static const int kPartnerdataFieldNumber = 13;
  inline const ::std::string& partnerdata() const;
  inline void set_partnerdata(const ::std::string& value);
  inline void set_partnerdata(const char* value);
  inline void set_partnerdata(const void* value, size_t size);
  inline ::std::string* mutable_partnerdata();
  inline ::std::string* release_partnerdata();
  inline void set_allocated_partnerdata(::std::string* partnerdata);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoom)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_creater();
  inline void clear_has_creater();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_maxmsgid();
  inline void clear_has_maxmsgid();
  inline void set_has_memcountlimit();
  inline void clear_has_memcountlimit();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_partnerdata();
  inline void clear_has_partnerdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::qihoo::protocol::chatroom::CRUser* creater_;
  ::std::string* name_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 maxmsgid_;
  ::google::protobuf::uint64 memcountlimit_;
  ::std::string* roomtype_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair > properties_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser > members_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blacklist_;
  ::std::string* gameid_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser > tempmembers_;
  ::std::string* partnerdata_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoom* default_instance_;
};
// -------------------------------------------------------------------

class CreateChatRoomRequest : public ::google::protobuf::Message {
 public:
  CreateChatRoomRequest();
  virtual ~CreateChatRoomRequest();

  CreateChatRoomRequest(const CreateChatRoomRequest& from);

  inline CreateChatRoomRequest& operator=(const CreateChatRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomRequest& default_instance();

  void Swap(CreateChatRoomRequest* other);

  // implements Message ----------------------------------------------

  CreateChatRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChatRoomRequest& from);
  void MergeFrom(const CreateChatRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // optional string roomname = 2;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomnameFieldNumber = 2;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional uint64 memcountlimit = 3;
  inline bool has_memcountlimit() const;
  inline void clear_memcountlimit();
  static const int kMemcountlimitFieldNumber = 3;
  inline ::google::protobuf::uint64 memcountlimit() const;
  inline void set_memcountlimit(::google::protobuf::uint64 value);

  // optional string roomtype = 4;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomtypeFieldNumber = 4;
  inline const ::std::string& roomtype() const;
  inline void set_roomtype(const ::std::string& value);
  inline void set_roomtype(const char* value);
  inline void set_roomtype(const char* value, size_t size);
  inline ::std::string* mutable_roomtype();
  inline ::std::string* release_roomtype();
  inline void set_allocated_roomtype(::std::string* roomtype);

  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 5;
  inline const ::qihoo::protocol::chatroom::CRUser& members(int index) const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_members(int index);
  inline ::qihoo::protocol::chatroom::CRUser* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
      mutable_members();

  // optional .qihoo.protocol.chatroom.CRUser creater = 6;
  inline bool has_creater() const;
  inline void clear_creater();
  static const int kCreaterFieldNumber = 6;
  inline const ::qihoo::protocol::chatroom::CRUser& creater() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_creater();
  inline ::qihoo::protocol::chatroom::CRUser* release_creater();
  inline void set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater);

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 7;
  inline const ::qihoo::protocol::chatroom::CRPair& properties(int index) const;
  inline ::qihoo::protocol::chatroom::CRPair* mutable_properties(int index);
  inline ::qihoo::protocol::chatroom::CRPair* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CreateChatRoomRequest)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_memcountlimit();
  inline void clear_has_memcountlimit();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_creater();
  inline void clear_has_creater();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gameid_;
  ::std::string* roomname_;
  ::google::protobuf::uint64 memcountlimit_;
  ::std::string* roomtype_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser > members_;
  ::qihoo::protocol::chatroom::CRUser* creater_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair > properties_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CreateChatRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateChatRoomResponse : public ::google::protobuf::Message {
 public:
  CreateChatRoomResponse();
  virtual ~CreateChatRoomResponse();

  CreateChatRoomResponse(const CreateChatRoomResponse& from);

  inline CreateChatRoomResponse& operator=(const CreateChatRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomResponse& default_instance();

  void Swap(CreateChatRoomResponse* other);

  // implements Message ----------------------------------------------

  CreateChatRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChatRoomResponse& from);
  void MergeFrom(const CreateChatRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CreateChatRoomResponse)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CreateChatRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateMultiChatRoomRequest : public ::google::protobuf::Message {
 public:
  CreateMultiChatRoomRequest();
  virtual ~CreateMultiChatRoomRequest();

  CreateMultiChatRoomRequest(const CreateMultiChatRoomRequest& from);

  inline CreateMultiChatRoomRequest& operator=(const CreateMultiChatRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateMultiChatRoomRequest& default_instance();

  void Swap(CreateMultiChatRoomRequest* other);

  // implements Message ----------------------------------------------

  CreateMultiChatRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateMultiChatRoomRequest& from);
  void MergeFrom(const CreateMultiChatRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::CreateChatRoomRequest& rooms(int index) const;
  inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* mutable_rooms(int index);
  inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest >*
      mutable_rooms();

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  inline bool has_creater() const;
  inline void clear_creater();
  static const int kCreaterFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& creater() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_creater();
  inline ::qihoo::protocol::chatroom::CRUser* release_creater();
  inline void set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
 private:
  inline void set_has_creater();
  inline void clear_has_creater();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest > rooms_;
  ::qihoo::protocol::chatroom::CRUser* creater_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CreateMultiChatRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateMultiChatRoomResponse : public ::google::protobuf::Message {
 public:
  CreateMultiChatRoomResponse();
  virtual ~CreateMultiChatRoomResponse();

  CreateMultiChatRoomResponse(const CreateMultiChatRoomResponse& from);

  inline CreateMultiChatRoomResponse& operator=(const CreateMultiChatRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateMultiChatRoomResponse& default_instance();

  void Swap(CreateMultiChatRoomResponse* other);

  // implements Message ----------------------------------------------

  CreateMultiChatRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateMultiChatRoomResponse& from);
  void MergeFrom(const CreateMultiChatRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& rooms(int index) const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_rooms(int index);
  inline ::qihoo::protocol::chatroom::ChatRoom* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom >*
      mutable_rooms();

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  inline bool has_creater() const;
  inline void clear_creater();
  static const int kCreaterFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& creater() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_creater();
  inline ::qihoo::protocol::chatroom::CRUser* release_creater();
  inline void set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
 private:
  inline void set_has_creater();
  inline void clear_has_creater();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom > rooms_;
  ::qihoo::protocol::chatroom::CRUser* creater_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CreateMultiChatRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetChatRoomDetailRequest : public ::google::protobuf::Message {
 public:
  GetChatRoomDetailRequest();
  virtual ~GetChatRoomDetailRequest();

  GetChatRoomDetailRequest(const GetChatRoomDetailRequest& from);

  inline GetChatRoomDetailRequest& operator=(const GetChatRoomDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomDetailRequest& default_instance();

  void Swap(GetChatRoomDetailRequest* other);

  // implements Message ----------------------------------------------

  GetChatRoomDetailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChatRoomDetailRequest& from);
  void MergeFrom(const GetChatRoomDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 offset_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static GetChatRoomDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetChatRoomDetailResponse : public ::google::protobuf::Message {
 public:
  GetChatRoomDetailResponse();
  virtual ~GetChatRoomDetailResponse();

  GetChatRoomDetailResponse(const GetChatRoomDetailResponse& from);

  inline GetChatRoomDetailResponse& operator=(const GetChatRoomDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatRoomDetailResponse& default_instance();

  void Swap(GetChatRoomDetailResponse* other);

  // implements Message ----------------------------------------------

  GetChatRoomDetailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChatRoomDetailResponse& from);
  void MergeFrom(const GetChatRoomDetailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static GetChatRoomDetailResponse* default_instance_;
};
// -------------------------------------------------------------------

class ApplyJoinChatRoomRequest : public ::google::protobuf::Message {
 public:
  ApplyJoinChatRoomRequest();
  virtual ~ApplyJoinChatRoomRequest();

  ApplyJoinChatRoomRequest(const ApplyJoinChatRoomRequest& from);

  inline ApplyJoinChatRoomRequest& operator=(const ApplyJoinChatRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyJoinChatRoomRequest& default_instance();

  void Swap(ApplyJoinChatRoomRequest* other);

  // implements Message ----------------------------------------------

  ApplyJoinChatRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyJoinChatRoomRequest& from);
  void MergeFrom(const ApplyJoinChatRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // optional int32 userid_type = 3;
  inline bool has_userid_type() const;
  inline void clear_userid_type();
  static const int kUseridTypeFieldNumber = 3;
  inline ::google::protobuf::int32 userid_type() const;
  inline void set_userid_type(::google::protobuf::int32 value);

  // optional bytes userdata = 4;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 4;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const void* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // optional bool no_userlist = 5 [default = false];
  inline bool has_no_userlist() const;
  inline void clear_no_userlist();
  static const int kNoUserlistFieldNumber = 5;
  inline bool no_userlist() const;
  inline void set_no_userlist(bool value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_userid_type();
  inline void clear_has_userid_type();
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_no_userlist();
  inline void clear_has_no_userlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  ::std::string* userdata_;
  ::google::protobuf::int32 userid_type_;
  bool no_userlist_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ApplyJoinChatRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class ApplyJoinChatRoomResponse : public ::google::protobuf::Message {
 public:
  ApplyJoinChatRoomResponse();
  virtual ~ApplyJoinChatRoomResponse();

  ApplyJoinChatRoomResponse(const ApplyJoinChatRoomResponse& from);

  inline ApplyJoinChatRoomResponse& operator=(const ApplyJoinChatRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyJoinChatRoomResponse& default_instance();

  void Swap(ApplyJoinChatRoomResponse* other);

  // implements Message ----------------------------------------------

  ApplyJoinChatRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyJoinChatRoomResponse& from);
  void MergeFrom(const ApplyJoinChatRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // optional bool pull_lost = 2 [default = true];
  inline bool has_pull_lost() const;
  inline void clear_pull_lost();
  static const int kPullLostFieldNumber = 2;
  inline bool pull_lost() const;
  inline void set_pull_lost(bool value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
 private:
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_pull_lost();
  inline void clear_has_pull_lost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  bool pull_lost_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ApplyJoinChatRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class QuitChatRoomRequest : public ::google::protobuf::Message {
 public:
  QuitChatRoomRequest();
  virtual ~QuitChatRoomRequest();

  QuitChatRoomRequest(const QuitChatRoomRequest& from);

  inline QuitChatRoomRequest& operator=(const QuitChatRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitChatRoomRequest& default_instance();

  void Swap(QuitChatRoomRequest* other);

  // implements Message ----------------------------------------------

  QuitChatRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuitChatRoomRequest& from);
  void MergeFrom(const QuitChatRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.QuitChatRoomRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static QuitChatRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class QuitChatRoomResponse : public ::google::protobuf::Message {
 public:
  QuitChatRoomResponse();
  virtual ~QuitChatRoomResponse();

  QuitChatRoomResponse(const QuitChatRoomResponse& from);

  inline QuitChatRoomResponse& operator=(const QuitChatRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitChatRoomResponse& default_instance();

  void Swap(QuitChatRoomResponse* other);

  // implements Message ----------------------------------------------

  QuitChatRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuitChatRoomResponse& from);
  void MergeFrom(const QuitChatRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.QuitChatRoomResponse)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static QuitChatRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllGameRoomRequest : public ::google::protobuf::Message {
 public:
  QueryAllGameRoomRequest();
  virtual ~QueryAllGameRoomRequest();

  QueryAllGameRoomRequest(const QueryAllGameRoomRequest& from);

  inline QueryAllGameRoomRequest& operator=(const QueryAllGameRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllGameRoomRequest& default_instance();

  void Swap(QueryAllGameRoomRequest* other);

  // implements Message ----------------------------------------------

  QueryAllGameRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllGameRoomRequest& from);
  void MergeFrom(const QueryAllGameRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static QueryAllGameRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllGameRoomResponse : public ::google::protobuf::Message {
 public:
  QueryAllGameRoomResponse();
  virtual ~QueryAllGameRoomResponse();

  QueryAllGameRoomResponse(const QueryAllGameRoomResponse& from);

  inline QueryAllGameRoomResponse& operator=(const QueryAllGameRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllGameRoomResponse& default_instance();

  void Swap(QueryAllGameRoomResponse* other);

  // implements Message ----------------------------------------------

  QueryAllGameRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllGameRoomResponse& from);
  void MergeFrom(const QueryAllGameRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  inline int maplist_size() const;
  inline void clear_maplist();
  static const int kMaplistFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::CRPair& maplist(int index) const;
  inline ::qihoo::protocol::chatroom::CRPair* mutable_maplist(int index);
  inline ::qihoo::protocol::chatroom::CRPair* add_maplist();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
      maplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
      mutable_maplist();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair > maplist_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static QueryAllGameRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryChatRoomIDRequest : public ::google::protobuf::Message {
 public:
  QueryChatRoomIDRequest();
  virtual ~QueryChatRoomIDRequest();

  QueryChatRoomIDRequest(const QueryChatRoomIDRequest& from);

  inline QueryChatRoomIDRequest& operator=(const QueryChatRoomIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryChatRoomIDRequest& default_instance();

  void Swap(QueryChatRoomIDRequest* other);

  // implements Message ----------------------------------------------

  QueryChatRoomIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryChatRoomIDRequest& from);
  void MergeFrom(const QueryChatRoomIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gameid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static QueryChatRoomIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryChatRoomIDResponse : public ::google::protobuf::Message {
 public:
  QueryChatRoomIDResponse();
  virtual ~QueryChatRoomIDResponse();

  QueryChatRoomIDResponse(const QueryChatRoomIDResponse& from);

  inline QueryChatRoomIDResponse& operator=(const QueryChatRoomIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryChatRoomIDResponse& default_instance();

  void Swap(QueryChatRoomIDResponse* other);

  // implements Message ----------------------------------------------

  QueryChatRoomIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryChatRoomIDResponse& from);
  void MergeFrom(const QueryChatRoomIDResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional string gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::std::string* gameid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static QueryChatRoomIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRoomIDRequest : public ::google::protobuf::Message {
 public:
  UpdateRoomIDRequest();
  virtual ~UpdateRoomIDRequest();

  UpdateRoomIDRequest(const UpdateRoomIDRequest& from);

  inline UpdateRoomIDRequest& operator=(const UpdateRoomIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRoomIDRequest& default_instance();

  void Swap(UpdateRoomIDRequest* other);

  // implements Message ----------------------------------------------

  UpdateRoomIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRoomIDRequest& from);
  void MergeFrom(const UpdateRoomIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // required bytes roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.UpdateRoomIDRequest)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gameid_;
  ::std::string* roomid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static UpdateRoomIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRoomIDResponse : public ::google::protobuf::Message {
 public:
  UpdateRoomIDResponse();
  virtual ~UpdateRoomIDResponse();

  UpdateRoomIDResponse(const UpdateRoomIDResponse& from);

  inline UpdateRoomIDResponse& operator=(const UpdateRoomIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRoomIDResponse& default_instance();

  void Swap(UpdateRoomIDResponse* other);

  // implements Message ----------------------------------------------

  UpdateRoomIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRoomIDResponse& from);
  void MergeFrom(const UpdateRoomIDResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.UpdateRoomIDResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static UpdateRoomIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateChatRoomRequest : public ::google::protobuf::Message {
 public:
  UpdateChatRoomRequest();
  virtual ~UpdateChatRoomRequest();

  UpdateChatRoomRequest(const UpdateChatRoomRequest& from);

  inline UpdateChatRoomRequest& operator=(const UpdateChatRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChatRoomRequest& default_instance();

  void Swap(UpdateChatRoomRequest* other);

  // implements Message ----------------------------------------------

  UpdateChatRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateChatRoomRequest& from);
  void MergeFrom(const UpdateChatRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // required .qihoo.protocol.chatroom.ChatRoom room = 2;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.UpdateChatRoomRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static UpdateChatRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateChatRoomResponse : public ::google::protobuf::Message {
 public:
  UpdateChatRoomResponse();
  virtual ~UpdateChatRoomResponse();

  UpdateChatRoomResponse(const UpdateChatRoomResponse& from);

  inline UpdateChatRoomResponse& operator=(const UpdateChatRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChatRoomResponse& default_instance();

  void Swap(UpdateChatRoomResponse* other);

  // implements Message ----------------------------------------------

  UpdateChatRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateChatRoomResponse& from);
  void MergeFrom(const UpdateChatRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.UpdateChatRoomResponse)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static UpdateChatRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class KickChatRoomMemberRequest : public ::google::protobuf::Message {
 public:
  KickChatRoomMemberRequest();
  virtual ~KickChatRoomMemberRequest();

  KickChatRoomMemberRequest(const KickChatRoomMemberRequest& from);

  inline KickChatRoomMemberRequest& operator=(const KickChatRoomMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickChatRoomMemberRequest& default_instance();

  void Swap(KickChatRoomMemberRequest* other);

  // implements Message ----------------------------------------------

  KickChatRoomMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickChatRoomMemberRequest& from);
  void MergeFrom(const KickChatRoomMemberRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& members(int index) const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_members(int index);
  inline ::qihoo::protocol::chatroom::CRUser* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
      mutable_members();

  // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 3;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser > members_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static KickChatRoomMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class KickChatRoomMemberResponse : public ::google::protobuf::Message {
 public:
  KickChatRoomMemberResponse();
  virtual ~KickChatRoomMemberResponse();

  KickChatRoomMemberResponse(const KickChatRoomMemberResponse& from);

  inline KickChatRoomMemberResponse& operator=(const KickChatRoomMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickChatRoomMemberResponse& default_instance();

  void Swap(KickChatRoomMemberResponse* other);

  // implements Message ----------------------------------------------

  KickChatRoomMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickChatRoomMemberResponse& from);
  void MergeFrom(const KickChatRoomMemberResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static KickChatRoomMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class SyncRoomToDBRequest : public ::google::protobuf::Message {
 public:
  SyncRoomToDBRequest();
  virtual ~SyncRoomToDBRequest();

  SyncRoomToDBRequest(const SyncRoomToDBRequest& from);

  inline SyncRoomToDBRequest& operator=(const SyncRoomToDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRoomToDBRequest& default_instance();

  void Swap(SyncRoomToDBRequest* other);

  // implements Message ----------------------------------------------

  SyncRoomToDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRoomToDBRequest& from);
  void MergeFrom(const SyncRoomToDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.SyncRoomToDBRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static SyncRoomToDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateChatRoomNotify : public ::google::protobuf::Message {
 public:
  CreateChatRoomNotify();
  virtual ~CreateChatRoomNotify();

  CreateChatRoomNotify(const CreateChatRoomNotify& from);

  inline CreateChatRoomNotify& operator=(const CreateChatRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomNotify& default_instance();

  void Swap(CreateChatRoomNotify* other);

  // implements Message ----------------------------------------------

  CreateChatRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChatRoomNotify& from);
  void MergeFrom(const CreateChatRoomNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.CreateChatRoomNotify)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static CreateChatRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class MemberJoinChatRoomNotify : public ::google::protobuf::Message {
 public:
  MemberJoinChatRoomNotify();
  virtual ~MemberJoinChatRoomNotify();

  MemberJoinChatRoomNotify(const MemberJoinChatRoomNotify& from);

  inline MemberJoinChatRoomNotify& operator=(const MemberJoinChatRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberJoinChatRoomNotify& default_instance();

  void Swap(MemberJoinChatRoomNotify* other);

  // implements Message ----------------------------------------------

  MemberJoinChatRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberJoinChatRoomNotify& from);
  void MergeFrom(const MemberJoinChatRoomNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static MemberJoinChatRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class MemberQuitChatRoomNotify : public ::google::protobuf::Message {
 public:
  MemberQuitChatRoomNotify();
  virtual ~MemberQuitChatRoomNotify();

  MemberQuitChatRoomNotify(const MemberQuitChatRoomNotify& from);

  inline MemberQuitChatRoomNotify& operator=(const MemberQuitChatRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberQuitChatRoomNotify& default_instance();

  void Swap(MemberQuitChatRoomNotify* other);

  // implements Message ----------------------------------------------

  MemberQuitChatRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberQuitChatRoomNotify& from);
  void MergeFrom(const MemberQuitChatRoomNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
 private:
  inline void set_has_room();
  inline void clear_has_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static MemberQuitChatRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class KickMemberNotify : public ::google::protobuf::Message {
 public:
  KickMemberNotify();
  virtual ~KickMemberNotify();

  KickMemberNotify(const KickMemberNotify& from);

  inline KickMemberNotify& operator=(const KickMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickMemberNotify& default_instance();

  void Swap(KickMemberNotify* other);

  // implements Message ----------------------------------------------

  KickMemberNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickMemberNotify& from);
  void MergeFrom(const KickMemberNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& user() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_user();
  inline ::qihoo::protocol::chatroom::CRUser* release_user();
  inline void set_allocated_user(::qihoo::protocol::chatroom::CRUser* user);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.KickMemberNotify)
 private:
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  ::qihoo::protocol::chatroom::CRUser* user_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static KickMemberNotify* default_instance_;
};
// -------------------------------------------------------------------

class UpdateChatRoomNotify : public ::google::protobuf::Message {
 public:
  UpdateChatRoomNotify();
  virtual ~UpdateChatRoomNotify();

  UpdateChatRoomNotify(const UpdateChatRoomNotify& from);

  inline UpdateChatRoomNotify& operator=(const UpdateChatRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChatRoomNotify& default_instance();

  void Swap(UpdateChatRoomNotify* other);

  // implements Message ----------------------------------------------

  UpdateChatRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateChatRoomNotify& from);
  void MergeFrom(const UpdateChatRoomNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::ChatRoom& room() const;
  inline ::qihoo::protocol::chatroom::ChatRoom* mutable_room();
  inline ::qihoo::protocol::chatroom::ChatRoom* release_room();
  inline void set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room);

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& user() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_user();
  inline ::qihoo::protocol::chatroom::CRUser* release_user();
  inline void set_allocated_user(::qihoo::protocol::chatroom::CRUser* user);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.UpdateChatRoomNotify)
 private:
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::ChatRoom* room_;
  ::qihoo::protocol::chatroom::CRUser* user_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static UpdateChatRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomMessageRequest : public ::google::protobuf::Message {
 public:
  ChatRoomMessageRequest();
  virtual ~ChatRoomMessageRequest();

  ChatRoomMessageRequest(const ChatRoomMessageRequest& from);

  inline ChatRoomMessageRequest& operator=(const ChatRoomMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMessageRequest& default_instance();

  void Swap(ChatRoomMessageRequest* other);

  // implements Message ----------------------------------------------

  ChatRoomMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomMessageRequest& from);
  void MergeFrom(const ChatRoomMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .qihoo.protocol.chatroom.CRUser sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::qihoo::protocol::chatroom::CRUser& sender() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_sender();
  inline ::qihoo::protocol::chatroom::CRUser* release_sender();
  inline void set_allocated_sender(::qihoo::protocol::chatroom::CRUser* sender);

  // required bytes roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // required int32 msgtype = 3;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgtypeFieldNumber = 3;
  inline ::google::protobuf::int32 msgtype() const;
  inline void set_msgtype(::google::protobuf::int32 value);

  // optional bytes msgcontent = 4;
  inline bool has_msgcontent() const;
  inline void clear_msgcontent();
  static const int kMsgcontentFieldNumber = 4;
  inline const ::std::string& msgcontent() const;
  inline void set_msgcontent(const ::std::string& value);
  inline void set_msgcontent(const char* value);
  inline void set_msgcontent(const void* value, size_t size);
  inline ::std::string* mutable_msgcontent();
  inline ::std::string* release_msgcontent();
  inline void set_allocated_msgcontent(::std::string* msgcontent);

  // optional bytes clientparameter = 5;
  inline bool has_clientparameter() const;
  inline void clear_clientparameter();
  static const int kClientparameterFieldNumber = 5;
  inline const ::std::string& clientparameter() const;
  inline void set_clientparameter(const ::std::string& value);
  inline void set_clientparameter(const char* value);
  inline void set_clientparameter(const void* value, size_t size);
  inline ::std::string* mutable_clientparameter();
  inline ::std::string* release_clientparameter();
  inline void set_allocated_clientparameter(::std::string* clientparameter);

  // optional bytes clientcache = 6;
  inline bool has_clientcache() const;
  inline void clear_clientcache();
  static const int kClientcacheFieldNumber = 6;
  inline const ::std::string& clientcache() const;
  inline void set_clientcache(const ::std::string& value);
  inline void set_clientcache(const char* value);
  inline void set_clientcache(const void* value, size_t size);
  inline ::std::string* mutable_clientcache();
  inline ::std::string* release_clientcache();
  inline void set_allocated_clientcache(::std::string* clientcache);

  // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
  inline bool has_createnotify() const;
  inline void clear_createnotify();
  static const int kCreatenotifyFieldNumber = 7;
  inline const ::qihoo::protocol::chatroom::CreateChatRoomNotify& createnotify() const;
  inline ::qihoo::protocol::chatroom::CreateChatRoomNotify* mutable_createnotify();
  inline ::qihoo::protocol::chatroom::CreateChatRoomNotify* release_createnotify();
  inline void set_allocated_createnotify(::qihoo::protocol::chatroom::CreateChatRoomNotify* createnotify);

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
  inline bool has_joinnotify() const;
  inline void clear_joinnotify();
  static const int kJoinnotifyFieldNumber = 8;
  inline const ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify& joinnotify() const;
  inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* mutable_joinnotify();
  inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* release_joinnotify();
  inline void set_allocated_joinnotify(::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* joinnotify);

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
  inline bool has_quitnotify() const;
  inline void clear_quitnotify();
  static const int kQuitnotifyFieldNumber = 9;
  inline const ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify& quitnotify() const;
  inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* mutable_quitnotify();
  inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* release_quitnotify();
  inline void set_allocated_quitnotify(::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* quitnotify);

  // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
  inline bool has_kicknotify() const;
  inline void clear_kicknotify();
  static const int kKicknotifyFieldNumber = 10;
  inline const ::qihoo::protocol::chatroom::KickMemberNotify& kicknotify() const;
  inline ::qihoo::protocol::chatroom::KickMemberNotify* mutable_kicknotify();
  inline ::qihoo::protocol::chatroom::KickMemberNotify* release_kicknotify();
  inline void set_allocated_kicknotify(::qihoo::protocol::chatroom::KickMemberNotify* kicknotify);

  // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
  inline bool has_updatenotify() const;
  inline void clear_updatenotify();
  static const int kUpdatenotifyFieldNumber = 11;
  inline const ::qihoo::protocol::chatroom::UpdateChatRoomNotify& updatenotify() const;
  inline ::qihoo::protocol::chatroom::UpdateChatRoomNotify* mutable_updatenotify();
  inline ::qihoo::protocol::chatroom::UpdateChatRoomNotify* release_updatenotify();
  inline void set_allocated_updatenotify(::qihoo::protocol::chatroom::UpdateChatRoomNotify* updatenotify);

  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  inline int propertylist_size() const;
  inline void clear_propertylist();
  static const int kPropertylistFieldNumber = 12;
  inline const ::qihoo::protocol::chatroom::CRPair& propertylist(int index) const;
  inline ::qihoo::protocol::chatroom::CRPair* mutable_propertylist(int index);
  inline ::qihoo::protocol::chatroom::CRPair* add_propertylist();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
      propertylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
      mutable_propertylist();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomMessageRequest)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_msgcontent();
  inline void clear_has_msgcontent();
  inline void set_has_clientparameter();
  inline void clear_has_clientparameter();
  inline void set_has_clientcache();
  inline void clear_has_clientcache();
  inline void set_has_createnotify();
  inline void clear_has_createnotify();
  inline void set_has_joinnotify();
  inline void clear_has_joinnotify();
  inline void set_has_quitnotify();
  inline void clear_has_quitnotify();
  inline void set_has_kicknotify();
  inline void clear_has_kicknotify();
  inline void set_has_updatenotify();
  inline void clear_has_updatenotify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::CRUser* sender_;
  ::std::string* roomid_;
  ::std::string* msgcontent_;
  ::std::string* clientparameter_;
  ::std::string* clientcache_;
  ::qihoo::protocol::chatroom::CreateChatRoomNotify* createnotify_;
  ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* joinnotify_;
  ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* quitnotify_;
  ::qihoo::protocol::chatroom::KickMemberNotify* kicknotify_;
  ::qihoo::protocol::chatroom::UpdateChatRoomNotify* updatenotify_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair > propertylist_;
  ::google::protobuf::int32 msgtype_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomMessageResponse : public ::google::protobuf::Message {
 public:
  ChatRoomMessageResponse();
  virtual ~ChatRoomMessageResponse();

  ChatRoomMessageResponse(const ChatRoomMessageResponse& from);

  inline ChatRoomMessageResponse& operator=(const ChatRoomMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMessageResponse& default_instance();

  void Swap(ChatRoomMessageResponse* other);

  // implements Message ----------------------------------------------

  ChatRoomMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomMessageResponse& from);
  void MergeFrom(const ChatRoomMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::uint64 msgid() const;
  inline void set_msgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomMessageResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 msgid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomNewMsg : public ::google::protobuf::Message {
 public:
  ChatRoomNewMsg();
  virtual ~ChatRoomNewMsg();

  ChatRoomNewMsg(const ChatRoomNewMsg& from);

  inline ChatRoomNewMsg& operator=(const ChatRoomNewMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomNewMsg& default_instance();

  void Swap(ChatRoomNewMsg* other);

  // implements Message ----------------------------------------------

  ChatRoomNewMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomNewMsg& from);
  void MergeFrom(const ChatRoomNewMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional .qihoo.protocol.chatroom.CRUser sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CRUser& sender() const;
  inline ::qihoo::protocol::chatroom::CRUser* mutable_sender();
  inline ::qihoo::protocol::chatroom::CRUser* release_sender();
  inline void set_allocated_sender(::qihoo::protocol::chatroom::CRUser* sender);

  // optional int32 msgtype = 3;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgtypeFieldNumber = 3;
  inline ::google::protobuf::int32 msgtype() const;
  inline void set_msgtype(::google::protobuf::int32 value);

  // optional bytes msgcontent = 4;
  inline bool has_msgcontent() const;
  inline void clear_msgcontent();
  static const int kMsgcontentFieldNumber = 4;
  inline const ::std::string& msgcontent() const;
  inline void set_msgcontent(const ::std::string& value);
  inline void set_msgcontent(const char* value);
  inline void set_msgcontent(const void* value, size_t size);
  inline ::std::string* mutable_msgcontent();
  inline ::std::string* release_msgcontent();
  inline void set_allocated_msgcontent(::std::string* msgcontent);

  // optional int32 regmemcount = 5;
  inline bool has_regmemcount() const;
  inline void clear_regmemcount();
  static const int kRegmemcountFieldNumber = 5;
  inline ::google::protobuf::int32 regmemcount() const;
  inline void set_regmemcount(::google::protobuf::int32 value);

  // optional int32 memcount = 6;
  inline bool has_memcount() const;
  inline void clear_memcount();
  static const int kMemcountFieldNumber = 6;
  inline ::google::protobuf::int32 memcount() const;
  inline void set_memcount(::google::protobuf::int32 value);

  // optional uint32 msgid = 7;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 7;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional uint32 maxid = 8;
  inline bool has_maxid() const;
  inline void clear_maxid();
  static const int kMaxidFieldNumber = 8;
  inline ::google::protobuf::uint32 maxid() const;
  inline void set_maxid(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 9;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomNewMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_msgcontent();
  inline void clear_has_msgcontent();
  inline void set_has_regmemcount();
  inline void clear_has_regmemcount();
  inline void set_has_memcount();
  inline void clear_has_memcount();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_maxid();
  inline void clear_has_maxid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::qihoo::protocol::chatroom::CRUser* sender_;
  ::std::string* msgcontent_;
  ::google::protobuf::int32 msgtype_;
  ::google::protobuf::int32 regmemcount_;
  ::google::protobuf::int32 memcount_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 maxid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomNewMsg* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomErrorMsg : public ::google::protobuf::Message {
 public:
  ChatRoomErrorMsg();
  virtual ~ChatRoomErrorMsg();

  ChatRoomErrorMsg(const ChatRoomErrorMsg& from);

  inline ChatRoomErrorMsg& operator=(const ChatRoomErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomErrorMsg& default_instance();

  void Swap(ChatRoomErrorMsg* other);

  // implements Message ----------------------------------------------

  ChatRoomErrorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomErrorMsg& from);
  void MergeFrom(const ChatRoomErrorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // required uint64 clientsn = 2;
  inline bool has_clientsn() const;
  inline void clear_clientsn();
  static const int kClientsnFieldNumber = 2;
  inline ::google::protobuf::uint64 clientsn() const;
  inline void set_clientsn(::google::protobuf::uint64 value);

  // optional int32 errorcode = 3;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 3;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomErrorMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_clientsn();
  inline void clear_has_clientsn();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::google::protobuf::uint64 clientsn_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomErrorMsg* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomMNotify : public ::google::protobuf::Message {
 public:
  ChatRoomMNotify();
  virtual ~ChatRoomMNotify();

  ChatRoomMNotify(const ChatRoomMNotify& from);

  inline ChatRoomMNotify& operator=(const ChatRoomMNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMNotify& default_instance();

  void Swap(ChatRoomMNotify* other);

  // implements Message ----------------------------------------------

  ChatRoomMNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomMNotify& from);
  void MergeFrom(const ChatRoomMNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 regmemcount = 3;
  inline bool has_regmemcount() const;
  inline void clear_regmemcount();
  static const int kRegmemcountFieldNumber = 3;
  inline ::google::protobuf::int32 regmemcount() const;
  inline void set_regmemcount(::google::protobuf::int32 value);

  // optional int32 memcount = 4;
  inline bool has_memcount() const;
  inline void clear_memcount();
  static const int kMemcountFieldNumber = 4;
  inline ::google::protobuf::int32 memcount() const;
  inline void set_memcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomMNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_regmemcount();
  inline void clear_has_regmemcount();
  inline void set_has_memcount();
  inline void clear_has_memcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 regmemcount_;
  ::google::protobuf::int32 memcount_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomMNotify* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeRequest : public ::google::protobuf::Message {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  void Swap(SubscribeRequest* other);

  // implements Message ----------------------------------------------

  SubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional bool sub = 2 [default = false];
  inline bool has_sub() const;
  inline void clear_sub();
  static const int kSubFieldNumber = 2;
  inline bool sub() const;
  inline void set_sub(bool value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.SubscribeRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_sub();
  inline void clear_has_sub();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  bool sub_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static SubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeResponse : public ::google::protobuf::Message {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeResponse& default_instance();

  void Swap(SubscribeResponse* other);

  // implements Message ----------------------------------------------

  SubscribeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional bool sub = 2;
  inline bool has_sub() const;
  inline void clear_sub();
  static const int kSubFieldNumber = 2;
  inline bool sub() const;
  inline void set_sub(bool value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.SubscribeResponse)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_sub();
  inline void clear_has_sub();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  bool sub_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static SubscribeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomUpToServer : public ::google::protobuf::Message {
 public:
  ChatRoomUpToServer();
  virtual ~ChatRoomUpToServer();

  ChatRoomUpToServer(const ChatRoomUpToServer& from);

  inline ChatRoomUpToServer& operator=(const ChatRoomUpToServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomUpToServer& default_instance();

  void Swap(ChatRoomUpToServer* other);

  // implements Message ----------------------------------------------

  ChatRoomUpToServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomUpToServer& from);
  void MergeFrom(const ChatRoomUpToServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 payloadtype = 1;
  inline bool has_payloadtype() const;
  inline void clear_payloadtype();
  static const int kPayloadtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 payloadtype() const;
  inline void set_payloadtype(::google::protobuf::uint32 value);

  // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
  inline bool has_createchatroomreq() const;
  inline void clear_createchatroomreq();
  static const int kCreatechatroomreqFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::CreateChatRoomRequest& createchatroomreq() const;
  inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* mutable_createchatroomreq();
  inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* release_createchatroomreq();
  inline void set_allocated_createchatroomreq(::qihoo::protocol::chatroom::CreateChatRoomRequest* createchatroomreq);

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
  inline bool has_getchatroominforeq() const;
  inline void clear_getchatroominforeq();
  static const int kGetchatroominforeqFieldNumber = 3;
  inline const ::qihoo::protocol::chatroom::GetChatRoomDetailRequest& getchatroominforeq() const;
  inline ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* mutable_getchatroominforeq();
  inline ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* release_getchatroominforeq();
  inline void set_allocated_getchatroominforeq(::qihoo::protocol::chatroom::GetChatRoomDetailRequest* getchatroominforeq);

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
  inline bool has_applyjoinchatroomreq() const;
  inline void clear_applyjoinchatroomreq();
  static const int kApplyjoinchatroomreqFieldNumber = 4;
  inline const ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest& applyjoinchatroomreq() const;
  inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* mutable_applyjoinchatroomreq();
  inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* release_applyjoinchatroomreq();
  inline void set_allocated_applyjoinchatroomreq(::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* applyjoinchatroomreq);

  // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
  inline bool has_quitchatroomreq() const;
  inline void clear_quitchatroomreq();
  static const int kQuitchatroomreqFieldNumber = 5;
  inline const ::qihoo::protocol::chatroom::QuitChatRoomRequest& quitchatroomreq() const;
  inline ::qihoo::protocol::chatroom::QuitChatRoomRequest* mutable_quitchatroomreq();
  inline ::qihoo::protocol::chatroom::QuitChatRoomRequest* release_quitchatroomreq();
  inline void set_allocated_quitchatroomreq(::qihoo::protocol::chatroom::QuitChatRoomRequest* quitchatroomreq);

  // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
  inline bool has_updatechatroomreq() const;
  inline void clear_updatechatroomreq();
  static const int kUpdatechatroomreqFieldNumber = 6;
  inline const ::qihoo::protocol::chatroom::UpdateChatRoomRequest& updatechatroomreq() const;
  inline ::qihoo::protocol::chatroom::UpdateChatRoomRequest* mutable_updatechatroomreq();
  inline ::qihoo::protocol::chatroom::UpdateChatRoomRequest* release_updatechatroomreq();
  inline void set_allocated_updatechatroomreq(::qihoo::protocol::chatroom::UpdateChatRoomRequest* updatechatroomreq);

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
  inline bool has_kickmemberreq() const;
  inline void clear_kickmemberreq();
  static const int kKickmemberreqFieldNumber = 7;
  inline const ::qihoo::protocol::chatroom::KickChatRoomMemberRequest& kickmemberreq() const;
  inline ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* mutable_kickmemberreq();
  inline ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* release_kickmemberreq();
  inline void set_allocated_kickmemberreq(::qihoo::protocol::chatroom::KickChatRoomMemberRequest* kickmemberreq);

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
  inline bool has_querychatroomidreq() const;
  inline void clear_querychatroomidreq();
  static const int kQuerychatroomidreqFieldNumber = 8;
  inline const ::qihoo::protocol::chatroom::QueryChatRoomIDRequest& querychatroomidreq() const;
  inline ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* mutable_querychatroomidreq();
  inline ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* release_querychatroomidreq();
  inline void set_allocated_querychatroomidreq(::qihoo::protocol::chatroom::QueryChatRoomIDRequest* querychatroomidreq);

  // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
  inline bool has_updategameidreq() const;
  inline void clear_updategameidreq();
  static const int kUpdategameidreqFieldNumber = 9;
  inline const ::qihoo::protocol::chatroom::UpdateRoomIDRequest& updategameidreq() const;
  inline ::qihoo::protocol::chatroom::UpdateRoomIDRequest* mutable_updategameidreq();
  inline ::qihoo::protocol::chatroom::UpdateRoomIDRequest* release_updategameidreq();
  inline void set_allocated_updategameidreq(::qihoo::protocol::chatroom::UpdateRoomIDRequest* updategameidreq);

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
  inline bool has_queryallgameroomreq() const;
  inline void clear_queryallgameroomreq();
  static const int kQueryallgameroomreqFieldNumber = 10;
  inline const ::qihoo::protocol::chatroom::QueryAllGameRoomRequest& queryallgameroomreq() const;
  inline ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* mutable_queryallgameroomreq();
  inline ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* release_queryallgameroomreq();
  inline void set_allocated_queryallgameroomreq(::qihoo::protocol::chatroom::QueryAllGameRoomRequest* queryallgameroomreq);

  // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
  inline bool has_chatroommessagereq() const;
  inline void clear_chatroommessagereq();
  static const int kChatroommessagereqFieldNumber = 11;
  inline const ::qihoo::protocol::chatroom::ChatRoomMessageRequest& chatroommessagereq() const;
  inline ::qihoo::protocol::chatroom::ChatRoomMessageRequest* mutable_chatroommessagereq();
  inline ::qihoo::protocol::chatroom::ChatRoomMessageRequest* release_chatroommessagereq();
  inline void set_allocated_chatroommessagereq(::qihoo::protocol::chatroom::ChatRoomMessageRequest* chatroommessagereq);

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
  inline bool has_createrooms() const;
  inline void clear_createrooms();
  static const int kCreateroomsFieldNumber = 12;
  inline const ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest& createrooms() const;
  inline ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* mutable_createrooms();
  inline ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* release_createrooms();
  inline void set_allocated_createrooms(::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* createrooms);

  // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
  inline bool has_syncroomtodba() const;
  inline void clear_syncroomtodba();
  static const int kSyncroomtodbaFieldNumber = 13;
  inline const ::qihoo::protocol::chatroom::SyncRoomToDBRequest& syncroomtodba() const;
  inline ::qihoo::protocol::chatroom::SyncRoomToDBRequest* mutable_syncroomtodba();
  inline ::qihoo::protocol::chatroom::SyncRoomToDBRequest* release_syncroomtodba();
  inline void set_allocated_syncroomtodba(::qihoo::protocol::chatroom::SyncRoomToDBRequest* syncroomtodba);

  // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
  inline bool has_subreq() const;
  inline void clear_subreq();
  static const int kSubreqFieldNumber = 14;
  inline const ::qihoo::protocol::chatroom::SubscribeRequest& subreq() const;
  inline ::qihoo::protocol::chatroom::SubscribeRequest* mutable_subreq();
  inline ::qihoo::protocol::chatroom::SubscribeRequest* release_subreq();
  inline void set_allocated_subreq(::qihoo::protocol::chatroom::SubscribeRequest* subreq);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomUpToServer)
 private:
  inline void set_has_payloadtype();
  inline void clear_has_payloadtype();
  inline void set_has_createchatroomreq();
  inline void clear_has_createchatroomreq();
  inline void set_has_getchatroominforeq();
  inline void clear_has_getchatroominforeq();
  inline void set_has_applyjoinchatroomreq();
  inline void clear_has_applyjoinchatroomreq();
  inline void set_has_quitchatroomreq();
  inline void clear_has_quitchatroomreq();
  inline void set_has_updatechatroomreq();
  inline void clear_has_updatechatroomreq();
  inline void set_has_kickmemberreq();
  inline void clear_has_kickmemberreq();
  inline void set_has_querychatroomidreq();
  inline void clear_has_querychatroomidreq();
  inline void set_has_updategameidreq();
  inline void clear_has_updategameidreq();
  inline void set_has_queryallgameroomreq();
  inline void clear_has_queryallgameroomreq();
  inline void set_has_chatroommessagereq();
  inline void clear_has_chatroommessagereq();
  inline void set_has_createrooms();
  inline void clear_has_createrooms();
  inline void set_has_syncroomtodba();
  inline void clear_has_syncroomtodba();
  inline void set_has_subreq();
  inline void clear_has_subreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::qihoo::protocol::chatroom::CreateChatRoomRequest* createchatroomreq_;
  ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* getchatroominforeq_;
  ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* applyjoinchatroomreq_;
  ::qihoo::protocol::chatroom::QuitChatRoomRequest* quitchatroomreq_;
  ::qihoo::protocol::chatroom::UpdateChatRoomRequest* updatechatroomreq_;
  ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* kickmemberreq_;
  ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* querychatroomidreq_;
  ::qihoo::protocol::chatroom::UpdateRoomIDRequest* updategameidreq_;
  ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* queryallgameroomreq_;
  ::qihoo::protocol::chatroom::ChatRoomMessageRequest* chatroommessagereq_;
  ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* createrooms_;
  ::qihoo::protocol::chatroom::SyncRoomToDBRequest* syncroomtodba_;
  ::qihoo::protocol::chatroom::SubscribeRequest* subreq_;
  ::google::protobuf::uint32 payloadtype_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomUpToServer* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomDownToUser : public ::google::protobuf::Message {
 public:
  ChatRoomDownToUser();
  virtual ~ChatRoomDownToUser();

  ChatRoomDownToUser(const ChatRoomDownToUser& from);

  inline ChatRoomDownToUser& operator=(const ChatRoomDownToUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomDownToUser& default_instance();

  void Swap(ChatRoomDownToUser* other);

  // implements Message ----------------------------------------------

  ChatRoomDownToUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomDownToUser& from);
  void MergeFrom(const ChatRoomDownToUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint32 payloadtype = 2;
  inline bool has_payloadtype() const;
  inline void clear_payloadtype();
  static const int kPayloadtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 payloadtype() const;
  inline void set_payloadtype(::google::protobuf::uint32 value);

  // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
  inline bool has_createchatroomresp() const;
  inline void clear_createchatroomresp();
  static const int kCreatechatroomrespFieldNumber = 3;
  inline const ::qihoo::protocol::chatroom::CreateChatRoomResponse& createchatroomresp() const;
  inline ::qihoo::protocol::chatroom::CreateChatRoomResponse* mutable_createchatroomresp();
  inline ::qihoo::protocol::chatroom::CreateChatRoomResponse* release_createchatroomresp();
  inline void set_allocated_createchatroomresp(::qihoo::protocol::chatroom::CreateChatRoomResponse* createchatroomresp);

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
  inline bool has_getchatroominforesp() const;
  inline void clear_getchatroominforesp();
  static const int kGetchatroominforespFieldNumber = 4;
  inline const ::qihoo::protocol::chatroom::GetChatRoomDetailResponse& getchatroominforesp() const;
  inline ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* mutable_getchatroominforesp();
  inline ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* release_getchatroominforesp();
  inline void set_allocated_getchatroominforesp(::qihoo::protocol::chatroom::GetChatRoomDetailResponse* getchatroominforesp);

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
  inline bool has_applyjoinchatroomresp() const;
  inline void clear_applyjoinchatroomresp();
  static const int kApplyjoinchatroomrespFieldNumber = 5;
  inline const ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse& applyjoinchatroomresp() const;
  inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* mutable_applyjoinchatroomresp();
  inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* release_applyjoinchatroomresp();
  inline void set_allocated_applyjoinchatroomresp(::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* applyjoinchatroomresp);

  // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
  inline bool has_quitchatroomresp() const;
  inline void clear_quitchatroomresp();
  static const int kQuitchatroomrespFieldNumber = 6;
  inline const ::qihoo::protocol::chatroom::QuitChatRoomResponse& quitchatroomresp() const;
  inline ::qihoo::protocol::chatroom::QuitChatRoomResponse* mutable_quitchatroomresp();
  inline ::qihoo::protocol::chatroom::QuitChatRoomResponse* release_quitchatroomresp();
  inline void set_allocated_quitchatroomresp(::qihoo::protocol::chatroom::QuitChatRoomResponse* quitchatroomresp);

  // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
  inline bool has_updatechatroomresp() const;
  inline void clear_updatechatroomresp();
  static const int kUpdatechatroomrespFieldNumber = 7;
  inline const ::qihoo::protocol::chatroom::UpdateChatRoomResponse& updatechatroomresp() const;
  inline ::qihoo::protocol::chatroom::UpdateChatRoomResponse* mutable_updatechatroomresp();
  inline ::qihoo::protocol::chatroom::UpdateChatRoomResponse* release_updatechatroomresp();
  inline void set_allocated_updatechatroomresp(::qihoo::protocol::chatroom::UpdateChatRoomResponse* updatechatroomresp);

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
  inline bool has_kickmemberresp() const;
  inline void clear_kickmemberresp();
  static const int kKickmemberrespFieldNumber = 8;
  inline const ::qihoo::protocol::chatroom::KickChatRoomMemberResponse& kickmemberresp() const;
  inline ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* mutable_kickmemberresp();
  inline ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* release_kickmemberresp();
  inline void set_allocated_kickmemberresp(::qihoo::protocol::chatroom::KickChatRoomMemberResponse* kickmemberresp);

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
  inline bool has_querychatroomidresp() const;
  inline void clear_querychatroomidresp();
  static const int kQuerychatroomidrespFieldNumber = 9;
  inline const ::qihoo::protocol::chatroom::QueryChatRoomIDResponse& querychatroomidresp() const;
  inline ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* mutable_querychatroomidresp();
  inline ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* release_querychatroomidresp();
  inline void set_allocated_querychatroomidresp(::qihoo::protocol::chatroom::QueryChatRoomIDResponse* querychatroomidresp);

  // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
  inline bool has_updategameidresp() const;
  inline void clear_updategameidresp();
  static const int kUpdategameidrespFieldNumber = 10;
  inline const ::qihoo::protocol::chatroom::UpdateRoomIDResponse& updategameidresp() const;
  inline ::qihoo::protocol::chatroom::UpdateRoomIDResponse* mutable_updategameidresp();
  inline ::qihoo::protocol::chatroom::UpdateRoomIDResponse* release_updategameidresp();
  inline void set_allocated_updategameidresp(::qihoo::protocol::chatroom::UpdateRoomIDResponse* updategameidresp);

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
  inline bool has_queryallgameroomresp() const;
  inline void clear_queryallgameroomresp();
  static const int kQueryallgameroomrespFieldNumber = 11;
  inline const ::qihoo::protocol::chatroom::QueryAllGameRoomResponse& queryallgameroomresp() const;
  inline ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* mutable_queryallgameroomresp();
  inline ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* release_queryallgameroomresp();
  inline void set_allocated_queryallgameroomresp(::qihoo::protocol::chatroom::QueryAllGameRoomResponse* queryallgameroomresp);

  // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
  inline bool has_chatroommessageresp() const;
  inline void clear_chatroommessageresp();
  static const int kChatroommessagerespFieldNumber = 12;
  inline const ::qihoo::protocol::chatroom::ChatRoomMessageResponse& chatroommessageresp() const;
  inline ::qihoo::protocol::chatroom::ChatRoomMessageResponse* mutable_chatroommessageresp();
  inline ::qihoo::protocol::chatroom::ChatRoomMessageResponse* release_chatroommessageresp();
  inline void set_allocated_chatroommessageresp(::qihoo::protocol::chatroom::ChatRoomMessageResponse* chatroommessageresp);

  // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
  inline bool has_newmsgnotify() const;
  inline void clear_newmsgnotify();
  static const int kNewmsgnotifyFieldNumber = 13;
  inline const ::qihoo::protocol::chatroom::ChatRoomNewMsg& newmsgnotify() const;
  inline ::qihoo::protocol::chatroom::ChatRoomNewMsg* mutable_newmsgnotify();
  inline ::qihoo::protocol::chatroom::ChatRoomNewMsg* release_newmsgnotify();
  inline void set_allocated_newmsgnotify(::qihoo::protocol::chatroom::ChatRoomNewMsg* newmsgnotify);

  // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
  inline bool has_errormsgnotify() const;
  inline void clear_errormsgnotify();
  static const int kErrormsgnotifyFieldNumber = 14;
  inline const ::qihoo::protocol::chatroom::ChatRoomErrorMsg& errormsgnotify() const;
  inline ::qihoo::protocol::chatroom::ChatRoomErrorMsg* mutable_errormsgnotify();
  inline ::qihoo::protocol::chatroom::ChatRoomErrorMsg* release_errormsgnotify();
  inline void set_allocated_errormsgnotify(::qihoo::protocol::chatroom::ChatRoomErrorMsg* errormsgnotify);

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
  inline bool has_createrooms() const;
  inline void clear_createrooms();
  static const int kCreateroomsFieldNumber = 15;
  inline const ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse& createrooms() const;
  inline ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* mutable_createrooms();
  inline ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* release_createrooms();
  inline void set_allocated_createrooms(::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* createrooms);

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
  inline bool has_memberjoinnotify() const;
  inline void clear_memberjoinnotify();
  static const int kMemberjoinnotifyFieldNumber = 16;
  inline const ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify& memberjoinnotify() const;
  inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* mutable_memberjoinnotify();
  inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* release_memberjoinnotify();
  inline void set_allocated_memberjoinnotify(::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* memberjoinnotify);

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
  inline bool has_memberquitnotify() const;
  inline void clear_memberquitnotify();
  static const int kMemberquitnotifyFieldNumber = 17;
  inline const ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify& memberquitnotify() const;
  inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* mutable_memberquitnotify();
  inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* release_memberquitnotify();
  inline void set_allocated_memberquitnotify(::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* memberquitnotify);

  // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
  inline bool has_subresp() const;
  inline void clear_subresp();
  static const int kSubrespFieldNumber = 18;
  inline const ::qihoo::protocol::chatroom::SubscribeResponse& subresp() const;
  inline ::qihoo::protocol::chatroom::SubscribeResponse* mutable_subresp();
  inline ::qihoo::protocol::chatroom::SubscribeResponse* release_subresp();
  inline void set_allocated_subresp(::qihoo::protocol::chatroom::SubscribeResponse* subresp);

  // optional bytes reason = 100;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 100;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const void* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  inline int multinotify_size() const;
  inline void clear_multinotify();
  static const int kMultinotifyFieldNumber = 200;
  inline const ::qihoo::protocol::chatroom::ChatRoomMNotify& multinotify(int index) const;
  inline ::qihoo::protocol::chatroom::ChatRoomMNotify* mutable_multinotify(int index);
  inline ::qihoo::protocol::chatroom::ChatRoomMNotify* add_multinotify();
  inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify >&
      multinotify() const;
  inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify >*
      mutable_multinotify();

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomDownToUser)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_payloadtype();
  inline void clear_has_payloadtype();
  inline void set_has_createchatroomresp();
  inline void clear_has_createchatroomresp();
  inline void set_has_getchatroominforesp();
  inline void clear_has_getchatroominforesp();
  inline void set_has_applyjoinchatroomresp();
  inline void clear_has_applyjoinchatroomresp();
  inline void set_has_quitchatroomresp();
  inline void clear_has_quitchatroomresp();
  inline void set_has_updatechatroomresp();
  inline void clear_has_updatechatroomresp();
  inline void set_has_kickmemberresp();
  inline void clear_has_kickmemberresp();
  inline void set_has_querychatroomidresp();
  inline void clear_has_querychatroomidresp();
  inline void set_has_updategameidresp();
  inline void clear_has_updategameidresp();
  inline void set_has_queryallgameroomresp();
  inline void clear_has_queryallgameroomresp();
  inline void set_has_chatroommessageresp();
  inline void clear_has_chatroommessageresp();
  inline void set_has_newmsgnotify();
  inline void clear_has_newmsgnotify();
  inline void set_has_errormsgnotify();
  inline void clear_has_errormsgnotify();
  inline void set_has_createrooms();
  inline void clear_has_createrooms();
  inline void set_has_memberjoinnotify();
  inline void clear_has_memberjoinnotify();
  inline void set_has_memberquitnotify();
  inline void clear_has_memberquitnotify();
  inline void set_has_subresp();
  inline void clear_has_subresp();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 payloadtype_;
  ::qihoo::protocol::chatroom::CreateChatRoomResponse* createchatroomresp_;
  ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* getchatroominforesp_;
  ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* applyjoinchatroomresp_;
  ::qihoo::protocol::chatroom::QuitChatRoomResponse* quitchatroomresp_;
  ::qihoo::protocol::chatroom::UpdateChatRoomResponse* updatechatroomresp_;
  ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* kickmemberresp_;
  ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* querychatroomidresp_;
  ::qihoo::protocol::chatroom::UpdateRoomIDResponse* updategameidresp_;
  ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* queryallgameroomresp_;
  ::qihoo::protocol::chatroom::ChatRoomMessageResponse* chatroommessageresp_;
  ::qihoo::protocol::chatroom::ChatRoomNewMsg* newmsgnotify_;
  ::qihoo::protocol::chatroom::ChatRoomErrorMsg* errormsgnotify_;
  ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* createrooms_;
  ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* memberjoinnotify_;
  ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* memberquitnotify_;
  ::qihoo::protocol::chatroom::SubscribeResponse* subresp_;
  ::std::string* reason_;
  ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify > multinotify_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomDownToUser* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomPacket : public ::google::protobuf::Message {
 public:
  ChatRoomPacket();
  virtual ~ChatRoomPacket();

  ChatRoomPacket(const ChatRoomPacket& from);

  inline ChatRoomPacket& operator=(const ChatRoomPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomPacket& default_instance();

  void Swap(ChatRoomPacket* other);

  // implements Message ----------------------------------------------

  ChatRoomPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomPacket& from);
  void MergeFrom(const ChatRoomPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
  inline bool has_to_server_data() const;
  inline void clear_to_server_data();
  static const int kToServerDataFieldNumber = 2;
  inline const ::qihoo::protocol::chatroom::ChatRoomUpToServer& to_server_data() const;
  inline ::qihoo::protocol::chatroom::ChatRoomUpToServer* mutable_to_server_data();
  inline ::qihoo::protocol::chatroom::ChatRoomUpToServer* release_to_server_data();
  inline void set_allocated_to_server_data(::qihoo::protocol::chatroom::ChatRoomUpToServer* to_server_data);

  // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
  inline bool has_to_user_data() const;
  inline void clear_to_user_data();
  static const int kToUserDataFieldNumber = 3;
  inline const ::qihoo::protocol::chatroom::ChatRoomDownToUser& to_user_data() const;
  inline ::qihoo::protocol::chatroom::ChatRoomDownToUser* mutable_to_user_data();
  inline ::qihoo::protocol::chatroom::ChatRoomDownToUser* release_to_user_data();
  inline void set_allocated_to_user_data(::qihoo::protocol::chatroom::ChatRoomDownToUser* to_user_data);

  // optional string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional uint64 client_sn = 5;
  inline bool has_client_sn() const;
  inline void clear_client_sn();
  static const int kClientSnFieldNumber = 5;
  inline ::google::protobuf::uint64 client_sn() const;
  inline void set_client_sn(::google::protobuf::uint64 value);

  // optional uint32 appid = 6;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 6;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qihoo.protocol.chatroom.ChatRoomPacket)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_to_server_data();
  inline void clear_has_to_server_data();
  inline void set_has_to_user_data();
  inline void clear_has_to_user_data();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_client_sn();
  inline void clear_has_client_sn();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::qihoo::protocol::chatroom::ChatRoomUpToServer* to_server_data_;
  ::qihoo::protocol::chatroom::ChatRoomDownToUser* to_user_data_;
  ::std::string* uuid_;
  ::google::protobuf::uint64 client_sn_;
  ::google::protobuf::uint32 appid_;
  friend void  protobuf_AddDesc_chatroom_2eproto();
  friend void protobuf_AssignDesc_chatroom_2eproto();
  friend void protobuf_ShutdownFile_chatroom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// CRPair

// required string key = 1;
inline bool CRPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CRPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CRPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CRPair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CRPair::key() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRPair.key)
  return *key_;
}
inline void CRPair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRPair.key)
}
inline void CRPair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRPair.key)
}
inline void CRPair::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRPair.key)
}
inline ::std::string* CRPair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRPair.key)
  return key_;
}
inline ::std::string* CRPair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CRPair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRPair.key)
}

// optional bytes value = 2;
inline bool CRPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CRPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CRPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CRPair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CRPair::value() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRPair.value)
  return *value_;
}
inline void CRPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRPair.value)
}
inline void CRPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRPair.value)
}
inline void CRPair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRPair.value)
}
inline ::std::string* CRPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRPair.value)
  return value_;
}
inline ::std::string* CRPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CRPair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRPair.value)
}

// -------------------------------------------------------------------

// CRUser

// optional bytes userid = 1;
inline bool CRUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CRUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CRUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CRUser::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& CRUser::userid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.userid)
  return *userid_;
}
inline void CRUser::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.userid)
}
inline void CRUser::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRUser.userid)
}
inline void CRUser::set_userid(const void* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRUser.userid)
}
inline ::std::string* CRUser::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.userid)
  return userid_;
}
inline ::std::string* CRUser::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CRUser::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRUser.userid)
}

// optional string name = 2;
inline bool CRUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CRUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CRUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CRUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CRUser::name() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.name)
  return *name_;
}
inline void CRUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.name)
}
inline void CRUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRUser.name)
}
inline void CRUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRUser.name)
}
inline ::std::string* CRUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.name)
  return name_;
}
inline ::std::string* CRUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CRUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRUser.name)
}

// repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
inline int CRUser::publicsetting_size() const {
  return publicsetting_.size();
}
inline void CRUser::clear_publicsetting() {
  publicsetting_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRPair& CRUser::publicsetting(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRPair* CRUser::mutable_publicsetting(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRPair* CRUser::add_publicsetting() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
CRUser::publicsetting() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
CRUser::mutable_publicsetting() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CRUser.publicsetting)
  return &publicsetting_;
}

// repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
inline int CRUser::privatesetting_size() const {
  return privatesetting_.size();
}
inline void CRUser::clear_privatesetting() {
  privatesetting_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRPair& CRUser::privatesetting(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRPair* CRUser::mutable_privatesetting(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRPair* CRUser::add_privatesetting() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
CRUser::privatesetting() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
CRUser::mutable_privatesetting() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CRUser.privatesetting)
  return &privatesetting_;
}

// optional int32 status = 5;
inline bool CRUser::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CRUser::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CRUser::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CRUser::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 CRUser::status() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.status)
  return status_;
}
inline void CRUser::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.status)
}

// optional bytes userdata = 6;
inline bool CRUser::has_userdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CRUser::set_has_userdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CRUser::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CRUser::clear_userdata() {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_->clear();
  }
  clear_has_userdata();
}
inline const ::std::string& CRUser::userdata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.userdata)
  return *userdata_;
}
inline void CRUser::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.userdata)
}
inline void CRUser::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRUser.userdata)
}
inline void CRUser::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRUser.userdata)
}
inline ::std::string* CRUser::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.userdata)
  return userdata_;
}
inline ::std::string* CRUser::release_userdata() {
  clear_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CRUser::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRUser.userdata)
}

// -------------------------------------------------------------------

// ChatRoom

// required bytes roomid = 1;
inline bool ChatRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoom::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& ChatRoom::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.roomid)
  return *roomid_;
}
inline void ChatRoom::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.roomid)
}
inline void ChatRoom::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.roomid)
}
inline void ChatRoom::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.roomid)
}
inline ::std::string* ChatRoom::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.roomid)
  return roomid_;
}
inline ::std::string* ChatRoom::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoom::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.roomid)
}

// optional .qihoo.protocol.chatroom.CRUser creater = 2;
inline bool ChatRoom::has_creater() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoom::set_has_creater() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoom::clear_has_creater() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoom::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
inline const ::qihoo::protocol::chatroom::CRUser& ChatRoom::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.creater)
  return creater_ != NULL ? *creater_ : *default_instance_->creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoom::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) creater_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.creater)
  return creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoom::release_creater() {
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
inline void ChatRoom::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.creater)
}

// optional string name = 3;
inline bool ChatRoom::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoom::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoom::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoom::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatRoom::name() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.name)
  return *name_;
}
inline void ChatRoom::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.name)
}
inline void ChatRoom::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.name)
}
inline void ChatRoom::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.name)
}
inline ::std::string* ChatRoom::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.name)
  return name_;
}
inline ::std::string* ChatRoom::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoom::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.name)
}

// optional uint64 version = 4;
inline bool ChatRoom::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoom::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoom::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoom::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 ChatRoom::version() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.version)
  return version_;
}
inline void ChatRoom::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.version)
}

// optional uint64 maxmsgid = 5;
inline bool ChatRoom::has_maxmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoom::set_has_maxmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoom::clear_has_maxmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoom::clear_maxmsgid() {
  maxmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxmsgid();
}
inline ::google::protobuf::uint64 ChatRoom::maxmsgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.maxmsgid)
  return maxmsgid_;
}
inline void ChatRoom::set_maxmsgid(::google::protobuf::uint64 value) {
  set_has_maxmsgid();
  maxmsgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.maxmsgid)
}

// optional uint64 memcountlimit = 6;
inline bool ChatRoom::has_memcountlimit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoom::set_has_memcountlimit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoom::clear_has_memcountlimit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoom::clear_memcountlimit() {
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  clear_has_memcountlimit();
}
inline ::google::protobuf::uint64 ChatRoom::memcountlimit() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.memcountlimit)
  return memcountlimit_;
}
inline void ChatRoom::set_memcountlimit(::google::protobuf::uint64 value) {
  set_has_memcountlimit();
  memcountlimit_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.memcountlimit)
}

// optional string roomtype = 7;
inline bool ChatRoom::has_roomtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoom::set_has_roomtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoom::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoom::clear_roomtype() {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_->clear();
  }
  clear_has_roomtype();
}
inline const ::std::string& ChatRoom::roomtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.roomtype)
  return *roomtype_;
}
inline void ChatRoom::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
inline void ChatRoom::set_roomtype(const char* value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
inline void ChatRoom::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
inline ::std::string* ChatRoom::mutable_roomtype() {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.roomtype)
  return roomtype_;
}
inline ::std::string* ChatRoom::release_roomtype() {
  clear_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomtype_;
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoom::set_allocated_roomtype(::std::string* roomtype) {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtype_;
  }
  if (roomtype) {
    set_has_roomtype();
    roomtype_ = roomtype;
  } else {
    clear_has_roomtype();
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.roomtype)
}

// repeated .qihoo.protocol.chatroom.CRPair properties = 8;
inline int ChatRoom::properties_size() const {
  return properties_.size();
}
inline void ChatRoom::clear_properties() {
  properties_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRPair& ChatRoom::properties(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRPair* ChatRoom::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRPair* ChatRoom::add_properties() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
ChatRoom::properties() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
ChatRoom::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.properties)
  return &properties_;
}

// repeated .qihoo.protocol.chatroom.CRUser members = 9;
inline int ChatRoom::members_size() const {
  return members_.size();
}
inline void ChatRoom::clear_members() {
  members_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRUser& ChatRoom::members(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.members)
  return members_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoom::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.members)
  return members_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoom::add_members() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
ChatRoom::members() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
ChatRoom::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.members)
  return &members_;
}

// repeated bytes blacklist = 10;
inline int ChatRoom::blacklist_size() const {
  return blacklist_.size();
}
inline void ChatRoom::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::std::string& ChatRoom::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_.Get(index);
}
inline ::std::string* ChatRoom::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_.Mutable(index);
}
inline void ChatRoom::set_blacklist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.blacklist)
  blacklist_.Mutable(index)->assign(value);
}
inline void ChatRoom::set_blacklist(int index, const char* value) {
  blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
inline void ChatRoom::set_blacklist(int index, const void* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
inline ::std::string* ChatRoom::add_blacklist() {
  return blacklist_.Add();
}
inline void ChatRoom::add_blacklist(const ::std::string& value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
inline void ChatRoom::add_blacklist(const char* value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
inline void ChatRoom::add_blacklist(const void* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatRoom::blacklist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatRoom::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return &blacklist_;
}

// optional string gameid = 11;
inline bool ChatRoom::has_gameid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRoom::set_has_gameid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRoom::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRoom::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& ChatRoom::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.gameid)
  return *gameid_;
}
inline void ChatRoom::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.gameid)
}
inline void ChatRoom::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.gameid)
}
inline void ChatRoom::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.gameid)
}
inline ::std::string* ChatRoom::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.gameid)
  return gameid_;
}
inline ::std::string* ChatRoom::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoom::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.gameid)
}

// repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
inline int ChatRoom::tempmembers_size() const {
  return tempmembers_.size();
}
inline void ChatRoom::clear_tempmembers() {
  tempmembers_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRUser& ChatRoom::tempmembers(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoom::mutable_tempmembers(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoom::add_tempmembers() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
ChatRoom::tempmembers() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
ChatRoom::mutable_tempmembers() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return &tempmembers_;
}

// optional bytes partnerdata = 13;
inline bool ChatRoom::has_partnerdata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatRoom::set_has_partnerdata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatRoom::clear_has_partnerdata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatRoom::clear_partnerdata() {
  if (partnerdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnerdata_->clear();
  }
  clear_has_partnerdata();
}
inline const ::std::string& ChatRoom::partnerdata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.partnerdata)
  return *partnerdata_;
}
inline void ChatRoom::set_partnerdata(const ::std::string& value) {
  set_has_partnerdata();
  if (partnerdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnerdata_ = new ::std::string;
  }
  partnerdata_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
inline void ChatRoom::set_partnerdata(const char* value) {
  set_has_partnerdata();
  if (partnerdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnerdata_ = new ::std::string;
  }
  partnerdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
inline void ChatRoom::set_partnerdata(const void* value, size_t size) {
  set_has_partnerdata();
  if (partnerdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnerdata_ = new ::std::string;
  }
  partnerdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
inline ::std::string* ChatRoom::mutable_partnerdata() {
  set_has_partnerdata();
  if (partnerdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnerdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.partnerdata)
  return partnerdata_;
}
inline ::std::string* ChatRoom::release_partnerdata() {
  clear_has_partnerdata();
  if (partnerdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partnerdata_;
    partnerdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoom::set_allocated_partnerdata(::std::string* partnerdata) {
  if (partnerdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partnerdata_;
  }
  if (partnerdata) {
    set_has_partnerdata();
    partnerdata_ = partnerdata;
  } else {
    clear_has_partnerdata();
    partnerdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}

// -------------------------------------------------------------------

// CreateChatRoomRequest

// optional string gameid = 1;
inline bool CreateChatRoomRequest::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatRoomRequest::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatRoomRequest::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatRoomRequest::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& CreateChatRoomRequest::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
  return *gameid_;
}
inline void CreateChatRoomRequest::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
inline void CreateChatRoomRequest::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
inline void CreateChatRoomRequest::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
inline ::std::string* CreateChatRoomRequest::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
  return gameid_;
}
inline ::std::string* CreateChatRoomRequest::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateChatRoomRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}

// optional string roomname = 2;
inline bool CreateChatRoomRequest::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateChatRoomRequest::set_has_roomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateChatRoomRequest::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateChatRoomRequest::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& CreateChatRoomRequest::roomname() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
  return *roomname_;
}
inline void CreateChatRoomRequest::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
inline void CreateChatRoomRequest::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
inline void CreateChatRoomRequest::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
inline ::std::string* CreateChatRoomRequest::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
  return roomname_;
}
inline ::std::string* CreateChatRoomRequest::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateChatRoomRequest::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}

// optional uint64 memcountlimit = 3;
inline bool CreateChatRoomRequest::has_memcountlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateChatRoomRequest::set_has_memcountlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateChatRoomRequest::clear_has_memcountlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateChatRoomRequest::clear_memcountlimit() {
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  clear_has_memcountlimit();
}
inline ::google::protobuf::uint64 CreateChatRoomRequest::memcountlimit() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.memcountlimit)
  return memcountlimit_;
}
inline void CreateChatRoomRequest::set_memcountlimit(::google::protobuf::uint64 value) {
  set_has_memcountlimit();
  memcountlimit_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.memcountlimit)
}

// optional string roomtype = 4;
inline bool CreateChatRoomRequest::has_roomtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateChatRoomRequest::set_has_roomtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateChatRoomRequest::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateChatRoomRequest::clear_roomtype() {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_->clear();
  }
  clear_has_roomtype();
}
inline const ::std::string& CreateChatRoomRequest::roomtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
  return *roomtype_;
}
inline void CreateChatRoomRequest::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
inline void CreateChatRoomRequest::set_roomtype(const char* value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
inline void CreateChatRoomRequest::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
inline ::std::string* CreateChatRoomRequest::mutable_roomtype() {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
  return roomtype_;
}
inline ::std::string* CreateChatRoomRequest::release_roomtype() {
  clear_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomtype_;
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateChatRoomRequest::set_allocated_roomtype(::std::string* roomtype) {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtype_;
  }
  if (roomtype) {
    set_has_roomtype();
    roomtype_ = roomtype;
  } else {
    clear_has_roomtype();
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}

// repeated .qihoo.protocol.chatroom.CRUser members = 5;
inline int CreateChatRoomRequest::members_size() const {
  return members_.size();
}
inline void CreateChatRoomRequest::clear_members() {
  members_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRUser& CreateChatRoomRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::add_members() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
CreateChatRoomRequest::members() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
CreateChatRoomRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return &members_;
}

// optional .qihoo.protocol.chatroom.CRUser creater = 6;
inline bool CreateChatRoomRequest::has_creater() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateChatRoomRequest::set_has_creater() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateChatRoomRequest::clear_has_creater() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateChatRoomRequest::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
inline const ::qihoo::protocol::chatroom::CRUser& CreateChatRoomRequest::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
  return creater_ != NULL ? *creater_ : *default_instance_->creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) creater_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
  return creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::release_creater() {
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
inline void CreateChatRoomRequest::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
}

// repeated .qihoo.protocol.chatroom.CRPair properties = 7;
inline int CreateChatRoomRequest::properties_size() const {
  return properties_.size();
}
inline void CreateChatRoomRequest::clear_properties() {
  properties_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRPair& CreateChatRoomRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRPair* CreateChatRoomRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRPair* CreateChatRoomRequest::add_properties() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
CreateChatRoomRequest::properties() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
CreateChatRoomRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return &properties_;
}

// -------------------------------------------------------------------

// CreateChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool CreateChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& CreateChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomResponse::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void CreateChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
}

// -------------------------------------------------------------------

// CreateMultiChatRoomRequest

// repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
inline int CreateMultiChatRoomRequest::rooms_size() const {
  return rooms_.size();
}
inline void CreateMultiChatRoomRequest::clear_rooms() {
  rooms_.Clear();
}
inline const ::qihoo::protocol::chatroom::CreateChatRoomRequest& CreateMultiChatRoomRequest::rooms(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_.Get(index);
}
inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* CreateMultiChatRoomRequest::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* CreateMultiChatRoomRequest::add_rooms() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest >&
CreateMultiChatRoomRequest::rooms() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest >*
CreateMultiChatRoomRequest::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return &rooms_;
}

// optional .qihoo.protocol.chatroom.CRUser creater = 2;
inline bool CreateMultiChatRoomRequest::has_creater() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateMultiChatRoomRequest::set_has_creater() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateMultiChatRoomRequest::clear_has_creater() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateMultiChatRoomRequest::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
inline const ::qihoo::protocol::chatroom::CRUser& CreateMultiChatRoomRequest::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
  return creater_ != NULL ? *creater_ : *default_instance_->creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomRequest::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) creater_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
  return creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomRequest::release_creater() {
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
inline void CreateMultiChatRoomRequest::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
}

// -------------------------------------------------------------------

// CreateMultiChatRoomResponse

// repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
inline int CreateMultiChatRoomResponse::rooms_size() const {
  return rooms_.size();
}
inline void CreateMultiChatRoomResponse::clear_rooms() {
  rooms_.Clear();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& CreateMultiChatRoomResponse::rooms(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_.Get(index);
}
inline ::qihoo::protocol::chatroom::ChatRoom* CreateMultiChatRoomResponse::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::ChatRoom* CreateMultiChatRoomResponse::add_rooms() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom >&
CreateMultiChatRoomResponse::rooms() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom >*
CreateMultiChatRoomResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return &rooms_;
}

// optional .qihoo.protocol.chatroom.CRUser creater = 2;
inline bool CreateMultiChatRoomResponse::has_creater() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateMultiChatRoomResponse::set_has_creater() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateMultiChatRoomResponse::clear_has_creater() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateMultiChatRoomResponse::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
inline const ::qihoo::protocol::chatroom::CRUser& CreateMultiChatRoomResponse::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
  return creater_ != NULL ? *creater_ : *default_instance_->creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomResponse::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) creater_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
  return creater_;
}
inline ::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomResponse::release_creater() {
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
inline void CreateMultiChatRoomResponse::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
}

// -------------------------------------------------------------------

// GetChatRoomDetailRequest

// required bytes roomid = 1;
inline bool GetChatRoomDetailRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomDetailRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomDetailRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomDetailRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& GetChatRoomDetailRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
  return *roomid_;
}
inline void GetChatRoomDetailRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
inline void GetChatRoomDetailRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
inline void GetChatRoomDetailRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
inline ::std::string* GetChatRoomDetailRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
  return roomid_;
}
inline ::std::string* GetChatRoomDetailRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetChatRoomDetailRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}

// optional int32 index = 2;
inline bool GetChatRoomDetailRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatRoomDetailRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatRoomDetailRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatRoomDetailRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GetChatRoomDetailRequest::index() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailRequest.index)
  return index_;
}
inline void GetChatRoomDetailRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.GetChatRoomDetailRequest.index)
}

// optional int32 offset = 3;
inline bool GetChatRoomDetailRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatRoomDetailRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatRoomDetailRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatRoomDetailRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 GetChatRoomDetailRequest::offset() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailRequest.offset)
  return offset_;
}
inline void GetChatRoomDetailRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.GetChatRoomDetailRequest.offset)
}

// -------------------------------------------------------------------

// GetChatRoomDetailResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool GetChatRoomDetailResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatRoomDetailResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatRoomDetailResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatRoomDetailResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& GetChatRoomDetailResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* GetChatRoomDetailResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* GetChatRoomDetailResponse::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void GetChatRoomDetailResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
}

// -------------------------------------------------------------------

// ApplyJoinChatRoomRequest

// required bytes roomid = 1;
inline bool ApplyJoinChatRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyJoinChatRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyJoinChatRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyJoinChatRoomRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& ApplyJoinChatRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
  return *roomid_;
}
inline void ApplyJoinChatRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
inline void ApplyJoinChatRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
inline void ApplyJoinChatRoomRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
inline ::std::string* ApplyJoinChatRoomRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
  return roomid_;
}
inline ::std::string* ApplyJoinChatRoomRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ApplyJoinChatRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}

// optional .qihoo.protocol.chatroom.ChatRoom room = 2;
inline bool ApplyJoinChatRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplyJoinChatRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplyJoinChatRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplyJoinChatRoomRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& ApplyJoinChatRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomRequest::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void ApplyJoinChatRoomRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
}

// optional int32 userid_type = 3;
inline bool ApplyJoinChatRoomRequest::has_userid_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplyJoinChatRoomRequest::set_has_userid_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApplyJoinChatRoomRequest::clear_has_userid_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApplyJoinChatRoomRequest::clear_userid_type() {
  userid_type_ = 0;
  clear_has_userid_type();
}
inline ::google::protobuf::int32 ApplyJoinChatRoomRequest::userid_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userid_type)
  return userid_type_;
}
inline void ApplyJoinChatRoomRequest::set_userid_type(::google::protobuf::int32 value) {
  set_has_userid_type();
  userid_type_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userid_type)
}

// optional bytes userdata = 4;
inline bool ApplyJoinChatRoomRequest::has_userdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplyJoinChatRoomRequest::set_has_userdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ApplyJoinChatRoomRequest::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ApplyJoinChatRoomRequest::clear_userdata() {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_->clear();
  }
  clear_has_userdata();
}
inline const ::std::string& ApplyJoinChatRoomRequest::userdata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
  return *userdata_;
}
inline void ApplyJoinChatRoomRequest::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
inline void ApplyJoinChatRoomRequest::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
inline void ApplyJoinChatRoomRequest::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
inline ::std::string* ApplyJoinChatRoomRequest::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
  return userdata_;
}
inline ::std::string* ApplyJoinChatRoomRequest::release_userdata() {
  clear_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ApplyJoinChatRoomRequest::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}

// optional bool no_userlist = 5 [default = false];
inline bool ApplyJoinChatRoomRequest::has_no_userlist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplyJoinChatRoomRequest::set_has_no_userlist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ApplyJoinChatRoomRequest::clear_has_no_userlist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ApplyJoinChatRoomRequest::clear_no_userlist() {
  no_userlist_ = false;
  clear_has_no_userlist();
}
inline bool ApplyJoinChatRoomRequest::no_userlist() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.no_userlist)
  return no_userlist_;
}
inline void ApplyJoinChatRoomRequest::set_no_userlist(bool value) {
  set_has_no_userlist();
  no_userlist_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.no_userlist)
}

// -------------------------------------------------------------------

// ApplyJoinChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool ApplyJoinChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyJoinChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyJoinChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyJoinChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& ApplyJoinChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomResponse::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void ApplyJoinChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
}

// optional bool pull_lost = 2 [default = true];
inline bool ApplyJoinChatRoomResponse::has_pull_lost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplyJoinChatRoomResponse::set_has_pull_lost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplyJoinChatRoomResponse::clear_has_pull_lost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplyJoinChatRoomResponse::clear_pull_lost() {
  pull_lost_ = true;
  clear_has_pull_lost();
}
inline bool ApplyJoinChatRoomResponse::pull_lost() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.pull_lost)
  return pull_lost_;
}
inline void ApplyJoinChatRoomResponse::set_pull_lost(bool value) {
  set_has_pull_lost();
  pull_lost_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.pull_lost)
}

// -------------------------------------------------------------------

// QuitChatRoomRequest

// required bytes roomid = 1;
inline bool QuitChatRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitChatRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitChatRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitChatRoomRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& QuitChatRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
  return *roomid_;
}
inline void QuitChatRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
inline void QuitChatRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
inline void QuitChatRoomRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
inline ::std::string* QuitChatRoomRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
  return roomid_;
}
inline ::std::string* QuitChatRoomRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuitChatRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}

// optional .qihoo.protocol.chatroom.ChatRoom room = 2;
inline bool QuitChatRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuitChatRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuitChatRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuitChatRoomRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& QuitChatRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomRequest::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void QuitChatRoomRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
}

// -------------------------------------------------------------------

// QuitChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool QuitChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuitChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuitChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuitChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& QuitChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomResponse::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void QuitChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
}

// -------------------------------------------------------------------

// QueryAllGameRoomRequest

// -------------------------------------------------------------------

// QueryAllGameRoomResponse

// repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
inline int QueryAllGameRoomResponse::maplist_size() const {
  return maplist_.size();
}
inline void QueryAllGameRoomResponse::clear_maplist() {
  maplist_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRPair& QueryAllGameRoomResponse::maplist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRPair* QueryAllGameRoomResponse::mutable_maplist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRPair* QueryAllGameRoomResponse::add_maplist() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
QueryAllGameRoomResponse::maplist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
QueryAllGameRoomResponse::mutable_maplist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return &maplist_;
}

// -------------------------------------------------------------------

// QueryChatRoomIDRequest

// required string gameid = 1;
inline bool QueryChatRoomIDRequest::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryChatRoomIDRequest::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryChatRoomIDRequest::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryChatRoomIDRequest::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& QueryChatRoomIDRequest::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
  return *gameid_;
}
inline void QueryChatRoomIDRequest::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
inline void QueryChatRoomIDRequest::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
inline void QueryChatRoomIDRequest::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
inline ::std::string* QueryChatRoomIDRequest::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
  return gameid_;
}
inline ::std::string* QueryChatRoomIDRequest::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryChatRoomIDRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}

// -------------------------------------------------------------------

// QueryChatRoomIDResponse

// optional bytes roomid = 1;
inline bool QueryChatRoomIDResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryChatRoomIDResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryChatRoomIDResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryChatRoomIDResponse::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& QueryChatRoomIDResponse::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
  return *roomid_;
}
inline void QueryChatRoomIDResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
inline void QueryChatRoomIDResponse::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
inline void QueryChatRoomIDResponse::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
inline ::std::string* QueryChatRoomIDResponse::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
  return roomid_;
}
inline ::std::string* QueryChatRoomIDResponse::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryChatRoomIDResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}

// optional string gameid = 2;
inline bool QueryChatRoomIDResponse::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryChatRoomIDResponse::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryChatRoomIDResponse::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryChatRoomIDResponse::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& QueryChatRoomIDResponse::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
  return *gameid_;
}
inline void QueryChatRoomIDResponse::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
inline void QueryChatRoomIDResponse::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
inline void QueryChatRoomIDResponse::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
inline ::std::string* QueryChatRoomIDResponse::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
  return gameid_;
}
inline ::std::string* QueryChatRoomIDResponse::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryChatRoomIDResponse::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}

// -------------------------------------------------------------------

// UpdateRoomIDRequest

// required string gameid = 1;
inline bool UpdateRoomIDRequest::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRoomIDRequest::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRoomIDRequest::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRoomIDRequest::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& UpdateRoomIDRequest::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
  return *gameid_;
}
inline void UpdateRoomIDRequest::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
inline void UpdateRoomIDRequest::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
inline void UpdateRoomIDRequest::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
inline ::std::string* UpdateRoomIDRequest::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
  return gameid_;
}
inline ::std::string* UpdateRoomIDRequest::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateRoomIDRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}

// required bytes roomid = 2;
inline bool UpdateRoomIDRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateRoomIDRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateRoomIDRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateRoomIDRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& UpdateRoomIDRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
  return *roomid_;
}
inline void UpdateRoomIDRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
inline void UpdateRoomIDRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
inline void UpdateRoomIDRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
inline ::std::string* UpdateRoomIDRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
  return roomid_;
}
inline ::std::string* UpdateRoomIDRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateRoomIDRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}

// -------------------------------------------------------------------

// UpdateRoomIDResponse

// -------------------------------------------------------------------

// UpdateChatRoomRequest

// required bytes roomid = 1;
inline bool UpdateChatRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChatRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChatRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChatRoomRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& UpdateChatRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
  return *roomid_;
}
inline void UpdateChatRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
inline void UpdateChatRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
inline void UpdateChatRoomRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
inline ::std::string* UpdateChatRoomRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
  return roomid_;
}
inline ::std::string* UpdateChatRoomRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateChatRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}

// required .qihoo.protocol.chatroom.ChatRoom room = 2;
inline bool UpdateChatRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateChatRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateChatRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateChatRoomRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& UpdateChatRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomRequest::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void UpdateChatRoomRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
}

// -------------------------------------------------------------------

// UpdateChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool UpdateChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& UpdateChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomResponse::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void UpdateChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
}

// -------------------------------------------------------------------

// KickChatRoomMemberRequest

// required bytes roomid = 1;
inline bool KickChatRoomMemberRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickChatRoomMemberRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickChatRoomMemberRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickChatRoomMemberRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& KickChatRoomMemberRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
  return *roomid_;
}
inline void KickChatRoomMemberRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
inline void KickChatRoomMemberRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
inline void KickChatRoomMemberRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
inline ::std::string* KickChatRoomMemberRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
  return roomid_;
}
inline ::std::string* KickChatRoomMemberRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KickChatRoomMemberRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}

// repeated .qihoo.protocol.chatroom.CRUser members = 2;
inline int KickChatRoomMemberRequest::members_size() const {
  return members_.size();
}
inline void KickChatRoomMemberRequest::clear_members() {
  members_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRUser& KickChatRoomMemberRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRUser* KickChatRoomMemberRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRUser* KickChatRoomMemberRequest::add_members() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
KickChatRoomMemberRequest::members() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
KickChatRoomMemberRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return &members_;
}

// optional .qihoo.protocol.chatroom.ChatRoom room = 3;
inline bool KickChatRoomMemberRequest::has_room() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickChatRoomMemberRequest::set_has_room() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickChatRoomMemberRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickChatRoomMemberRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& KickChatRoomMemberRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberRequest::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void KickChatRoomMemberRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
}

// -------------------------------------------------------------------

// KickChatRoomMemberResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool KickChatRoomMemberResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickChatRoomMemberResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickChatRoomMemberResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickChatRoomMemberResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& KickChatRoomMemberResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberResponse::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void KickChatRoomMemberResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
}

// -------------------------------------------------------------------

// SyncRoomToDBRequest

// required bytes roomid = 1;
inline bool SyncRoomToDBRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncRoomToDBRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncRoomToDBRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncRoomToDBRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& SyncRoomToDBRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
  return *roomid_;
}
inline void SyncRoomToDBRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
inline void SyncRoomToDBRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
inline void SyncRoomToDBRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
inline ::std::string* SyncRoomToDBRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
  return roomid_;
}
inline ::std::string* SyncRoomToDBRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SyncRoomToDBRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}

// -------------------------------------------------------------------

// CreateChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool CreateChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& CreateChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomNotify::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void CreateChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
}

// -------------------------------------------------------------------

// MemberJoinChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool MemberJoinChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberJoinChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberJoinChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberJoinChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& MemberJoinChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* MemberJoinChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* MemberJoinChatRoomNotify::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void MemberJoinChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
}

// -------------------------------------------------------------------

// MemberQuitChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool MemberQuitChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberQuitChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberQuitChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberQuitChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& MemberQuitChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* MemberQuitChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* MemberQuitChatRoomNotify::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void MemberQuitChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
}

// -------------------------------------------------------------------

// KickMemberNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool KickMemberNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickMemberNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickMemberNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickMemberNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& KickMemberNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickMemberNotify.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* KickMemberNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickMemberNotify.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* KickMemberNotify::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void KickMemberNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickMemberNotify.room)
}

// optional .qihoo.protocol.chatroom.CRUser user = 2;
inline bool KickMemberNotify::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickMemberNotify::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickMemberNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickMemberNotify::clear_user() {
  if (user_ != NULL) user_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_user();
}
inline const ::qihoo::protocol::chatroom::CRUser& KickMemberNotify::user() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickMemberNotify.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::qihoo::protocol::chatroom::CRUser* KickMemberNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickMemberNotify.user)
  return user_;
}
inline ::qihoo::protocol::chatroom::CRUser* KickMemberNotify::release_user() {
  clear_has_user();
  ::qihoo::protocol::chatroom::CRUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void KickMemberNotify::set_allocated_user(::qihoo::protocol::chatroom::CRUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickMemberNotify.user)
}

// -------------------------------------------------------------------

// UpdateChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
inline bool UpdateChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
inline const ::qihoo::protocol::chatroom::ChatRoom& UpdateChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
  return room_;
}
inline ::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomNotify::release_room() {
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
inline void UpdateChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
}

// optional .qihoo.protocol.chatroom.CRUser user = 2;
inline bool UpdateChatRoomNotify::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateChatRoomNotify::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateChatRoomNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateChatRoomNotify::clear_user() {
  if (user_ != NULL) user_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_user();
}
inline const ::qihoo::protocol::chatroom::CRUser& UpdateChatRoomNotify::user() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::qihoo::protocol::chatroom::CRUser* UpdateChatRoomNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
  return user_;
}
inline ::qihoo::protocol::chatroom::CRUser* UpdateChatRoomNotify::release_user() {
  clear_has_user();
  ::qihoo::protocol::chatroom::CRUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void UpdateChatRoomNotify::set_allocated_user(::qihoo::protocol::chatroom::CRUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
}

// -------------------------------------------------------------------

// ChatRoomMessageRequest

// optional .qihoo.protocol.chatroom.CRUser sender = 1;
inline bool ChatRoomMessageRequest::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMessageRequest::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMessageRequest::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMessageRequest::clear_sender() {
  if (sender_ != NULL) sender_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_sender();
}
inline const ::qihoo::protocol::chatroom::CRUser& ChatRoomMessageRequest::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoomMessageRequest::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
  return sender_;
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoomMessageRequest::release_sender() {
  clear_has_sender();
  ::qihoo::protocol::chatroom::CRUser* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void ChatRoomMessageRequest::set_allocated_sender(::qihoo::protocol::chatroom::CRUser* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
}

// required bytes roomid = 2;
inline bool ChatRoomMessageRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomMessageRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomMessageRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomMessageRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& ChatRoomMessageRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
  return *roomid_;
}
inline void ChatRoomMessageRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
inline void ChatRoomMessageRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
inline void ChatRoomMessageRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
inline ::std::string* ChatRoomMessageRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
  return roomid_;
}
inline ::std::string* ChatRoomMessageRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMessageRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}

// required int32 msgtype = 3;
inline bool ChatRoomMessageRequest::has_msgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomMessageRequest::set_has_msgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomMessageRequest::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomMessageRequest::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::google::protobuf::int32 ChatRoomMessageRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgtype)
  return msgtype_;
}
inline void ChatRoomMessageRequest::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgtype)
}

// optional bytes msgcontent = 4;
inline bool ChatRoomMessageRequest::has_msgcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomMessageRequest::set_has_msgcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomMessageRequest::clear_has_msgcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomMessageRequest::clear_msgcontent() {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_->clear();
  }
  clear_has_msgcontent();
}
inline const ::std::string& ChatRoomMessageRequest::msgcontent() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
  return *msgcontent_;
}
inline void ChatRoomMessageRequest::set_msgcontent(const ::std::string& value) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
inline void ChatRoomMessageRequest::set_msgcontent(const char* value) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
inline void ChatRoomMessageRequest::set_msgcontent(const void* value, size_t size) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
inline ::std::string* ChatRoomMessageRequest::mutable_msgcontent() {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
  return msgcontent_;
}
inline ::std::string* ChatRoomMessageRequest::release_msgcontent() {
  clear_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msgcontent_;
    msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMessageRequest::set_allocated_msgcontent(::std::string* msgcontent) {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcontent_;
  }
  if (msgcontent) {
    set_has_msgcontent();
    msgcontent_ = msgcontent;
  } else {
    clear_has_msgcontent();
    msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}

// optional bytes clientparameter = 5;
inline bool ChatRoomMessageRequest::has_clientparameter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomMessageRequest::set_has_clientparameter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomMessageRequest::clear_has_clientparameter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomMessageRequest::clear_clientparameter() {
  if (clientparameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientparameter_->clear();
  }
  clear_has_clientparameter();
}
inline const ::std::string& ChatRoomMessageRequest::clientparameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
  return *clientparameter_;
}
inline void ChatRoomMessageRequest::set_clientparameter(const ::std::string& value) {
  set_has_clientparameter();
  if (clientparameter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientparameter_ = new ::std::string;
  }
  clientparameter_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
inline void ChatRoomMessageRequest::set_clientparameter(const char* value) {
  set_has_clientparameter();
  if (clientparameter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientparameter_ = new ::std::string;
  }
  clientparameter_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
inline void ChatRoomMessageRequest::set_clientparameter(const void* value, size_t size) {
  set_has_clientparameter();
  if (clientparameter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientparameter_ = new ::std::string;
  }
  clientparameter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
inline ::std::string* ChatRoomMessageRequest::mutable_clientparameter() {
  set_has_clientparameter();
  if (clientparameter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientparameter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
  return clientparameter_;
}
inline ::std::string* ChatRoomMessageRequest::release_clientparameter() {
  clear_has_clientparameter();
  if (clientparameter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clientparameter_;
    clientparameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMessageRequest::set_allocated_clientparameter(::std::string* clientparameter) {
  if (clientparameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientparameter_;
  }
  if (clientparameter) {
    set_has_clientparameter();
    clientparameter_ = clientparameter;
  } else {
    clear_has_clientparameter();
    clientparameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}

// optional bytes clientcache = 6;
inline bool ChatRoomMessageRequest::has_clientcache() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomMessageRequest::set_has_clientcache() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomMessageRequest::clear_has_clientcache() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomMessageRequest::clear_clientcache() {
  if (clientcache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientcache_->clear();
  }
  clear_has_clientcache();
}
inline const ::std::string& ChatRoomMessageRequest::clientcache() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
  return *clientcache_;
}
inline void ChatRoomMessageRequest::set_clientcache(const ::std::string& value) {
  set_has_clientcache();
  if (clientcache_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientcache_ = new ::std::string;
  }
  clientcache_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
inline void ChatRoomMessageRequest::set_clientcache(const char* value) {
  set_has_clientcache();
  if (clientcache_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientcache_ = new ::std::string;
  }
  clientcache_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
inline void ChatRoomMessageRequest::set_clientcache(const void* value, size_t size) {
  set_has_clientcache();
  if (clientcache_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientcache_ = new ::std::string;
  }
  clientcache_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
inline ::std::string* ChatRoomMessageRequest::mutable_clientcache() {
  set_has_clientcache();
  if (clientcache_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientcache_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
  return clientcache_;
}
inline ::std::string* ChatRoomMessageRequest::release_clientcache() {
  clear_has_clientcache();
  if (clientcache_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clientcache_;
    clientcache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMessageRequest::set_allocated_clientcache(::std::string* clientcache) {
  if (clientcache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientcache_;
  }
  if (clientcache) {
    set_has_clientcache();
    clientcache_ = clientcache;
  } else {
    clear_has_clientcache();
    clientcache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}

// optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
inline bool ChatRoomMessageRequest::has_createnotify() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoomMessageRequest::set_has_createnotify() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoomMessageRequest::clear_has_createnotify() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoomMessageRequest::clear_createnotify() {
  if (createnotify_ != NULL) createnotify_->::qihoo::protocol::chatroom::CreateChatRoomNotify::Clear();
  clear_has_createnotify();
}
inline const ::qihoo::protocol::chatroom::CreateChatRoomNotify& ChatRoomMessageRequest::createnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
  return createnotify_ != NULL ? *createnotify_ : *default_instance_->createnotify_;
}
inline ::qihoo::protocol::chatroom::CreateChatRoomNotify* ChatRoomMessageRequest::mutable_createnotify() {
  set_has_createnotify();
  if (createnotify_ == NULL) createnotify_ = new ::qihoo::protocol::chatroom::CreateChatRoomNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
  return createnotify_;
}
inline ::qihoo::protocol::chatroom::CreateChatRoomNotify* ChatRoomMessageRequest::release_createnotify() {
  clear_has_createnotify();
  ::qihoo::protocol::chatroom::CreateChatRoomNotify* temp = createnotify_;
  createnotify_ = NULL;
  return temp;
}
inline void ChatRoomMessageRequest::set_allocated_createnotify(::qihoo::protocol::chatroom::CreateChatRoomNotify* createnotify) {
  delete createnotify_;
  createnotify_ = createnotify;
  if (createnotify) {
    set_has_createnotify();
  } else {
    clear_has_createnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
}

// optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
inline bool ChatRoomMessageRequest::has_joinnotify() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRoomMessageRequest::set_has_joinnotify() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRoomMessageRequest::clear_has_joinnotify() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRoomMessageRequest::clear_joinnotify() {
  if (joinnotify_ != NULL) joinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
  clear_has_joinnotify();
}
inline const ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify& ChatRoomMessageRequest::joinnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
  return joinnotify_ != NULL ? *joinnotify_ : *default_instance_->joinnotify_;
}
inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomMessageRequest::mutable_joinnotify() {
  set_has_joinnotify();
  if (joinnotify_ == NULL) joinnotify_ = new ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
  return joinnotify_;
}
inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomMessageRequest::release_joinnotify() {
  clear_has_joinnotify();
  ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* temp = joinnotify_;
  joinnotify_ = NULL;
  return temp;
}
inline void ChatRoomMessageRequest::set_allocated_joinnotify(::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* joinnotify) {
  delete joinnotify_;
  joinnotify_ = joinnotify;
  if (joinnotify) {
    set_has_joinnotify();
  } else {
    clear_has_joinnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
}

// optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
inline bool ChatRoomMessageRequest::has_quitnotify() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRoomMessageRequest::set_has_quitnotify() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRoomMessageRequest::clear_has_quitnotify() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRoomMessageRequest::clear_quitnotify() {
  if (quitnotify_ != NULL) quitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
  clear_has_quitnotify();
}
inline const ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify& ChatRoomMessageRequest::quitnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
  return quitnotify_ != NULL ? *quitnotify_ : *default_instance_->quitnotify_;
}
inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomMessageRequest::mutable_quitnotify() {
  set_has_quitnotify();
  if (quitnotify_ == NULL) quitnotify_ = new ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
  return quitnotify_;
}
inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomMessageRequest::release_quitnotify() {
  clear_has_quitnotify();
  ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* temp = quitnotify_;
  quitnotify_ = NULL;
  return temp;
}
inline void ChatRoomMessageRequest::set_allocated_quitnotify(::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* quitnotify) {
  delete quitnotify_;
  quitnotify_ = quitnotify;
  if (quitnotify) {
    set_has_quitnotify();
  } else {
    clear_has_quitnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
}

// optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
inline bool ChatRoomMessageRequest::has_kicknotify() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatRoomMessageRequest::set_has_kicknotify() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatRoomMessageRequest::clear_has_kicknotify() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatRoomMessageRequest::clear_kicknotify() {
  if (kicknotify_ != NULL) kicknotify_->::qihoo::protocol::chatroom::KickMemberNotify::Clear();
  clear_has_kicknotify();
}
inline const ::qihoo::protocol::chatroom::KickMemberNotify& ChatRoomMessageRequest::kicknotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
  return kicknotify_ != NULL ? *kicknotify_ : *default_instance_->kicknotify_;
}
inline ::qihoo::protocol::chatroom::KickMemberNotify* ChatRoomMessageRequest::mutable_kicknotify() {
  set_has_kicknotify();
  if (kicknotify_ == NULL) kicknotify_ = new ::qihoo::protocol::chatroom::KickMemberNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
  return kicknotify_;
}
inline ::qihoo::protocol::chatroom::KickMemberNotify* ChatRoomMessageRequest::release_kicknotify() {
  clear_has_kicknotify();
  ::qihoo::protocol::chatroom::KickMemberNotify* temp = kicknotify_;
  kicknotify_ = NULL;
  return temp;
}
inline void ChatRoomMessageRequest::set_allocated_kicknotify(::qihoo::protocol::chatroom::KickMemberNotify* kicknotify) {
  delete kicknotify_;
  kicknotify_ = kicknotify;
  if (kicknotify) {
    set_has_kicknotify();
  } else {
    clear_has_kicknotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
}

// optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
inline bool ChatRoomMessageRequest::has_updatenotify() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRoomMessageRequest::set_has_updatenotify() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRoomMessageRequest::clear_has_updatenotify() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRoomMessageRequest::clear_updatenotify() {
  if (updatenotify_ != NULL) updatenotify_->::qihoo::protocol::chatroom::UpdateChatRoomNotify::Clear();
  clear_has_updatenotify();
}
inline const ::qihoo::protocol::chatroom::UpdateChatRoomNotify& ChatRoomMessageRequest::updatenotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
  return updatenotify_ != NULL ? *updatenotify_ : *default_instance_->updatenotify_;
}
inline ::qihoo::protocol::chatroom::UpdateChatRoomNotify* ChatRoomMessageRequest::mutable_updatenotify() {
  set_has_updatenotify();
  if (updatenotify_ == NULL) updatenotify_ = new ::qihoo::protocol::chatroom::UpdateChatRoomNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
  return updatenotify_;
}
inline ::qihoo::protocol::chatroom::UpdateChatRoomNotify* ChatRoomMessageRequest::release_updatenotify() {
  clear_has_updatenotify();
  ::qihoo::protocol::chatroom::UpdateChatRoomNotify* temp = updatenotify_;
  updatenotify_ = NULL;
  return temp;
}
inline void ChatRoomMessageRequest::set_allocated_updatenotify(::qihoo::protocol::chatroom::UpdateChatRoomNotify* updatenotify) {
  delete updatenotify_;
  updatenotify_ = updatenotify;
  if (updatenotify) {
    set_has_updatenotify();
  } else {
    clear_has_updatenotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
}

// repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
inline int ChatRoomMessageRequest::propertylist_size() const {
  return propertylist_.size();
}
inline void ChatRoomMessageRequest::clear_propertylist() {
  propertylist_.Clear();
}
inline const ::qihoo::protocol::chatroom::CRPair& ChatRoomMessageRequest::propertylist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_.Get(index);
}
inline ::qihoo::protocol::chatroom::CRPair* ChatRoomMessageRequest::mutable_propertylist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::CRPair* ChatRoomMessageRequest::add_propertylist() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
ChatRoomMessageRequest::propertylist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
ChatRoomMessageRequest::mutable_propertylist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return &propertylist_;
}

// -------------------------------------------------------------------

// ChatRoomMessageResponse

// optional uint64 msgid = 1;
inline bool ChatRoomMessageResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMessageResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMessageResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMessageResponse::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::uint64 ChatRoomMessageResponse::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageResponse.msgid)
  return msgid_;
}
inline void ChatRoomMessageResponse::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageResponse.msgid)
}

// -------------------------------------------------------------------

// ChatRoomNewMsg

// required bytes roomid = 1;
inline bool ChatRoomNewMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomNewMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomNewMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomNewMsg::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& ChatRoomNewMsg::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
  return *roomid_;
}
inline void ChatRoomNewMsg::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
inline void ChatRoomNewMsg::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
inline void ChatRoomNewMsg::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
inline ::std::string* ChatRoomNewMsg::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
  return roomid_;
}
inline ::std::string* ChatRoomNewMsg::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomNewMsg::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}

// optional .qihoo.protocol.chatroom.CRUser sender = 2;
inline bool ChatRoomNewMsg::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomNewMsg::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomNewMsg::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomNewMsg::clear_sender() {
  if (sender_ != NULL) sender_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_sender();
}
inline const ::qihoo::protocol::chatroom::CRUser& ChatRoomNewMsg::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoomNewMsg::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::qihoo::protocol::chatroom::CRUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
  return sender_;
}
inline ::qihoo::protocol::chatroom::CRUser* ChatRoomNewMsg::release_sender() {
  clear_has_sender();
  ::qihoo::protocol::chatroom::CRUser* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void ChatRoomNewMsg::set_allocated_sender(::qihoo::protocol::chatroom::CRUser* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
}

// optional int32 msgtype = 3;
inline bool ChatRoomNewMsg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomNewMsg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomNewMsg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomNewMsg::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::google::protobuf::int32 ChatRoomNewMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.msgtype)
  return msgtype_;
}
inline void ChatRoomNewMsg::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.msgtype)
}

// optional bytes msgcontent = 4;
inline bool ChatRoomNewMsg::has_msgcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomNewMsg::set_has_msgcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomNewMsg::clear_has_msgcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomNewMsg::clear_msgcontent() {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_->clear();
  }
  clear_has_msgcontent();
}
inline const ::std::string& ChatRoomNewMsg::msgcontent() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
  return *msgcontent_;
}
inline void ChatRoomNewMsg::set_msgcontent(const ::std::string& value) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
inline void ChatRoomNewMsg::set_msgcontent(const char* value) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
inline void ChatRoomNewMsg::set_msgcontent(const void* value, size_t size) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
inline ::std::string* ChatRoomNewMsg::mutable_msgcontent() {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
  return msgcontent_;
}
inline ::std::string* ChatRoomNewMsg::release_msgcontent() {
  clear_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msgcontent_;
    msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomNewMsg::set_allocated_msgcontent(::std::string* msgcontent) {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcontent_;
  }
  if (msgcontent) {
    set_has_msgcontent();
    msgcontent_ = msgcontent;
  } else {
    clear_has_msgcontent();
    msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}

// optional int32 regmemcount = 5;
inline bool ChatRoomNewMsg::has_regmemcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomNewMsg::set_has_regmemcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomNewMsg::clear_has_regmemcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomNewMsg::clear_regmemcount() {
  regmemcount_ = 0;
  clear_has_regmemcount();
}
inline ::google::protobuf::int32 ChatRoomNewMsg::regmemcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.regmemcount)
  return regmemcount_;
}
inline void ChatRoomNewMsg::set_regmemcount(::google::protobuf::int32 value) {
  set_has_regmemcount();
  regmemcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.regmemcount)
}

// optional int32 memcount = 6;
inline bool ChatRoomNewMsg::has_memcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomNewMsg::set_has_memcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomNewMsg::clear_has_memcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomNewMsg::clear_memcount() {
  memcount_ = 0;
  clear_has_memcount();
}
inline ::google::protobuf::int32 ChatRoomNewMsg::memcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.memcount)
  return memcount_;
}
inline void ChatRoomNewMsg::set_memcount(::google::protobuf::int32 value) {
  set_has_memcount();
  memcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.memcount)
}

// optional uint32 msgid = 7;
inline bool ChatRoomNewMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoomNewMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoomNewMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoomNewMsg::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 ChatRoomNewMsg::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.msgid)
  return msgid_;
}
inline void ChatRoomNewMsg::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.msgid)
}

// optional uint32 maxid = 8;
inline bool ChatRoomNewMsg::has_maxid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRoomNewMsg::set_has_maxid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRoomNewMsg::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRoomNewMsg::clear_maxid() {
  maxid_ = 0u;
  clear_has_maxid();
}
inline ::google::protobuf::uint32 ChatRoomNewMsg::maxid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.maxid)
  return maxid_;
}
inline void ChatRoomNewMsg::set_maxid(::google::protobuf::uint32 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.maxid)
}

// optional uint64 timestamp = 9;
inline bool ChatRoomNewMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRoomNewMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRoomNewMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRoomNewMsg::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ChatRoomNewMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.timestamp)
  return timestamp_;
}
inline void ChatRoomNewMsg::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.timestamp)
}

// -------------------------------------------------------------------

// ChatRoomErrorMsg

// required bytes roomid = 1;
inline bool ChatRoomErrorMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomErrorMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomErrorMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomErrorMsg::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& ChatRoomErrorMsg::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
  return *roomid_;
}
inline void ChatRoomErrorMsg::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
inline void ChatRoomErrorMsg::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
inline void ChatRoomErrorMsg::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
inline ::std::string* ChatRoomErrorMsg::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
  return roomid_;
}
inline ::std::string* ChatRoomErrorMsg::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomErrorMsg::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}

// required uint64 clientsn = 2;
inline bool ChatRoomErrorMsg::has_clientsn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomErrorMsg::set_has_clientsn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomErrorMsg::clear_has_clientsn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomErrorMsg::clear_clientsn() {
  clientsn_ = GOOGLE_ULONGLONG(0);
  clear_has_clientsn();
}
inline ::google::protobuf::uint64 ChatRoomErrorMsg::clientsn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomErrorMsg.clientsn)
  return clientsn_;
}
inline void ChatRoomErrorMsg::set_clientsn(::google::protobuf::uint64 value) {
  set_has_clientsn();
  clientsn_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomErrorMsg.clientsn)
}

// optional int32 errorcode = 3;
inline bool ChatRoomErrorMsg::has_errorcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomErrorMsg::set_has_errorcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomErrorMsg::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomErrorMsg::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 ChatRoomErrorMsg::errorcode() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomErrorMsg.errorcode)
  return errorcode_;
}
inline void ChatRoomErrorMsg::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomErrorMsg.errorcode)
}

// -------------------------------------------------------------------

// ChatRoomMNotify

// required int32 type = 1;
inline bool ChatRoomMNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChatRoomMNotify::type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.type)
  return type_;
}
inline void ChatRoomMNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.type)
}

// required bytes data = 2;
inline bool ChatRoomMNotify::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomMNotify::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomMNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomMNotify::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ChatRoomMNotify::data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.data)
  return *data_;
}
inline void ChatRoomMNotify::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
inline void ChatRoomMNotify::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
inline void ChatRoomMNotify::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
inline ::std::string* ChatRoomMNotify::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMNotify.data)
  return data_;
}
inline ::std::string* ChatRoomMNotify::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMNotify::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}

// optional int32 regmemcount = 3;
inline bool ChatRoomMNotify::has_regmemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomMNotify::set_has_regmemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomMNotify::clear_has_regmemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomMNotify::clear_regmemcount() {
  regmemcount_ = 0;
  clear_has_regmemcount();
}
inline ::google::protobuf::int32 ChatRoomMNotify::regmemcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.regmemcount)
  return regmemcount_;
}
inline void ChatRoomMNotify::set_regmemcount(::google::protobuf::int32 value) {
  set_has_regmemcount();
  regmemcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.regmemcount)
}

// optional int32 memcount = 4;
inline bool ChatRoomMNotify::has_memcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomMNotify::set_has_memcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomMNotify::clear_has_memcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomMNotify::clear_memcount() {
  memcount_ = 0;
  clear_has_memcount();
}
inline ::google::protobuf::int32 ChatRoomMNotify::memcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.memcount)
  return memcount_;
}
inline void ChatRoomMNotify::set_memcount(::google::protobuf::int32 value) {
  set_has_memcount();
  memcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.memcount)
}

// -------------------------------------------------------------------

// SubscribeRequest

// required bytes roomid = 1;
inline bool SubscribeRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeRequest::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& SubscribeRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeRequest.roomid)
  return *roomid_;
}
inline void SubscribeRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
inline void SubscribeRequest::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
inline void SubscribeRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
inline ::std::string* SubscribeRequest::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.SubscribeRequest.roomid)
  return roomid_;
}
inline ::std::string* SubscribeRequest::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscribeRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}

// optional bool sub = 2 [default = false];
inline bool SubscribeRequest::has_sub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeRequest::set_has_sub() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeRequest::clear_has_sub() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeRequest::clear_sub() {
  sub_ = false;
  clear_has_sub();
}
inline bool SubscribeRequest::sub() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeRequest.sub)
  return sub_;
}
inline void SubscribeRequest::set_sub(bool value) {
  set_has_sub();
  sub_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeRequest.sub)
}

// -------------------------------------------------------------------

// SubscribeResponse

// required bytes roomid = 1;
inline bool SubscribeResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeResponse::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& SubscribeResponse::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeResponse.roomid)
  return *roomid_;
}
inline void SubscribeResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
inline void SubscribeResponse::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
inline void SubscribeResponse::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
inline ::std::string* SubscribeResponse::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.SubscribeResponse.roomid)
  return roomid_;
}
inline ::std::string* SubscribeResponse::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscribeResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}

// optional bool sub = 2;
inline bool SubscribeResponse::has_sub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeResponse::set_has_sub() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeResponse::clear_has_sub() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeResponse::clear_sub() {
  sub_ = false;
  clear_has_sub();
}
inline bool SubscribeResponse::sub() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeResponse.sub)
  return sub_;
}
inline void SubscribeResponse::set_sub(bool value) {
  set_has_sub();
  sub_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeResponse.sub)
}

// -------------------------------------------------------------------

// ChatRoomUpToServer

// required uint32 payloadtype = 1;
inline bool ChatRoomUpToServer::has_payloadtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomUpToServer::set_has_payloadtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomUpToServer::clear_has_payloadtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomUpToServer::clear_payloadtype() {
  payloadtype_ = 0u;
  clear_has_payloadtype();
}
inline ::google::protobuf::uint32 ChatRoomUpToServer::payloadtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.payloadtype)
  return payloadtype_;
}
inline void ChatRoomUpToServer::set_payloadtype(::google::protobuf::uint32 value) {
  set_has_payloadtype();
  payloadtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomUpToServer.payloadtype)
}

// optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
inline bool ChatRoomUpToServer::has_createchatroomreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomUpToServer::set_has_createchatroomreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomUpToServer::clear_has_createchatroomreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomUpToServer::clear_createchatroomreq() {
  if (createchatroomreq_ != NULL) createchatroomreq_->::qihoo::protocol::chatroom::CreateChatRoomRequest::Clear();
  clear_has_createchatroomreq();
}
inline const ::qihoo::protocol::chatroom::CreateChatRoomRequest& ChatRoomUpToServer::createchatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
  return createchatroomreq_ != NULL ? *createchatroomreq_ : *default_instance_->createchatroomreq_;
}
inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* ChatRoomUpToServer::mutable_createchatroomreq() {
  set_has_createchatroomreq();
  if (createchatroomreq_ == NULL) createchatroomreq_ = new ::qihoo::protocol::chatroom::CreateChatRoomRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
  return createchatroomreq_;
}
inline ::qihoo::protocol::chatroom::CreateChatRoomRequest* ChatRoomUpToServer::release_createchatroomreq() {
  clear_has_createchatroomreq();
  ::qihoo::protocol::chatroom::CreateChatRoomRequest* temp = createchatroomreq_;
  createchatroomreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_createchatroomreq(::qihoo::protocol::chatroom::CreateChatRoomRequest* createchatroomreq) {
  delete createchatroomreq_;
  createchatroomreq_ = createchatroomreq;
  if (createchatroomreq) {
    set_has_createchatroomreq();
  } else {
    clear_has_createchatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
}

// optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
inline bool ChatRoomUpToServer::has_getchatroominforeq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomUpToServer::set_has_getchatroominforeq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomUpToServer::clear_has_getchatroominforeq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomUpToServer::clear_getchatroominforeq() {
  if (getchatroominforeq_ != NULL) getchatroominforeq_->::qihoo::protocol::chatroom::GetChatRoomDetailRequest::Clear();
  clear_has_getchatroominforeq();
}
inline const ::qihoo::protocol::chatroom::GetChatRoomDetailRequest& ChatRoomUpToServer::getchatroominforeq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
  return getchatroominforeq_ != NULL ? *getchatroominforeq_ : *default_instance_->getchatroominforeq_;
}
inline ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* ChatRoomUpToServer::mutable_getchatroominforeq() {
  set_has_getchatroominforeq();
  if (getchatroominforeq_ == NULL) getchatroominforeq_ = new ::qihoo::protocol::chatroom::GetChatRoomDetailRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
  return getchatroominforeq_;
}
inline ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* ChatRoomUpToServer::release_getchatroominforeq() {
  clear_has_getchatroominforeq();
  ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* temp = getchatroominforeq_;
  getchatroominforeq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_getchatroominforeq(::qihoo::protocol::chatroom::GetChatRoomDetailRequest* getchatroominforeq) {
  delete getchatroominforeq_;
  getchatroominforeq_ = getchatroominforeq;
  if (getchatroominforeq) {
    set_has_getchatroominforeq();
  } else {
    clear_has_getchatroominforeq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
}

// optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
inline bool ChatRoomUpToServer::has_applyjoinchatroomreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomUpToServer::set_has_applyjoinchatroomreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomUpToServer::clear_has_applyjoinchatroomreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomUpToServer::clear_applyjoinchatroomreq() {
  if (applyjoinchatroomreq_ != NULL) applyjoinchatroomreq_->::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::Clear();
  clear_has_applyjoinchatroomreq();
}
inline const ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest& ChatRoomUpToServer::applyjoinchatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
  return applyjoinchatroomreq_ != NULL ? *applyjoinchatroomreq_ : *default_instance_->applyjoinchatroomreq_;
}
inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* ChatRoomUpToServer::mutable_applyjoinchatroomreq() {
  set_has_applyjoinchatroomreq();
  if (applyjoinchatroomreq_ == NULL) applyjoinchatroomreq_ = new ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
  return applyjoinchatroomreq_;
}
inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* ChatRoomUpToServer::release_applyjoinchatroomreq() {
  clear_has_applyjoinchatroomreq();
  ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* temp = applyjoinchatroomreq_;
  applyjoinchatroomreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_applyjoinchatroomreq(::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* applyjoinchatroomreq) {
  delete applyjoinchatroomreq_;
  applyjoinchatroomreq_ = applyjoinchatroomreq;
  if (applyjoinchatroomreq) {
    set_has_applyjoinchatroomreq();
  } else {
    clear_has_applyjoinchatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
}

// optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
inline bool ChatRoomUpToServer::has_quitchatroomreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomUpToServer::set_has_quitchatroomreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomUpToServer::clear_has_quitchatroomreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomUpToServer::clear_quitchatroomreq() {
  if (quitchatroomreq_ != NULL) quitchatroomreq_->::qihoo::protocol::chatroom::QuitChatRoomRequest::Clear();
  clear_has_quitchatroomreq();
}
inline const ::qihoo::protocol::chatroom::QuitChatRoomRequest& ChatRoomUpToServer::quitchatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
  return quitchatroomreq_ != NULL ? *quitchatroomreq_ : *default_instance_->quitchatroomreq_;
}
inline ::qihoo::protocol::chatroom::QuitChatRoomRequest* ChatRoomUpToServer::mutable_quitchatroomreq() {
  set_has_quitchatroomreq();
  if (quitchatroomreq_ == NULL) quitchatroomreq_ = new ::qihoo::protocol::chatroom::QuitChatRoomRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
  return quitchatroomreq_;
}
inline ::qihoo::protocol::chatroom::QuitChatRoomRequest* ChatRoomUpToServer::release_quitchatroomreq() {
  clear_has_quitchatroomreq();
  ::qihoo::protocol::chatroom::QuitChatRoomRequest* temp = quitchatroomreq_;
  quitchatroomreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_quitchatroomreq(::qihoo::protocol::chatroom::QuitChatRoomRequest* quitchatroomreq) {
  delete quitchatroomreq_;
  quitchatroomreq_ = quitchatroomreq;
  if (quitchatroomreq) {
    set_has_quitchatroomreq();
  } else {
    clear_has_quitchatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
}

// optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
inline bool ChatRoomUpToServer::has_updatechatroomreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomUpToServer::set_has_updatechatroomreq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomUpToServer::clear_has_updatechatroomreq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomUpToServer::clear_updatechatroomreq() {
  if (updatechatroomreq_ != NULL) updatechatroomreq_->::qihoo::protocol::chatroom::UpdateChatRoomRequest::Clear();
  clear_has_updatechatroomreq();
}
inline const ::qihoo::protocol::chatroom::UpdateChatRoomRequest& ChatRoomUpToServer::updatechatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
  return updatechatroomreq_ != NULL ? *updatechatroomreq_ : *default_instance_->updatechatroomreq_;
}
inline ::qihoo::protocol::chatroom::UpdateChatRoomRequest* ChatRoomUpToServer::mutable_updatechatroomreq() {
  set_has_updatechatroomreq();
  if (updatechatroomreq_ == NULL) updatechatroomreq_ = new ::qihoo::protocol::chatroom::UpdateChatRoomRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
  return updatechatroomreq_;
}
inline ::qihoo::protocol::chatroom::UpdateChatRoomRequest* ChatRoomUpToServer::release_updatechatroomreq() {
  clear_has_updatechatroomreq();
  ::qihoo::protocol::chatroom::UpdateChatRoomRequest* temp = updatechatroomreq_;
  updatechatroomreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_updatechatroomreq(::qihoo::protocol::chatroom::UpdateChatRoomRequest* updatechatroomreq) {
  delete updatechatroomreq_;
  updatechatroomreq_ = updatechatroomreq;
  if (updatechatroomreq) {
    set_has_updatechatroomreq();
  } else {
    clear_has_updatechatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
}

// optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
inline bool ChatRoomUpToServer::has_kickmemberreq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoomUpToServer::set_has_kickmemberreq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoomUpToServer::clear_has_kickmemberreq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoomUpToServer::clear_kickmemberreq() {
  if (kickmemberreq_ != NULL) kickmemberreq_->::qihoo::protocol::chatroom::KickChatRoomMemberRequest::Clear();
  clear_has_kickmemberreq();
}
inline const ::qihoo::protocol::chatroom::KickChatRoomMemberRequest& ChatRoomUpToServer::kickmemberreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
  return kickmemberreq_ != NULL ? *kickmemberreq_ : *default_instance_->kickmemberreq_;
}
inline ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* ChatRoomUpToServer::mutable_kickmemberreq() {
  set_has_kickmemberreq();
  if (kickmemberreq_ == NULL) kickmemberreq_ = new ::qihoo::protocol::chatroom::KickChatRoomMemberRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
  return kickmemberreq_;
}
inline ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* ChatRoomUpToServer::release_kickmemberreq() {
  clear_has_kickmemberreq();
  ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* temp = kickmemberreq_;
  kickmemberreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_kickmemberreq(::qihoo::protocol::chatroom::KickChatRoomMemberRequest* kickmemberreq) {
  delete kickmemberreq_;
  kickmemberreq_ = kickmemberreq;
  if (kickmemberreq) {
    set_has_kickmemberreq();
  } else {
    clear_has_kickmemberreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
}

// optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
inline bool ChatRoomUpToServer::has_querychatroomidreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRoomUpToServer::set_has_querychatroomidreq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRoomUpToServer::clear_has_querychatroomidreq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRoomUpToServer::clear_querychatroomidreq() {
  if (querychatroomidreq_ != NULL) querychatroomidreq_->::qihoo::protocol::chatroom::QueryChatRoomIDRequest::Clear();
  clear_has_querychatroomidreq();
}
inline const ::qihoo::protocol::chatroom::QueryChatRoomIDRequest& ChatRoomUpToServer::querychatroomidreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
  return querychatroomidreq_ != NULL ? *querychatroomidreq_ : *default_instance_->querychatroomidreq_;
}
inline ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* ChatRoomUpToServer::mutable_querychatroomidreq() {
  set_has_querychatroomidreq();
  if (querychatroomidreq_ == NULL) querychatroomidreq_ = new ::qihoo::protocol::chatroom::QueryChatRoomIDRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
  return querychatroomidreq_;
}
inline ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* ChatRoomUpToServer::release_querychatroomidreq() {
  clear_has_querychatroomidreq();
  ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* temp = querychatroomidreq_;
  querychatroomidreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_querychatroomidreq(::qihoo::protocol::chatroom::QueryChatRoomIDRequest* querychatroomidreq) {
  delete querychatroomidreq_;
  querychatroomidreq_ = querychatroomidreq;
  if (querychatroomidreq) {
    set_has_querychatroomidreq();
  } else {
    clear_has_querychatroomidreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
}

// optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
inline bool ChatRoomUpToServer::has_updategameidreq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRoomUpToServer::set_has_updategameidreq() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRoomUpToServer::clear_has_updategameidreq() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRoomUpToServer::clear_updategameidreq() {
  if (updategameidreq_ != NULL) updategameidreq_->::qihoo::protocol::chatroom::UpdateRoomIDRequest::Clear();
  clear_has_updategameidreq();
}
inline const ::qihoo::protocol::chatroom::UpdateRoomIDRequest& ChatRoomUpToServer::updategameidreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
  return updategameidreq_ != NULL ? *updategameidreq_ : *default_instance_->updategameidreq_;
}
inline ::qihoo::protocol::chatroom::UpdateRoomIDRequest* ChatRoomUpToServer::mutable_updategameidreq() {
  set_has_updategameidreq();
  if (updategameidreq_ == NULL) updategameidreq_ = new ::qihoo::protocol::chatroom::UpdateRoomIDRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
  return updategameidreq_;
}
inline ::qihoo::protocol::chatroom::UpdateRoomIDRequest* ChatRoomUpToServer::release_updategameidreq() {
  clear_has_updategameidreq();
  ::qihoo::protocol::chatroom::UpdateRoomIDRequest* temp = updategameidreq_;
  updategameidreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_updategameidreq(::qihoo::protocol::chatroom::UpdateRoomIDRequest* updategameidreq) {
  delete updategameidreq_;
  updategameidreq_ = updategameidreq;
  if (updategameidreq) {
    set_has_updategameidreq();
  } else {
    clear_has_updategameidreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
}

// optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
inline bool ChatRoomUpToServer::has_queryallgameroomreq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatRoomUpToServer::set_has_queryallgameroomreq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatRoomUpToServer::clear_has_queryallgameroomreq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatRoomUpToServer::clear_queryallgameroomreq() {
  if (queryallgameroomreq_ != NULL) queryallgameroomreq_->::qihoo::protocol::chatroom::QueryAllGameRoomRequest::Clear();
  clear_has_queryallgameroomreq();
}
inline const ::qihoo::protocol::chatroom::QueryAllGameRoomRequest& ChatRoomUpToServer::queryallgameroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
  return queryallgameroomreq_ != NULL ? *queryallgameroomreq_ : *default_instance_->queryallgameroomreq_;
}
inline ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* ChatRoomUpToServer::mutable_queryallgameroomreq() {
  set_has_queryallgameroomreq();
  if (queryallgameroomreq_ == NULL) queryallgameroomreq_ = new ::qihoo::protocol::chatroom::QueryAllGameRoomRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
  return queryallgameroomreq_;
}
inline ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* ChatRoomUpToServer::release_queryallgameroomreq() {
  clear_has_queryallgameroomreq();
  ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* temp = queryallgameroomreq_;
  queryallgameroomreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_queryallgameroomreq(::qihoo::protocol::chatroom::QueryAllGameRoomRequest* queryallgameroomreq) {
  delete queryallgameroomreq_;
  queryallgameroomreq_ = queryallgameroomreq;
  if (queryallgameroomreq) {
    set_has_queryallgameroomreq();
  } else {
    clear_has_queryallgameroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
}

// optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
inline bool ChatRoomUpToServer::has_chatroommessagereq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRoomUpToServer::set_has_chatroommessagereq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRoomUpToServer::clear_has_chatroommessagereq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRoomUpToServer::clear_chatroommessagereq() {
  if (chatroommessagereq_ != NULL) chatroommessagereq_->::qihoo::protocol::chatroom::ChatRoomMessageRequest::Clear();
  clear_has_chatroommessagereq();
}
inline const ::qihoo::protocol::chatroom::ChatRoomMessageRequest& ChatRoomUpToServer::chatroommessagereq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
  return chatroommessagereq_ != NULL ? *chatroommessagereq_ : *default_instance_->chatroommessagereq_;
}
inline ::qihoo::protocol::chatroom::ChatRoomMessageRequest* ChatRoomUpToServer::mutable_chatroommessagereq() {
  set_has_chatroommessagereq();
  if (chatroommessagereq_ == NULL) chatroommessagereq_ = new ::qihoo::protocol::chatroom::ChatRoomMessageRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
  return chatroommessagereq_;
}
inline ::qihoo::protocol::chatroom::ChatRoomMessageRequest* ChatRoomUpToServer::release_chatroommessagereq() {
  clear_has_chatroommessagereq();
  ::qihoo::protocol::chatroom::ChatRoomMessageRequest* temp = chatroommessagereq_;
  chatroommessagereq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_chatroommessagereq(::qihoo::protocol::chatroom::ChatRoomMessageRequest* chatroommessagereq) {
  delete chatroommessagereq_;
  chatroommessagereq_ = chatroommessagereq;
  if (chatroommessagereq) {
    set_has_chatroommessagereq();
  } else {
    clear_has_chatroommessagereq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
}

// optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
inline bool ChatRoomUpToServer::has_createrooms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatRoomUpToServer::set_has_createrooms() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatRoomUpToServer::clear_has_createrooms() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatRoomUpToServer::clear_createrooms() {
  if (createrooms_ != NULL) createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::Clear();
  clear_has_createrooms();
}
inline const ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest& ChatRoomUpToServer::createrooms() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
  return createrooms_ != NULL ? *createrooms_ : *default_instance_->createrooms_;
}
inline ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* ChatRoomUpToServer::mutable_createrooms() {
  set_has_createrooms();
  if (createrooms_ == NULL) createrooms_ = new ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
  return createrooms_;
}
inline ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* ChatRoomUpToServer::release_createrooms() {
  clear_has_createrooms();
  ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* temp = createrooms_;
  createrooms_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_createrooms(::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* createrooms) {
  delete createrooms_;
  createrooms_ = createrooms;
  if (createrooms) {
    set_has_createrooms();
  } else {
    clear_has_createrooms();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
}

// optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
inline bool ChatRoomUpToServer::has_syncroomtodba() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatRoomUpToServer::set_has_syncroomtodba() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatRoomUpToServer::clear_has_syncroomtodba() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatRoomUpToServer::clear_syncroomtodba() {
  if (syncroomtodba_ != NULL) syncroomtodba_->::qihoo::protocol::chatroom::SyncRoomToDBRequest::Clear();
  clear_has_syncroomtodba();
}
inline const ::qihoo::protocol::chatroom::SyncRoomToDBRequest& ChatRoomUpToServer::syncroomtodba() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
  return syncroomtodba_ != NULL ? *syncroomtodba_ : *default_instance_->syncroomtodba_;
}
inline ::qihoo::protocol::chatroom::SyncRoomToDBRequest* ChatRoomUpToServer::mutable_syncroomtodba() {
  set_has_syncroomtodba();
  if (syncroomtodba_ == NULL) syncroomtodba_ = new ::qihoo::protocol::chatroom::SyncRoomToDBRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
  return syncroomtodba_;
}
inline ::qihoo::protocol::chatroom::SyncRoomToDBRequest* ChatRoomUpToServer::release_syncroomtodba() {
  clear_has_syncroomtodba();
  ::qihoo::protocol::chatroom::SyncRoomToDBRequest* temp = syncroomtodba_;
  syncroomtodba_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_syncroomtodba(::qihoo::protocol::chatroom::SyncRoomToDBRequest* syncroomtodba) {
  delete syncroomtodba_;
  syncroomtodba_ = syncroomtodba;
  if (syncroomtodba) {
    set_has_syncroomtodba();
  } else {
    clear_has_syncroomtodba();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
}

// optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
inline bool ChatRoomUpToServer::has_subreq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChatRoomUpToServer::set_has_subreq() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChatRoomUpToServer::clear_has_subreq() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChatRoomUpToServer::clear_subreq() {
  if (subreq_ != NULL) subreq_->::qihoo::protocol::chatroom::SubscribeRequest::Clear();
  clear_has_subreq();
}
inline const ::qihoo::protocol::chatroom::SubscribeRequest& ChatRoomUpToServer::subreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
  return subreq_ != NULL ? *subreq_ : *default_instance_->subreq_;
}
inline ::qihoo::protocol::chatroom::SubscribeRequest* ChatRoomUpToServer::mutable_subreq() {
  set_has_subreq();
  if (subreq_ == NULL) subreq_ = new ::qihoo::protocol::chatroom::SubscribeRequest;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
  return subreq_;
}
inline ::qihoo::protocol::chatroom::SubscribeRequest* ChatRoomUpToServer::release_subreq() {
  clear_has_subreq();
  ::qihoo::protocol::chatroom::SubscribeRequest* temp = subreq_;
  subreq_ = NULL;
  return temp;
}
inline void ChatRoomUpToServer::set_allocated_subreq(::qihoo::protocol::chatroom::SubscribeRequest* subreq) {
  delete subreq_;
  subreq_ = subreq;
  if (subreq) {
    set_has_subreq();
  } else {
    clear_has_subreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
}

// -------------------------------------------------------------------

// ChatRoomDownToUser

// required int32 result = 1;
inline bool ChatRoomDownToUser::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomDownToUser::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomDownToUser::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomDownToUser::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ChatRoomDownToUser::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.result)
  return result_;
}
inline void ChatRoomDownToUser::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomDownToUser.result)
}

// required uint32 payloadtype = 2;
inline bool ChatRoomDownToUser::has_payloadtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomDownToUser::set_has_payloadtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomDownToUser::clear_has_payloadtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomDownToUser::clear_payloadtype() {
  payloadtype_ = 0u;
  clear_has_payloadtype();
}
inline ::google::protobuf::uint32 ChatRoomDownToUser::payloadtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.payloadtype)
  return payloadtype_;
}
inline void ChatRoomDownToUser::set_payloadtype(::google::protobuf::uint32 value) {
  set_has_payloadtype();
  payloadtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomDownToUser.payloadtype)
}

// optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
inline bool ChatRoomDownToUser::has_createchatroomresp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomDownToUser::set_has_createchatroomresp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomDownToUser::clear_has_createchatroomresp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomDownToUser::clear_createchatroomresp() {
  if (createchatroomresp_ != NULL) createchatroomresp_->::qihoo::protocol::chatroom::CreateChatRoomResponse::Clear();
  clear_has_createchatroomresp();
}
inline const ::qihoo::protocol::chatroom::CreateChatRoomResponse& ChatRoomDownToUser::createchatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
  return createchatroomresp_ != NULL ? *createchatroomresp_ : *default_instance_->createchatroomresp_;
}
inline ::qihoo::protocol::chatroom::CreateChatRoomResponse* ChatRoomDownToUser::mutable_createchatroomresp() {
  set_has_createchatroomresp();
  if (createchatroomresp_ == NULL) createchatroomresp_ = new ::qihoo::protocol::chatroom::CreateChatRoomResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
  return createchatroomresp_;
}
inline ::qihoo::protocol::chatroom::CreateChatRoomResponse* ChatRoomDownToUser::release_createchatroomresp() {
  clear_has_createchatroomresp();
  ::qihoo::protocol::chatroom::CreateChatRoomResponse* temp = createchatroomresp_;
  createchatroomresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_createchatroomresp(::qihoo::protocol::chatroom::CreateChatRoomResponse* createchatroomresp) {
  delete createchatroomresp_;
  createchatroomresp_ = createchatroomresp;
  if (createchatroomresp) {
    set_has_createchatroomresp();
  } else {
    clear_has_createchatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
}

// optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
inline bool ChatRoomDownToUser::has_getchatroominforesp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomDownToUser::set_has_getchatroominforesp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomDownToUser::clear_has_getchatroominforesp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomDownToUser::clear_getchatroominforesp() {
  if (getchatroominforesp_ != NULL) getchatroominforesp_->::qihoo::protocol::chatroom::GetChatRoomDetailResponse::Clear();
  clear_has_getchatroominforesp();
}
inline const ::qihoo::protocol::chatroom::GetChatRoomDetailResponse& ChatRoomDownToUser::getchatroominforesp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
  return getchatroominforesp_ != NULL ? *getchatroominforesp_ : *default_instance_->getchatroominforesp_;
}
inline ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* ChatRoomDownToUser::mutable_getchatroominforesp() {
  set_has_getchatroominforesp();
  if (getchatroominforesp_ == NULL) getchatroominforesp_ = new ::qihoo::protocol::chatroom::GetChatRoomDetailResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
  return getchatroominforesp_;
}
inline ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* ChatRoomDownToUser::release_getchatroominforesp() {
  clear_has_getchatroominforesp();
  ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* temp = getchatroominforesp_;
  getchatroominforesp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_getchatroominforesp(::qihoo::protocol::chatroom::GetChatRoomDetailResponse* getchatroominforesp) {
  delete getchatroominforesp_;
  getchatroominforesp_ = getchatroominforesp;
  if (getchatroominforesp) {
    set_has_getchatroominforesp();
  } else {
    clear_has_getchatroominforesp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
}

// optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
inline bool ChatRoomDownToUser::has_applyjoinchatroomresp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomDownToUser::set_has_applyjoinchatroomresp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomDownToUser::clear_has_applyjoinchatroomresp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomDownToUser::clear_applyjoinchatroomresp() {
  if (applyjoinchatroomresp_ != NULL) applyjoinchatroomresp_->::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::Clear();
  clear_has_applyjoinchatroomresp();
}
inline const ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse& ChatRoomDownToUser::applyjoinchatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
  return applyjoinchatroomresp_ != NULL ? *applyjoinchatroomresp_ : *default_instance_->applyjoinchatroomresp_;
}
inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* ChatRoomDownToUser::mutable_applyjoinchatroomresp() {
  set_has_applyjoinchatroomresp();
  if (applyjoinchatroomresp_ == NULL) applyjoinchatroomresp_ = new ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
  return applyjoinchatroomresp_;
}
inline ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* ChatRoomDownToUser::release_applyjoinchatroomresp() {
  clear_has_applyjoinchatroomresp();
  ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* temp = applyjoinchatroomresp_;
  applyjoinchatroomresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_applyjoinchatroomresp(::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* applyjoinchatroomresp) {
  delete applyjoinchatroomresp_;
  applyjoinchatroomresp_ = applyjoinchatroomresp;
  if (applyjoinchatroomresp) {
    set_has_applyjoinchatroomresp();
  } else {
    clear_has_applyjoinchatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
}

// optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
inline bool ChatRoomDownToUser::has_quitchatroomresp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomDownToUser::set_has_quitchatroomresp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomDownToUser::clear_has_quitchatroomresp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomDownToUser::clear_quitchatroomresp() {
  if (quitchatroomresp_ != NULL) quitchatroomresp_->::qihoo::protocol::chatroom::QuitChatRoomResponse::Clear();
  clear_has_quitchatroomresp();
}
inline const ::qihoo::protocol::chatroom::QuitChatRoomResponse& ChatRoomDownToUser::quitchatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
  return quitchatroomresp_ != NULL ? *quitchatroomresp_ : *default_instance_->quitchatroomresp_;
}
inline ::qihoo::protocol::chatroom::QuitChatRoomResponse* ChatRoomDownToUser::mutable_quitchatroomresp() {
  set_has_quitchatroomresp();
  if (quitchatroomresp_ == NULL) quitchatroomresp_ = new ::qihoo::protocol::chatroom::QuitChatRoomResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
  return quitchatroomresp_;
}
inline ::qihoo::protocol::chatroom::QuitChatRoomResponse* ChatRoomDownToUser::release_quitchatroomresp() {
  clear_has_quitchatroomresp();
  ::qihoo::protocol::chatroom::QuitChatRoomResponse* temp = quitchatroomresp_;
  quitchatroomresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_quitchatroomresp(::qihoo::protocol::chatroom::QuitChatRoomResponse* quitchatroomresp) {
  delete quitchatroomresp_;
  quitchatroomresp_ = quitchatroomresp;
  if (quitchatroomresp) {
    set_has_quitchatroomresp();
  } else {
    clear_has_quitchatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
}

// optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
inline bool ChatRoomDownToUser::has_updatechatroomresp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoomDownToUser::set_has_updatechatroomresp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoomDownToUser::clear_has_updatechatroomresp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoomDownToUser::clear_updatechatroomresp() {
  if (updatechatroomresp_ != NULL) updatechatroomresp_->::qihoo::protocol::chatroom::UpdateChatRoomResponse::Clear();
  clear_has_updatechatroomresp();
}
inline const ::qihoo::protocol::chatroom::UpdateChatRoomResponse& ChatRoomDownToUser::updatechatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
  return updatechatroomresp_ != NULL ? *updatechatroomresp_ : *default_instance_->updatechatroomresp_;
}
inline ::qihoo::protocol::chatroom::UpdateChatRoomResponse* ChatRoomDownToUser::mutable_updatechatroomresp() {
  set_has_updatechatroomresp();
  if (updatechatroomresp_ == NULL) updatechatroomresp_ = new ::qihoo::protocol::chatroom::UpdateChatRoomResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
  return updatechatroomresp_;
}
inline ::qihoo::protocol::chatroom::UpdateChatRoomResponse* ChatRoomDownToUser::release_updatechatroomresp() {
  clear_has_updatechatroomresp();
  ::qihoo::protocol::chatroom::UpdateChatRoomResponse* temp = updatechatroomresp_;
  updatechatroomresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_updatechatroomresp(::qihoo::protocol::chatroom::UpdateChatRoomResponse* updatechatroomresp) {
  delete updatechatroomresp_;
  updatechatroomresp_ = updatechatroomresp;
  if (updatechatroomresp) {
    set_has_updatechatroomresp();
  } else {
    clear_has_updatechatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
}

// optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
inline bool ChatRoomDownToUser::has_kickmemberresp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRoomDownToUser::set_has_kickmemberresp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRoomDownToUser::clear_has_kickmemberresp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRoomDownToUser::clear_kickmemberresp() {
  if (kickmemberresp_ != NULL) kickmemberresp_->::qihoo::protocol::chatroom::KickChatRoomMemberResponse::Clear();
  clear_has_kickmemberresp();
}
inline const ::qihoo::protocol::chatroom::KickChatRoomMemberResponse& ChatRoomDownToUser::kickmemberresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
  return kickmemberresp_ != NULL ? *kickmemberresp_ : *default_instance_->kickmemberresp_;
}
inline ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* ChatRoomDownToUser::mutable_kickmemberresp() {
  set_has_kickmemberresp();
  if (kickmemberresp_ == NULL) kickmemberresp_ = new ::qihoo::protocol::chatroom::KickChatRoomMemberResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
  return kickmemberresp_;
}
inline ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* ChatRoomDownToUser::release_kickmemberresp() {
  clear_has_kickmemberresp();
  ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* temp = kickmemberresp_;
  kickmemberresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_kickmemberresp(::qihoo::protocol::chatroom::KickChatRoomMemberResponse* kickmemberresp) {
  delete kickmemberresp_;
  kickmemberresp_ = kickmemberresp;
  if (kickmemberresp) {
    set_has_kickmemberresp();
  } else {
    clear_has_kickmemberresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
}

// optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
inline bool ChatRoomDownToUser::has_querychatroomidresp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRoomDownToUser::set_has_querychatroomidresp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRoomDownToUser::clear_has_querychatroomidresp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRoomDownToUser::clear_querychatroomidresp() {
  if (querychatroomidresp_ != NULL) querychatroomidresp_->::qihoo::protocol::chatroom::QueryChatRoomIDResponse::Clear();
  clear_has_querychatroomidresp();
}
inline const ::qihoo::protocol::chatroom::QueryChatRoomIDResponse& ChatRoomDownToUser::querychatroomidresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
  return querychatroomidresp_ != NULL ? *querychatroomidresp_ : *default_instance_->querychatroomidresp_;
}
inline ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* ChatRoomDownToUser::mutable_querychatroomidresp() {
  set_has_querychatroomidresp();
  if (querychatroomidresp_ == NULL) querychatroomidresp_ = new ::qihoo::protocol::chatroom::QueryChatRoomIDResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
  return querychatroomidresp_;
}
inline ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* ChatRoomDownToUser::release_querychatroomidresp() {
  clear_has_querychatroomidresp();
  ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* temp = querychatroomidresp_;
  querychatroomidresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_querychatroomidresp(::qihoo::protocol::chatroom::QueryChatRoomIDResponse* querychatroomidresp) {
  delete querychatroomidresp_;
  querychatroomidresp_ = querychatroomidresp;
  if (querychatroomidresp) {
    set_has_querychatroomidresp();
  } else {
    clear_has_querychatroomidresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
}

// optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
inline bool ChatRoomDownToUser::has_updategameidresp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatRoomDownToUser::set_has_updategameidresp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatRoomDownToUser::clear_has_updategameidresp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatRoomDownToUser::clear_updategameidresp() {
  if (updategameidresp_ != NULL) updategameidresp_->::qihoo::protocol::chatroom::UpdateRoomIDResponse::Clear();
  clear_has_updategameidresp();
}
inline const ::qihoo::protocol::chatroom::UpdateRoomIDResponse& ChatRoomDownToUser::updategameidresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
  return updategameidresp_ != NULL ? *updategameidresp_ : *default_instance_->updategameidresp_;
}
inline ::qihoo::protocol::chatroom::UpdateRoomIDResponse* ChatRoomDownToUser::mutable_updategameidresp() {
  set_has_updategameidresp();
  if (updategameidresp_ == NULL) updategameidresp_ = new ::qihoo::protocol::chatroom::UpdateRoomIDResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
  return updategameidresp_;
}
inline ::qihoo::protocol::chatroom::UpdateRoomIDResponse* ChatRoomDownToUser::release_updategameidresp() {
  clear_has_updategameidresp();
  ::qihoo::protocol::chatroom::UpdateRoomIDResponse* temp = updategameidresp_;
  updategameidresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_updategameidresp(::qihoo::protocol::chatroom::UpdateRoomIDResponse* updategameidresp) {
  delete updategameidresp_;
  updategameidresp_ = updategameidresp;
  if (updategameidresp) {
    set_has_updategameidresp();
  } else {
    clear_has_updategameidresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
}

// optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
inline bool ChatRoomDownToUser::has_queryallgameroomresp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRoomDownToUser::set_has_queryallgameroomresp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRoomDownToUser::clear_has_queryallgameroomresp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRoomDownToUser::clear_queryallgameroomresp() {
  if (queryallgameroomresp_ != NULL) queryallgameroomresp_->::qihoo::protocol::chatroom::QueryAllGameRoomResponse::Clear();
  clear_has_queryallgameroomresp();
}
inline const ::qihoo::protocol::chatroom::QueryAllGameRoomResponse& ChatRoomDownToUser::queryallgameroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
  return queryallgameroomresp_ != NULL ? *queryallgameroomresp_ : *default_instance_->queryallgameroomresp_;
}
inline ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* ChatRoomDownToUser::mutable_queryallgameroomresp() {
  set_has_queryallgameroomresp();
  if (queryallgameroomresp_ == NULL) queryallgameroomresp_ = new ::qihoo::protocol::chatroom::QueryAllGameRoomResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
  return queryallgameroomresp_;
}
inline ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* ChatRoomDownToUser::release_queryallgameroomresp() {
  clear_has_queryallgameroomresp();
  ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* temp = queryallgameroomresp_;
  queryallgameroomresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_queryallgameroomresp(::qihoo::protocol::chatroom::QueryAllGameRoomResponse* queryallgameroomresp) {
  delete queryallgameroomresp_;
  queryallgameroomresp_ = queryallgameroomresp;
  if (queryallgameroomresp) {
    set_has_queryallgameroomresp();
  } else {
    clear_has_queryallgameroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
}

// optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
inline bool ChatRoomDownToUser::has_chatroommessageresp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatRoomDownToUser::set_has_chatroommessageresp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatRoomDownToUser::clear_has_chatroommessageresp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatRoomDownToUser::clear_chatroommessageresp() {
  if (chatroommessageresp_ != NULL) chatroommessageresp_->::qihoo::protocol::chatroom::ChatRoomMessageResponse::Clear();
  clear_has_chatroommessageresp();
}
inline const ::qihoo::protocol::chatroom::ChatRoomMessageResponse& ChatRoomDownToUser::chatroommessageresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
  return chatroommessageresp_ != NULL ? *chatroommessageresp_ : *default_instance_->chatroommessageresp_;
}
inline ::qihoo::protocol::chatroom::ChatRoomMessageResponse* ChatRoomDownToUser::mutable_chatroommessageresp() {
  set_has_chatroommessageresp();
  if (chatroommessageresp_ == NULL) chatroommessageresp_ = new ::qihoo::protocol::chatroom::ChatRoomMessageResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
  return chatroommessageresp_;
}
inline ::qihoo::protocol::chatroom::ChatRoomMessageResponse* ChatRoomDownToUser::release_chatroommessageresp() {
  clear_has_chatroommessageresp();
  ::qihoo::protocol::chatroom::ChatRoomMessageResponse* temp = chatroommessageresp_;
  chatroommessageresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_chatroommessageresp(::qihoo::protocol::chatroom::ChatRoomMessageResponse* chatroommessageresp) {
  delete chatroommessageresp_;
  chatroommessageresp_ = chatroommessageresp;
  if (chatroommessageresp) {
    set_has_chatroommessageresp();
  } else {
    clear_has_chatroommessageresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
}

// optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
inline bool ChatRoomDownToUser::has_newmsgnotify() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatRoomDownToUser::set_has_newmsgnotify() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatRoomDownToUser::clear_has_newmsgnotify() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatRoomDownToUser::clear_newmsgnotify() {
  if (newmsgnotify_ != NULL) newmsgnotify_->::qihoo::protocol::chatroom::ChatRoomNewMsg::Clear();
  clear_has_newmsgnotify();
}
inline const ::qihoo::protocol::chatroom::ChatRoomNewMsg& ChatRoomDownToUser::newmsgnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
  return newmsgnotify_ != NULL ? *newmsgnotify_ : *default_instance_->newmsgnotify_;
}
inline ::qihoo::protocol::chatroom::ChatRoomNewMsg* ChatRoomDownToUser::mutable_newmsgnotify() {
  set_has_newmsgnotify();
  if (newmsgnotify_ == NULL) newmsgnotify_ = new ::qihoo::protocol::chatroom::ChatRoomNewMsg;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
  return newmsgnotify_;
}
inline ::qihoo::protocol::chatroom::ChatRoomNewMsg* ChatRoomDownToUser::release_newmsgnotify() {
  clear_has_newmsgnotify();
  ::qihoo::protocol::chatroom::ChatRoomNewMsg* temp = newmsgnotify_;
  newmsgnotify_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_newmsgnotify(::qihoo::protocol::chatroom::ChatRoomNewMsg* newmsgnotify) {
  delete newmsgnotify_;
  newmsgnotify_ = newmsgnotify;
  if (newmsgnotify) {
    set_has_newmsgnotify();
  } else {
    clear_has_newmsgnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
}

// optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
inline bool ChatRoomDownToUser::has_errormsgnotify() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChatRoomDownToUser::set_has_errormsgnotify() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChatRoomDownToUser::clear_has_errormsgnotify() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChatRoomDownToUser::clear_errormsgnotify() {
  if (errormsgnotify_ != NULL) errormsgnotify_->::qihoo::protocol::chatroom::ChatRoomErrorMsg::Clear();
  clear_has_errormsgnotify();
}
inline const ::qihoo::protocol::chatroom::ChatRoomErrorMsg& ChatRoomDownToUser::errormsgnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
  return errormsgnotify_ != NULL ? *errormsgnotify_ : *default_instance_->errormsgnotify_;
}
inline ::qihoo::protocol::chatroom::ChatRoomErrorMsg* ChatRoomDownToUser::mutable_errormsgnotify() {
  set_has_errormsgnotify();
  if (errormsgnotify_ == NULL) errormsgnotify_ = new ::qihoo::protocol::chatroom::ChatRoomErrorMsg;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
  return errormsgnotify_;
}
inline ::qihoo::protocol::chatroom::ChatRoomErrorMsg* ChatRoomDownToUser::release_errormsgnotify() {
  clear_has_errormsgnotify();
  ::qihoo::protocol::chatroom::ChatRoomErrorMsg* temp = errormsgnotify_;
  errormsgnotify_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_errormsgnotify(::qihoo::protocol::chatroom::ChatRoomErrorMsg* errormsgnotify) {
  delete errormsgnotify_;
  errormsgnotify_ = errormsgnotify;
  if (errormsgnotify) {
    set_has_errormsgnotify();
  } else {
    clear_has_errormsgnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
}

// optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
inline bool ChatRoomDownToUser::has_createrooms() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChatRoomDownToUser::set_has_createrooms() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChatRoomDownToUser::clear_has_createrooms() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChatRoomDownToUser::clear_createrooms() {
  if (createrooms_ != NULL) createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::Clear();
  clear_has_createrooms();
}
inline const ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse& ChatRoomDownToUser::createrooms() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
  return createrooms_ != NULL ? *createrooms_ : *default_instance_->createrooms_;
}
inline ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* ChatRoomDownToUser::mutable_createrooms() {
  set_has_createrooms();
  if (createrooms_ == NULL) createrooms_ = new ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
  return createrooms_;
}
inline ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* ChatRoomDownToUser::release_createrooms() {
  clear_has_createrooms();
  ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* temp = createrooms_;
  createrooms_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_createrooms(::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* createrooms) {
  delete createrooms_;
  createrooms_ = createrooms;
  if (createrooms) {
    set_has_createrooms();
  } else {
    clear_has_createrooms();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
}

// optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
inline bool ChatRoomDownToUser::has_memberjoinnotify() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChatRoomDownToUser::set_has_memberjoinnotify() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChatRoomDownToUser::clear_has_memberjoinnotify() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChatRoomDownToUser::clear_memberjoinnotify() {
  if (memberjoinnotify_ != NULL) memberjoinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
  clear_has_memberjoinnotify();
}
inline const ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify& ChatRoomDownToUser::memberjoinnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
  return memberjoinnotify_ != NULL ? *memberjoinnotify_ : *default_instance_->memberjoinnotify_;
}
inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomDownToUser::mutable_memberjoinnotify() {
  set_has_memberjoinnotify();
  if (memberjoinnotify_ == NULL) memberjoinnotify_ = new ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
  return memberjoinnotify_;
}
inline ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomDownToUser::release_memberjoinnotify() {
  clear_has_memberjoinnotify();
  ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* temp = memberjoinnotify_;
  memberjoinnotify_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_memberjoinnotify(::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* memberjoinnotify) {
  delete memberjoinnotify_;
  memberjoinnotify_ = memberjoinnotify;
  if (memberjoinnotify) {
    set_has_memberjoinnotify();
  } else {
    clear_has_memberjoinnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
}

// optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
inline bool ChatRoomDownToUser::has_memberquitnotify() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChatRoomDownToUser::set_has_memberquitnotify() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChatRoomDownToUser::clear_has_memberquitnotify() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChatRoomDownToUser::clear_memberquitnotify() {
  if (memberquitnotify_ != NULL) memberquitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
  clear_has_memberquitnotify();
}
inline const ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify& ChatRoomDownToUser::memberquitnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
  return memberquitnotify_ != NULL ? *memberquitnotify_ : *default_instance_->memberquitnotify_;
}
inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomDownToUser::mutable_memberquitnotify() {
  set_has_memberquitnotify();
  if (memberquitnotify_ == NULL) memberquitnotify_ = new ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
  return memberquitnotify_;
}
inline ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomDownToUser::release_memberquitnotify() {
  clear_has_memberquitnotify();
  ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* temp = memberquitnotify_;
  memberquitnotify_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_memberquitnotify(::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* memberquitnotify) {
  delete memberquitnotify_;
  memberquitnotify_ = memberquitnotify;
  if (memberquitnotify) {
    set_has_memberquitnotify();
  } else {
    clear_has_memberquitnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
}

// optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
inline bool ChatRoomDownToUser::has_subresp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChatRoomDownToUser::set_has_subresp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChatRoomDownToUser::clear_has_subresp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChatRoomDownToUser::clear_subresp() {
  if (subresp_ != NULL) subresp_->::qihoo::protocol::chatroom::SubscribeResponse::Clear();
  clear_has_subresp();
}
inline const ::qihoo::protocol::chatroom::SubscribeResponse& ChatRoomDownToUser::subresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
  return subresp_ != NULL ? *subresp_ : *default_instance_->subresp_;
}
inline ::qihoo::protocol::chatroom::SubscribeResponse* ChatRoomDownToUser::mutable_subresp() {
  set_has_subresp();
  if (subresp_ == NULL) subresp_ = new ::qihoo::protocol::chatroom::SubscribeResponse;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
  return subresp_;
}
inline ::qihoo::protocol::chatroom::SubscribeResponse* ChatRoomDownToUser::release_subresp() {
  clear_has_subresp();
  ::qihoo::protocol::chatroom::SubscribeResponse* temp = subresp_;
  subresp_ = NULL;
  return temp;
}
inline void ChatRoomDownToUser::set_allocated_subresp(::qihoo::protocol::chatroom::SubscribeResponse* subresp) {
  delete subresp_;
  subresp_ = subresp;
  if (subresp) {
    set_has_subresp();
  } else {
    clear_has_subresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
}

// optional bytes reason = 100;
inline bool ChatRoomDownToUser::has_reason() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChatRoomDownToUser::set_has_reason() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChatRoomDownToUser::clear_has_reason() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChatRoomDownToUser::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& ChatRoomDownToUser::reason() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
  return *reason_;
}
inline void ChatRoomDownToUser::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
inline void ChatRoomDownToUser::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
inline void ChatRoomDownToUser::set_reason(const void* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
inline ::std::string* ChatRoomDownToUser::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
  return reason_;
}
inline ::std::string* ChatRoomDownToUser::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomDownToUser::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}

// repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
inline int ChatRoomDownToUser::multinotify_size() const {
  return multinotify_.size();
}
inline void ChatRoomDownToUser::clear_multinotify() {
  multinotify_.Clear();
}
inline const ::qihoo::protocol::chatroom::ChatRoomMNotify& ChatRoomDownToUser::multinotify(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_.Get(index);
}
inline ::qihoo::protocol::chatroom::ChatRoomMNotify* ChatRoomDownToUser::mutable_multinotify(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_.Mutable(index);
}
inline ::qihoo::protocol::chatroom::ChatRoomMNotify* ChatRoomDownToUser::add_multinotify() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify >&
ChatRoomDownToUser::multinotify() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_;
}
inline ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify >*
ChatRoomDownToUser::mutable_multinotify() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return &multinotify_;
}

// -------------------------------------------------------------------

// ChatRoomPacket

// required bytes roomid = 1;
inline bool ChatRoomPacket::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomPacket::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomPacket::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomPacket::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& ChatRoomPacket::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
  return *roomid_;
}
inline void ChatRoomPacket::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
inline void ChatRoomPacket::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
inline void ChatRoomPacket::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
inline ::std::string* ChatRoomPacket::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
  return roomid_;
}
inline ::std::string* ChatRoomPacket::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomPacket::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}

// optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
inline bool ChatRoomPacket::has_to_server_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomPacket::set_has_to_server_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomPacket::clear_has_to_server_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomPacket::clear_to_server_data() {
  if (to_server_data_ != NULL) to_server_data_->::qihoo::protocol::chatroom::ChatRoomUpToServer::Clear();
  clear_has_to_server_data();
}
inline const ::qihoo::protocol::chatroom::ChatRoomUpToServer& ChatRoomPacket::to_server_data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
  return to_server_data_ != NULL ? *to_server_data_ : *default_instance_->to_server_data_;
}
inline ::qihoo::protocol::chatroom::ChatRoomUpToServer* ChatRoomPacket::mutable_to_server_data() {
  set_has_to_server_data();
  if (to_server_data_ == NULL) to_server_data_ = new ::qihoo::protocol::chatroom::ChatRoomUpToServer;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
  return to_server_data_;
}
inline ::qihoo::protocol::chatroom::ChatRoomUpToServer* ChatRoomPacket::release_to_server_data() {
  clear_has_to_server_data();
  ::qihoo::protocol::chatroom::ChatRoomUpToServer* temp = to_server_data_;
  to_server_data_ = NULL;
  return temp;
}
inline void ChatRoomPacket::set_allocated_to_server_data(::qihoo::protocol::chatroom::ChatRoomUpToServer* to_server_data) {
  delete to_server_data_;
  to_server_data_ = to_server_data;
  if (to_server_data) {
    set_has_to_server_data();
  } else {
    clear_has_to_server_data();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
}

// optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
inline bool ChatRoomPacket::has_to_user_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomPacket::set_has_to_user_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomPacket::clear_has_to_user_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomPacket::clear_to_user_data() {
  if (to_user_data_ != NULL) to_user_data_->::qihoo::protocol::chatroom::ChatRoomDownToUser::Clear();
  clear_has_to_user_data();
}
inline const ::qihoo::protocol::chatroom::ChatRoomDownToUser& ChatRoomPacket::to_user_data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
  return to_user_data_ != NULL ? *to_user_data_ : *default_instance_->to_user_data_;
}
inline ::qihoo::protocol::chatroom::ChatRoomDownToUser* ChatRoomPacket::mutable_to_user_data() {
  set_has_to_user_data();
  if (to_user_data_ == NULL) to_user_data_ = new ::qihoo::protocol::chatroom::ChatRoomDownToUser;
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
  return to_user_data_;
}
inline ::qihoo::protocol::chatroom::ChatRoomDownToUser* ChatRoomPacket::release_to_user_data() {
  clear_has_to_user_data();
  ::qihoo::protocol::chatroom::ChatRoomDownToUser* temp = to_user_data_;
  to_user_data_ = NULL;
  return temp;
}
inline void ChatRoomPacket::set_allocated_to_user_data(::qihoo::protocol::chatroom::ChatRoomDownToUser* to_user_data) {
  delete to_user_data_;
  to_user_data_ = to_user_data;
  if (to_user_data) {
    set_has_to_user_data();
  } else {
    clear_has_to_user_data();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
}

// optional string uuid = 4;
inline bool ChatRoomPacket::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomPacket::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomPacket::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomPacket::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ChatRoomPacket::uuid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
  return *uuid_;
}
inline void ChatRoomPacket::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
inline void ChatRoomPacket::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
inline void ChatRoomPacket::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
inline ::std::string* ChatRoomPacket::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
  return uuid_;
}
inline ::std::string* ChatRoomPacket::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomPacket::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}

// optional uint64 client_sn = 5;
inline bool ChatRoomPacket::has_client_sn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomPacket::set_has_client_sn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomPacket::clear_has_client_sn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomPacket::clear_client_sn() {
  client_sn_ = GOOGLE_ULONGLONG(0);
  clear_has_client_sn();
}
inline ::google::protobuf::uint64 ChatRoomPacket::client_sn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.client_sn)
  return client_sn_;
}
inline void ChatRoomPacket::set_client_sn(::google::protobuf::uint64 value) {
  set_has_client_sn();
  client_sn_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.client_sn)
}

// optional uint32 appid = 6;
inline bool ChatRoomPacket::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomPacket::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomPacket::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomPacket::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 ChatRoomPacket::appid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.appid)
  return appid_;
}
inline void ChatRoomPacket::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.appid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatroom
}  // namespace protocol
}  // namespace qihoo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chatroom_2eproto__INCLUDED
