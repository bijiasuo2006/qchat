// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: address_book.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "address_book.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMultiInfosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMultiInfosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMultiInfosResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMultiInfosResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitLoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitLoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_Resp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_Resp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEQ1User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEQ1User_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespEQ1User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespEQ1User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ex1QueryUserStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ex1QueryUserStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ex1QueryUserStatusResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ex1QueryUserStatusResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReLoginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReLoginNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReConnectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReConnectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proxy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proxy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_address_5fbook_2eproto() {
  protobuf_AddDesc_address_5fbook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "address_book.proto");
  GOOGLE_CHECK(file != NULL);
  Pair_descriptor_ = file->message_type(0);
  static const int Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, value_),
  };
  Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pair_descriptor_,
      Pair::default_instance_,
      Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pair));
  Error_descriptor_ = file->message_type(1);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, description_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  User_descriptor_ = file->message_type(2);
  static const int User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, property_pairs_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Info_descriptor_ = file->message_type(3);
  static const int Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, property_pairs_),
  };
  Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info));
  LoginReq_descriptor_ = file->message_type(4);
  static const int LoginReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, mobile_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, server_ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, secret_ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, heart_feq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, verf_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, not_encrypt_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginResp_descriptor_ = file->message_type(5);
  static const int LoginResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, client_login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, serverip_),
  };
  LoginResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResp_descriptor_,
      LoginResp::default_instance_,
      LoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResp));
  ChatReq_descriptor_ = file->message_type(6);
  static const int ChatReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, body_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, more_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, body_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, m_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, s_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, expire_time_),
  };
  ChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatReq_descriptor_,
      ChatReq::default_instance_,
      ChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatReq));
  ChatResp_descriptor_ = file->message_type(7);
  static const int ChatResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, body_id_),
  };
  ChatResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatResp_descriptor_,
      ChatResp::default_instance_,
      ChatResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatResp));
  GetInfoReq_descriptor_ = file->message_type(8);
  static const int GetInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, get_info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, get_info_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, s_parameter_),
  };
  GetInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInfoReq_descriptor_,
      GetInfoReq::default_instance_,
      GetInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInfoReq));
  GetInfoResp_descriptor_ = file->message_type(9);
  static const int GetInfoResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, last_info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, s_parameter_),
  };
  GetInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInfoResp_descriptor_,
      GetInfoResp::default_instance_,
      GetInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInfoResp));
  GetMultiInfosReq_descriptor_ = file->message_type(10);
  static const int GetMultiInfosReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, get_info_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, s_parameter_),
  };
  GetMultiInfosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMultiInfosReq_descriptor_,
      GetMultiInfosReq::default_instance_,
      GetMultiInfosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMultiInfosReq));
  GetMultiInfosResp_descriptor_ = file->message_type(11);
  static const int GetMultiInfosResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, last_info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, s_parameter_),
  };
  GetMultiInfosResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMultiInfosResp_descriptor_,
      GetMultiInfosResp::default_instance_,
      GetMultiInfosResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMultiInfosResp));
  LogoutReq_descriptor_ = file->message_type(12);
  static const int LogoutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, reason_),
  };
  LogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutReq_descriptor_,
      LogoutReq::default_instance_,
      LogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutReq));
  LogoutResp_descriptor_ = file->message_type(13);
  static const int LogoutResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResp, result_),
  };
  LogoutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResp_descriptor_,
      LogoutResp::default_instance_,
      LogoutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResp));
  InitLoginReq_descriptor_ = file->message_type(14);
  static const int InitLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, client_ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, sig_),
  };
  InitLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitLoginReq_descriptor_,
      InitLoginReq::default_instance_,
      InitLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitLoginReq));
  InitLoginResp_descriptor_ = file->message_type(15);
  static const int InitLoginResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, client_ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, server_ram_),
  };
  InitLoginResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitLoginResp_descriptor_,
      InitLoginResp::default_instance_,
      InitLoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitLoginResp));
  Service_Req_descriptor_ = file->message_type(16);
  static const int Service_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, request_),
  };
  Service_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Service_Req_descriptor_,
      Service_Req::default_instance_,
      Service_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Service_Req));
  Service_Resp_descriptor_ = file->message_type(17);
  static const int Service_Resp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, response_),
  };
  Service_Resp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Service_Resp_descriptor_,
      Service_Resp::default_instance_,
      Service_Resp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Service_Resp));
  ReqEQ1User_descriptor_ = file->message_type(18);
  static const int ReqEQ1User_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, app_id_),
  };
  ReqEQ1User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEQ1User_descriptor_,
      ReqEQ1User::default_instance_,
      ReqEQ1User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEQ1User));
  RespEQ1User_descriptor_ = file->message_type(19);
  static const int RespEQ1User_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, jid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, mobile_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, client_ver_),
  };
  RespEQ1User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespEQ1User_descriptor_,
      RespEQ1User::default_instance_,
      RespEQ1User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespEQ1User));
  Ex1QueryUserStatusReq_descriptor_ = file->message_type(20);
  static const int Ex1QueryUserStatusReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusReq, user_list_),
  };
  Ex1QueryUserStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ex1QueryUserStatusReq_descriptor_,
      Ex1QueryUserStatusReq::default_instance_,
      Ex1QueryUserStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ex1QueryUserStatusReq));
  Ex1QueryUserStatusResp_descriptor_ = file->message_type(21);
  static const int Ex1QueryUserStatusResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusResp, user_list_),
  };
  Ex1QueryUserStatusResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ex1QueryUserStatusResp_descriptor_,
      Ex1QueryUserStatusResp::default_instance_,
      Ex1QueryUserStatusResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ex1QueryUserStatusResp));
  Request_descriptor_ = file->message_type(22);
  static const int Request_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, init_login_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, e1_query_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_multi_infos_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(23);
  static const int Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, init_login_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, service_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, e1_query_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_multi_infos_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  NewMessageNotify_descriptor_ = file->message_type(24);
  static const int NewMessageNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, info_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, query_after_seconds_),
  };
  NewMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewMessageNotify_descriptor_,
      NewMessageNotify::default_instance_,
      NewMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewMessageNotify));
  ReLoginNotify_descriptor_ = file->message_type(25);
  static const int ReLoginNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLoginNotify, new_ip_),
  };
  ReLoginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReLoginNotify_descriptor_,
      ReLoginNotify::default_instance_,
      ReLoginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLoginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLoginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReLoginNotify));
  ReConnectNotify_descriptor_ = file->message_type(26);
  static const int ReConnectNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, more_ips_),
  };
  ReConnectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReConnectNotify_descriptor_,
      ReConnectNotify::default_instance_,
      ReConnectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReConnectNotify));
  Notify_descriptor_ = file->message_type(27);
  static const int Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, newinfo_ntf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, relogin_ntf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, reconnect_ntf_),
  };
  Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notify_descriptor_,
      Notify::default_instance_,
      Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notify));
  Ack_descriptor_ = file->message_type(28);
  static const int Ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, result_),
  };
  Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ack_descriptor_,
      Ack::default_instance_,
      Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ack));
  RouteInfo_descriptor_ = file->message_type(29);
  static const int RouteInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, msg_exchanger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, msg_router_),
  };
  RouteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteInfo_descriptor_,
      RouteInfo::default_instance_,
      RouteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteInfo));
  Proxy_descriptor_ = file->message_type(30);
  static const int Proxy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, receiver_),
  };
  Proxy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proxy_descriptor_,
      Proxy::default_instance_,
      Proxy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proxy));
  Message_descriptor_ = file->message_type(31);
  static const int Message_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, receiver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, proxy_mesg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, client_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sender_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sender_jid_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_address_5fbook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pair_descriptor_, &Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_descriptor_, &Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResp_descriptor_, &LoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatReq_descriptor_, &ChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatResp_descriptor_, &ChatResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInfoReq_descriptor_, &GetInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInfoResp_descriptor_, &GetInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMultiInfosReq_descriptor_, &GetMultiInfosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMultiInfosResp_descriptor_, &GetMultiInfosResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutReq_descriptor_, &LogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResp_descriptor_, &LogoutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitLoginReq_descriptor_, &InitLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitLoginResp_descriptor_, &InitLoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Service_Req_descriptor_, &Service_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Service_Resp_descriptor_, &Service_Resp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEQ1User_descriptor_, &ReqEQ1User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespEQ1User_descriptor_, &RespEQ1User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ex1QueryUserStatusReq_descriptor_, &Ex1QueryUserStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ex1QueryUserStatusResp_descriptor_, &Ex1QueryUserStatusResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewMessageNotify_descriptor_, &NewMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReLoginNotify_descriptor_, &ReLoginNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReConnectNotify_descriptor_, &ReConnectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notify_descriptor_, &Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ack_descriptor_, &Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteInfo_descriptor_, &RouteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proxy_descriptor_, &Proxy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_address_5fbook_2eproto() {
  delete Pair::default_instance_;
  delete Pair_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete Info::default_instance_;
  delete Info_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginResp::default_instance_;
  delete LoginResp_reflection_;
  delete ChatReq::default_instance_;
  delete ChatReq_reflection_;
  delete ChatResp::default_instance_;
  delete ChatResp_reflection_;
  delete GetInfoReq::default_instance_;
  delete GetInfoReq_reflection_;
  delete GetInfoResp::default_instance_;
  delete GetInfoResp_reflection_;
  delete GetMultiInfosReq::default_instance_;
  delete GetMultiInfosReq_reflection_;
  delete GetMultiInfosResp::default_instance_;
  delete GetMultiInfosResp_reflection_;
  delete LogoutReq::default_instance_;
  delete LogoutReq_reflection_;
  delete LogoutResp::default_instance_;
  delete LogoutResp_reflection_;
  delete InitLoginReq::default_instance_;
  delete InitLoginReq_reflection_;
  delete InitLoginResp::default_instance_;
  delete InitLoginResp_reflection_;
  delete Service_Req::default_instance_;
  delete Service_Req_reflection_;
  delete Service_Resp::default_instance_;
  delete Service_Resp_reflection_;
  delete ReqEQ1User::default_instance_;
  delete ReqEQ1User_reflection_;
  delete RespEQ1User::default_instance_;
  delete RespEQ1User_reflection_;
  delete Ex1QueryUserStatusReq::default_instance_;
  delete Ex1QueryUserStatusReq_reflection_;
  delete Ex1QueryUserStatusResp::default_instance_;
  delete Ex1QueryUserStatusResp_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete NewMessageNotify::default_instance_;
  delete NewMessageNotify_reflection_;
  delete ReLoginNotify::default_instance_;
  delete ReLoginNotify_reflection_;
  delete ReConnectNotify::default_instance_;
  delete ReConnectNotify_reflection_;
  delete Notify::default_instance_;
  delete Notify_reflection_;
  delete Ack::default_instance_;
  delete Ack_reflection_;
  delete RouteInfo::default_instance_;
  delete RouteInfo_reflection_;
  delete Proxy::default_instance_;
  delete Proxy_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_address_5fbook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022address_book.proto\022\027qihoo.protocol.mes"
    "sages\"\"\n\004Pair\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \001("
    "\014\"(\n\005Error\022\n\n\002id\030\001 \002(\r\022\023\n\013description\030\002 "
    "\001(\014\"M\n\004User\022\016\n\006userid\030\001 \002(\t\0225\n\016property_"
    "pairs\030\002 \003(\0132\035.qihoo.protocol.messages.Pa"
    "ir\"=\n\004Info\0225\n\016property_pairs\030\001 \003(\0132\035.qih"
    "oo.protocol.messages.Pair\"\325\001\n\010LoginReq\022\023"
    "\n\013mobile_type\030\001 \002(\t\022\020\n\010net_type\030\002 \002(\r\022\022\n"
    "\nserver_ram\030\003 \002(\t\022\022\n\nsecret_ram\030\004 \001(\014\022\024\n"
    "\006app_id\030\005 \001(\r:\0042000\022\026\n\theart_feq\030\006 \001(\r:\003"
    "300\022\022\n\010deviceid\030\007 \001(\t:\000\022\020\n\010platform\030\010 \001("
    "\t\022\021\n\tverf_code\030\t \001(\t\022\023\n\013not_encrypt\030\n \001("
    "\010\"r\n\tLoginResp\022\021\n\ttimestamp\030\001 \002(\r\022\022\n\nses"
    "sion_id\030\002 \002(\t\022\023\n\013session_key\030\003 \002(\t\022\027\n\017cl"
    "ient_login_ip\030\004 \001(\t\022\020\n\010serverip\030\005 \001(\t\"\260\001"
    "\n\007ChatReq\022\014\n\004body\030\001 \002(\014\022\017\n\007body_id\030\002 \001(\r"
    "\022\021\n\tmore_flag\030\003 \001(\r\022\021\n\tbody_type\030\004 \002(\r\022\r"
    "\n\005store\030\005 \001(\010\022\023\n\013m_parameter\030\006 \001(\014\022\022\n\nse"
    "rvice_id\030\007 \001(\r\022\023\n\013s_parameter\030\010 \001(\014\022\023\n\013e"
    "xpire_time\030\014 \001(\r\"+\n\010ChatResp\022\016\n\006result\030\001"
    " \002(\r\022\017\n\007body_id\030\002 \001(\r\"b\n\nGetInfoReq\022\021\n\ti"
    "nfo_type\030\001 \002(\t\022\023\n\013get_info_id\030\002 \002(\003\022\027\n\017g"
    "et_info_offset\030\003 \001(\005\022\023\n\013s_parameter\030\004 \001("
    "\014\"y\n\013GetInfoResp\022\021\n\tinfo_type\030\001 \002(\t\022,\n\005i"
    "nfos\030\002 \003(\0132\035.qihoo.protocol.messages.Inf"
    "o\022\024\n\014last_info_id\030\003 \001(\003\022\023\n\013s_parameter\030\004"
    " \001(\014\"P\n\020GetMultiInfosReq\022\021\n\tinfo_type\030\001 "
    "\002(\t\022\024\n\014get_info_ids\030\002 \003(\003\022\023\n\013s_parameter"
    "\030\003 \001(\014\"\177\n\021GetMultiInfosResp\022\021\n\tinfo_type"
    "\030\001 \002(\t\022,\n\005infos\030\002 \003(\0132\035.qihoo.protocol.m"
    "essages.Info\022\024\n\014last_info_id\030\003 \001(\003\022\023\n\013s_"
    "parameter\030\004 \001(\014\"\033\n\tLogoutReq\022\016\n\006reason\030\001"
    " \001(\t\"\034\n\nLogoutResp\022\016\n\006result\030\001 \002(\r\"/\n\014In"
    "itLoginReq\022\022\n\nclient_ram\030\001 \002(\t\022\013\n\003sig\030\002 "
    "\001(\t\"7\n\rInitLoginResp\022\022\n\nclient_ram\030\001 \002(\t"
    "\022\022\n\nserver_ram\030\002 \002(\t\"2\n\013Service_Req\022\022\n\ns"
    "ervice_id\030\001 \002(\r\022\017\n\007request\030\002 \002(\014\"4\n\014Serv"
    "ice_Resp\022\022\n\nservice_id\030\001 \002(\r\022\020\n\010response"
    "\030\002 \002(\014\"\?\n\nReqEQ1User\022\016\n\006userid\030\001 \002(\t\022\021\n\t"
    "user_type\030\002 \002(\t\022\016\n\006app_id\030\003 \001(\r\"\230\001\n\013Resp"
    "EQ1User\022\016\n\006userid\030\001 \002(\t\022\021\n\tuser_type\030\002 \002"
    "(\t\022\016\n\006status\030\003 \002(\005\022\013\n\003jid\030\004 \001(\t\022\016\n\006app_i"
    "d\030\005 \001(\r\022\020\n\010platform\030\006 \001(\t\022\023\n\013mobile_type"
    "\030\007 \001(\t\022\022\n\nclient_ver\030\010 \001(\r\"O\n\025Ex1QueryUs"
    "erStatusReq\0226\n\tuser_list\030\001 \003(\0132#.qihoo.p"
    "rotocol.messages.ReqEQ1User\"Q\n\026Ex1QueryU"
    "serStatusResp\0227\n\tuser_list\030\001 \003(\0132$.qihoo"
    ".protocol.messages.RespEQ1User\"\333\003\n\007Reque"
    "st\0220\n\005login\030\002 \001(\0132!.qihoo.protocol.messa"
    "ges.LoginReq\022.\n\004chat\030\003 \001(\0132 .qihoo.proto"
    "col.messages.ChatReq\0225\n\010get_info\030\005 \001(\0132#"
    ".qihoo.protocol.messages.GetInfoReq\0222\n\006l"
    "ogout\030\006 \001(\0132\".qihoo.protocol.messages.Lo"
    "goutReq\022=\n\016init_login_req\030\t \001(\0132%.qihoo."
    "protocol.messages.InitLoginReq\0229\n\013servic"
    "e_req\030\013 \001(\0132$.qihoo.protocol.messages.Se"
    "rvice_Req\022E\n\re1_query_user\030\014 \001(\0132..qihoo"
    ".protocol.messages.Ex1QueryUserStatusReq"
    "\022B\n\017get_multi_infos\030d \001(\0132).qihoo.protoc"
    "ol.messages.GetMultiInfosReq\"\225\004\n\010Respons"
    "e\022-\n\005error\030\001 \001(\0132\036.qihoo.protocol.messag"
    "es.Error\0221\n\005login\030\003 \001(\0132\".qihoo.protocol"
    ".messages.LoginResp\022/\n\004chat\030\004 \001(\0132!.qiho"
    "o.protocol.messages.ChatResp\0226\n\010get_info"
    "\030\006 \001(\0132$.qihoo.protocol.messages.GetInfo"
    "Resp\0223\n\006logout\030\007 \001(\0132#.qihoo.protocol.me"
    "ssages.LogoutResp\022\?\n\017init_login_resp\030\n \001"
    "(\0132&.qihoo.protocol.messages.InitLoginRe"
    "sp\022;\n\014service_resp\030\014 \001(\0132%.qihoo.protoco"
    "l.messages.Service_Resp\022F\n\re1_query_user"
    "\030\r \001(\0132/.qihoo.protocol.messages.Ex1Quer"
    "yUserStatusResp\022C\n\017get_multi_infos\030d \001(\013"
    "2*.qihoo.protocol.messages.GetMultiInfos"
    "Resp\"i\n\020NewMessageNotify\022\021\n\tinfo_type\030\001 "
    "\002(\t\022\024\n\014info_content\030\002 \001(\014\022\017\n\007info_id\030\003 \001"
    "(\003\022\033\n\023query_after_seconds\030\004 \001(\r\"\037\n\rReLog"
    "inNotify\022\016\n\006new_ip\030\001 \001(\t\"=\n\017ReConnectNot"
    "ify\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\020\n\010more_ip"
    "s\030\003 \003(\t\"\306\001\n\006Notify\022>\n\013newinfo_ntf\030\001 \001(\0132"
    ").qihoo.protocol.messages.NewMessageNoti"
    "fy\022;\n\013relogin_ntf\030\002 \001(\0132&.qihoo.protocol"
    ".messages.ReLoginNotify\022\?\n\rreconnect_ntf"
    "\030\003 \001(\0132(.qihoo.protocol.messages.ReConne"
    "ctNotify\"\025\n\003Ack\022\016\n\006result\030\001 \002(\r\"H\n\tRoute"
    "Info\022\020\n\010username\030\001 \002(\014\022\025\n\rmsg_exchanger\030"
    "\002 \002(\t\022\022\n\nmsg_router\030\003 \002(\t\"M\n\005Proxy\022\016\n\006se"
    "nder\030\001 \002(\t\0224\n\010receiver\030\002 \003(\0132\".qihoo.pro"
    "tocol.messages.RouteInfo\"\213\003\n\007Message\022\r\n\005"
    "msgid\030\001 \002(\r\022\n\n\002sn\030\002 \002(\004\022\016\n\006sender\030\003 \001(\t\022"
    "\020\n\010receiver\030\004 \001(\t\022\025\n\rreceiver_type\030\005 \001(\t"
    "\022-\n\003req\030\006 \001(\0132 .qihoo.protocol.messages."
    "Request\022/\n\004resp\030\007 \001(\0132!.qihoo.protocol.m"
    "essages.Response\022/\n\006notify\030\010 \001(\0132\037.qihoo"
    ".protocol.messages.Notify\022)\n\003ack\030\t \001(\0132\034"
    ".qihoo.protocol.messages.Ack\0222\n\nproxy_me"
    "sg\030\n \001(\0132\036.qihoo.protocol.messages.Proxy"
    "\022\023\n\013client_data\030\013 \001(\004\022\023\n\013sender_type\030\014 \001"
    "(\t\022\022\n\nsender_jid\030\r \001(\tB>\n)com.qihoo.cont"
    "act.cloud.protocol.messagesB\021Communicati"
    "onData", 3966);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "address_book.proto", &protobuf_RegisterTypes);
  Pair::default_instance_ = new Pair();
  Error::default_instance_ = new Error();
  User::default_instance_ = new User();
  Info::default_instance_ = new Info();
  LoginReq::default_instance_ = new LoginReq();
  LoginResp::default_instance_ = new LoginResp();
  ChatReq::default_instance_ = new ChatReq();
  ChatResp::default_instance_ = new ChatResp();
  GetInfoReq::default_instance_ = new GetInfoReq();
  GetInfoResp::default_instance_ = new GetInfoResp();
  GetMultiInfosReq::default_instance_ = new GetMultiInfosReq();
  GetMultiInfosResp::default_instance_ = new GetMultiInfosResp();
  LogoutReq::default_instance_ = new LogoutReq();
  LogoutResp::default_instance_ = new LogoutResp();
  InitLoginReq::default_instance_ = new InitLoginReq();
  InitLoginResp::default_instance_ = new InitLoginResp();
  Service_Req::default_instance_ = new Service_Req();
  Service_Resp::default_instance_ = new Service_Resp();
  ReqEQ1User::default_instance_ = new ReqEQ1User();
  RespEQ1User::default_instance_ = new RespEQ1User();
  Ex1QueryUserStatusReq::default_instance_ = new Ex1QueryUserStatusReq();
  Ex1QueryUserStatusResp::default_instance_ = new Ex1QueryUserStatusResp();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  NewMessageNotify::default_instance_ = new NewMessageNotify();
  ReLoginNotify::default_instance_ = new ReLoginNotify();
  ReConnectNotify::default_instance_ = new ReConnectNotify();
  Notify::default_instance_ = new Notify();
  Ack::default_instance_ = new Ack();
  RouteInfo::default_instance_ = new RouteInfo();
  Proxy::default_instance_ = new Proxy();
  Message::default_instance_ = new Message();
  Pair::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  Info::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginResp::default_instance_->InitAsDefaultInstance();
  ChatReq::default_instance_->InitAsDefaultInstance();
  ChatResp::default_instance_->InitAsDefaultInstance();
  GetInfoReq::default_instance_->InitAsDefaultInstance();
  GetInfoResp::default_instance_->InitAsDefaultInstance();
  GetMultiInfosReq::default_instance_->InitAsDefaultInstance();
  GetMultiInfosResp::default_instance_->InitAsDefaultInstance();
  LogoutReq::default_instance_->InitAsDefaultInstance();
  LogoutResp::default_instance_->InitAsDefaultInstance();
  InitLoginReq::default_instance_->InitAsDefaultInstance();
  InitLoginResp::default_instance_->InitAsDefaultInstance();
  Service_Req::default_instance_->InitAsDefaultInstance();
  Service_Resp::default_instance_->InitAsDefaultInstance();
  ReqEQ1User::default_instance_->InitAsDefaultInstance();
  RespEQ1User::default_instance_->InitAsDefaultInstance();
  Ex1QueryUserStatusReq::default_instance_->InitAsDefaultInstance();
  Ex1QueryUserStatusResp::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  NewMessageNotify::default_instance_->InitAsDefaultInstance();
  ReLoginNotify::default_instance_->InitAsDefaultInstance();
  ReConnectNotify::default_instance_->InitAsDefaultInstance();
  Notify::default_instance_->InitAsDefaultInstance();
  Ack::default_instance_->InitAsDefaultInstance();
  RouteInfo::default_instance_->InitAsDefaultInstance();
  Proxy::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_address_5fbook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_address_5fbook_2eproto {
  StaticDescriptorInitializer_address_5fbook_2eproto() {
    protobuf_AddDesc_address_5fbook_2eproto();
  }
} static_descriptor_initializer_address_5fbook_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Pair::kKeyFieldNumber;
const int Pair::kValueFieldNumber;
#endif  // !_MSC_VER

Pair::Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Pair)
}

void Pair::InitAsDefaultInstance() {
}

Pair::Pair(const Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Pair)
}

void Pair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Pair)
  SharedDtor();
}

void Pair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pair_descriptor_;
}

const Pair& Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Pair* Pair::default_instance_ = NULL;

Pair* Pair::New() const {
  return new Pair;
}

void Pair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Pair)
  return false;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Pair)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Pair)
}

::google::protobuf::uint8* Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Pair)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Pair)
  return target;
}

int Pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pair::Swap(Pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pair_descriptor_;
  metadata.reflection = Pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kIdFieldNumber;
const int Error::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional bytes description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Error)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Error)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes description = 2;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kUseridFieldNumber;
const int User::kPropertyPairsFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (has_userid()) {
    if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      userid_->clear();
    }
  }
  property_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_property_pairs;
        break;
      }

      // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_property_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_property_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.User)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
  for (int i = 0; i < this->property_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.User)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
  for (int i = 0; i < this->property_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
  total_size += 1 * this->property_pairs_size();
  for (int i = 0; i < this->property_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_pairs_.MergeFrom(from.property_pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->property_pairs())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    property_pairs_.Swap(&other->property_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Info::kPropertyPairsFieldNumber;
#endif  // !_MSC_VER

Info::Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Info)
}

void Info::InitAsDefaultInstance() {
}

Info::Info(const Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Info)
}

void Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New() const {
  return new Info;
}

void Info::Clear() {
  property_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
      case 1: {
        if (tag == 10) {
         parse_property_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_property_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Info)
  // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
  for (int i = 0; i < this->property_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->property_pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Info)
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Info)
  // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
  for (int i = 0; i < this->property_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->property_pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Info)
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;

  // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
  total_size += 1 * this->property_pairs_size();
  for (int i = 0; i < this->property_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_pairs_.MergeFrom(from.property_pairs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->property_pairs())) return false;
  return true;
}

void Info::Swap(Info* other) {
  if (other != this) {
    property_pairs_.Swap(&other->property_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kMobileTypeFieldNumber;
const int LoginReq::kNetTypeFieldNumber;
const int LoginReq::kServerRamFieldNumber;
const int LoginReq::kSecretRamFieldNumber;
const int LoginReq::kAppIdFieldNumber;
const int LoginReq::kHeartFeqFieldNumber;
const int LoginReq::kDeviceidFieldNumber;
const int LoginReq::kPlatformFieldNumber;
const int LoginReq::kVerfCodeFieldNumber;
const int LoginReq::kNotEncryptFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LoginReq)
}

void LoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobile_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_type_ = 0u;
  server_ram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_ram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 2000u;
  heart_feq_ = 300u;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verf_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  not_encrypt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (mobile_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_type_;
  }
  if (server_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ram_;
  }
  if (secret_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secret_ram_;
  }
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (verf_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verf_code_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_mobile_type()) {
      if (mobile_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_type_->clear();
      }
    }
    net_type_ = 0u;
    if (has_server_ram()) {
      if (server_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_ram_->clear();
      }
    }
    if (has_secret_ram()) {
      if (secret_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secret_ram_->clear();
      }
    }
    app_id_ = 2000u;
    heart_feq_ = 300u;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_verf_code()) {
      if (verf_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verf_code_->clear();
      }
    }
    not_encrypt_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mobile_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile_type().data(), this->mobile_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_net_type;
        break;
      }

      // required uint32 net_type = 2;
      case 2: {
        if (tag == 16) {
         parse_net_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_type_)));
          set_has_net_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_ram;
        break;
      }

      // required string server_ram = 3;
      case 3: {
        if (tag == 26) {
         parse_server_ram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ram().data(), this->server_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_ram");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secret_ram;
        break;
      }

      // optional bytes secret_ram = 4;
      case 4: {
        if (tag == 34) {
         parse_secret_ram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_ram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 5 [default = 2000];
      case 5: {
        if (tag == 40) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_heart_feq;
        break;
      }

      // optional uint32 heart_feq = 6 [default = 300];
      case 6: {
        if (tag == 48) {
         parse_heart_feq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heart_feq_)));
          set_has_heart_feq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_deviceid;
        break;
      }

      // optional string deviceid = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_platform;
        break;
      }

      // optional string platform = 8;
      case 8: {
        if (tag == 66) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_verf_code;
        break;
      }

      // optional string verf_code = 9;
      case 9: {
        if (tag == 74) {
         parse_verf_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verf_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verf_code().data(), this->verf_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verf_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_not_encrypt;
        break;
      }

      // optional bool not_encrypt = 10;
      case 10: {
        if (tag == 80) {
         parse_not_encrypt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_encrypt_)));
          set_has_not_encrypt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LoginReq)
  // required string mobile_type = 1;
  if (has_mobile_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobile_type(), output);
  }

  // required uint32 net_type = 2;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->net_type(), output);
  }

  // required string server_ram = 3;
  if (has_server_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_ram(), output);
  }

  // optional bytes secret_ram = 4;
  if (has_secret_ram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secret_ram(), output);
  }

  // optional uint32 app_id = 5 [default = 2000];
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->app_id(), output);
  }

  // optional uint32 heart_feq = 6 [default = 300];
  if (has_heart_feq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heart_feq(), output);
  }

  // optional string deviceid = 7 [default = ""];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->deviceid(), output);
  }

  // optional string platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->platform(), output);
  }

  // optional string verf_code = 9;
  if (has_verf_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verf_code().data(), this->verf_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verf_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->verf_code(), output);
  }

  // optional bool not_encrypt = 10;
  if (has_not_encrypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->not_encrypt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LoginReq)
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LoginReq)
  // required string mobile_type = 1;
  if (has_mobile_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mobile_type(), target);
  }

  // required uint32 net_type = 2;
  if (has_net_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->net_type(), target);
  }

  // required string server_ram = 3;
  if (has_server_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_ram(), target);
  }

  // optional bytes secret_ram = 4;
  if (has_secret_ram()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secret_ram(), target);
  }

  // optional uint32 app_id = 5 [default = 2000];
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->app_id(), target);
  }

  // optional uint32 heart_feq = 6 [default = 300];
  if (has_heart_feq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heart_feq(), target);
  }

  // optional string deviceid = 7 [default = ""];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // optional string platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->platform(), target);
  }

  // optional string verf_code = 9;
  if (has_verf_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verf_code().data(), this->verf_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verf_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->verf_code(), target);
  }

  // optional bool not_encrypt = 10;
  if (has_not_encrypt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->not_encrypt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LoginReq)
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mobile_type = 1;
    if (has_mobile_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_type());
    }

    // required uint32 net_type = 2;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_type());
    }

    // required string server_ram = 3;
    if (has_server_ram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ram());
    }

    // optional bytes secret_ram = 4;
    if (has_secret_ram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret_ram());
    }

    // optional uint32 app_id = 5 [default = 2000];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 heart_feq = 6 [default = 300];
    if (has_heart_feq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heart_feq());
    }

    // optional string deviceid = 7 [default = ""];
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string verf_code = 9;
    if (has_verf_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verf_code());
    }

    // optional bool not_encrypt = 10;
    if (has_not_encrypt()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobile_type()) {
      set_mobile_type(from.mobile_type());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
    if (from.has_server_ram()) {
      set_server_ram(from.server_ram());
    }
    if (from.has_secret_ram()) {
      set_secret_ram(from.secret_ram());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_heart_feq()) {
      set_heart_feq(from.heart_feq());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_verf_code()) {
      set_verf_code(from.verf_code());
    }
    if (from.has_not_encrypt()) {
      set_not_encrypt(from.not_encrypt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(mobile_type_, other->mobile_type_);
    std::swap(net_type_, other->net_type_);
    std::swap(server_ram_, other->server_ram_);
    std::swap(secret_ram_, other->secret_ram_);
    std::swap(app_id_, other->app_id_);
    std::swap(heart_feq_, other->heart_feq_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(platform_, other->platform_);
    std::swap(verf_code_, other->verf_code_);
    std::swap(not_encrypt_, other->not_encrypt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResp::kTimestampFieldNumber;
const int LoginResp::kSessionIdFieldNumber;
const int LoginResp::kSessionKeyFieldNumber;
const int LoginResp::kClientLoginIpFieldNumber;
const int LoginResp::kServeripFieldNumber;
#endif  // !_MSC_VER

LoginResp::LoginResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LoginResp)
}

void LoginResp::InitAsDefaultInstance() {
}

LoginResp::LoginResp(const LoginResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LoginResp)
}

void LoginResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0u;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResp::~LoginResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LoginResp)
  SharedDtor();
}

void LoginResp::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_key_;
  }
  if (client_login_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_login_ip_;
  }
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverip_;
  }
  if (this != default_instance_) {
  }
}

void LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResp_descriptor_;
}

const LoginResp& LoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

LoginResp* LoginResp::default_instance_ = NULL;

LoginResp* LoginResp::New() const {
  return new LoginResp;
}

void LoginResp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    timestamp_ = 0u;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_key_->clear();
      }
    }
    if (has_client_login_ip()) {
      if (client_login_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_login_ip_->clear();
      }
    }
    if (has_serverip()) {
      if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // required string session_key = 3;
      case 3: {
        if (tag == 26) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_login_ip;
        break;
      }

      // optional string client_login_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_client_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_login_ip().data(), this->client_login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_login_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_serverip;
        break;
      }

      // optional string serverip = 5;
      case 5: {
        if (tag == 42) {
         parse_serverip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LoginResp)
  return false;
#undef DO_
}

void LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LoginResp)
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_key(), output);
  }

  // optional string client_login_ip = 4;
  if (has_client_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_login_ip().data(), this->client_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_login_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_login_ip(), output);
  }

  // optional string serverip = 5;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LoginResp)
}

::google::protobuf::uint8* LoginResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LoginResp)
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_key(), target);
  }

  // optional string client_login_ip = 4;
  if (has_client_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_login_ip().data(), this->client_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_login_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_login_ip(), target);
  }

  // optional string serverip = 5;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LoginResp)
  return target;
}

int LoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required string session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional string client_login_ip = 4;
    if (has_client_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_login_ip());
    }

    // optional string serverip = 5;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResp::MergeFrom(const LoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_client_login_ip()) {
      set_client_login_ip(from.client_login_ip());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResp::CopyFrom(const LoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LoginResp::Swap(LoginResp* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(session_id_, other->session_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(client_login_ip_, other->client_login_ip_);
    std::swap(serverip_, other->serverip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResp_descriptor_;
  metadata.reflection = LoginResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatReq::kBodyFieldNumber;
const int ChatReq::kBodyIdFieldNumber;
const int ChatReq::kMoreFlagFieldNumber;
const int ChatReq::kBodyTypeFieldNumber;
const int ChatReq::kStoreFieldNumber;
const int ChatReq::kMParameterFieldNumber;
const int ChatReq::kServiceIdFieldNumber;
const int ChatReq::kSParameterFieldNumber;
const int ChatReq::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

ChatReq::ChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ChatReq)
}

void ChatReq::InitAsDefaultInstance() {
}

ChatReq::ChatReq(const ChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ChatReq)
}

void ChatReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_id_ = 0u;
  more_flag_ = 0u;
  body_type_ = 0u;
  store_ = false;
  m_parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_id_ = 0u;
  s_parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReq::~ChatReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ChatReq)
  SharedDtor();
}

void ChatReq::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (m_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_parameter_;
  }
  if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_parameter_;
  }
  if (this != default_instance_) {
  }
}

void ChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatReq_descriptor_;
}

const ChatReq& ChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

ChatReq* ChatReq::default_instance_ = NULL;

ChatReq* ChatReq::New() const {
  return new ChatReq;
}

void ChatReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(body_id_, store_);
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    if (has_m_parameter()) {
      if (m_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_parameter_->clear();
      }
    }
    service_id_ = 0u;
    if (has_s_parameter()) {
      if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_parameter_->clear();
      }
    }
  }
  expire_time_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ChatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes body = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_body_id;
        break;
      }

      // optional uint32 body_id = 2;
      case 2: {
        if (tag == 16) {
         parse_body_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_id_)));
          set_has_body_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_more_flag;
        break;
      }

      // optional uint32 more_flag = 3;
      case 3: {
        if (tag == 24) {
         parse_more_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &more_flag_)));
          set_has_more_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_body_type;
        break;
      }

      // required uint32 body_type = 4;
      case 4: {
        if (tag == 32) {
         parse_body_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_type_)));
          set_has_body_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_store;
        break;
      }

      // optional bool store = 5;
      case 5: {
        if (tag == 40) {
         parse_store:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_)));
          set_has_store();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_m_parameter;
        break;
      }

      // optional bytes m_parameter = 6;
      case 6: {
        if (tag == 50) {
         parse_m_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 7;
      case 7: {
        if (tag == 56) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_s_parameter;
        break;
      }

      // optional bytes s_parameter = 8;
      case 8: {
        if (tag == 66) {
         parse_s_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_expire_time;
        break;
      }

      // optional uint32 expire_time = 12;
      case 12: {
        if (tag == 96) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ChatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ChatReq)
  return false;
#undef DO_
}

void ChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ChatReq)
  // required bytes body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->body(), output);
  }

  // optional uint32 body_id = 2;
  if (has_body_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body_id(), output);
  }

  // optional uint32 more_flag = 3;
  if (has_more_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->more_flag(), output);
  }

  // required uint32 body_type = 4;
  if (has_body_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->body_type(), output);
  }

  // optional bool store = 5;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->store(), output);
  }

  // optional bytes m_parameter = 6;
  if (has_m_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->m_parameter(), output);
  }

  // optional uint32 service_id = 7;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->service_id(), output);
  }

  // optional bytes s_parameter = 8;
  if (has_s_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->s_parameter(), output);
  }

  // optional uint32 expire_time = 12;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->expire_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ChatReq)
}

::google::protobuf::uint8* ChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ChatReq)
  // required bytes body = 1;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->body(), target);
  }

  // optional uint32 body_id = 2;
  if (has_body_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body_id(), target);
  }

  // optional uint32 more_flag = 3;
  if (has_more_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->more_flag(), target);
  }

  // required uint32 body_type = 4;
  if (has_body_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->body_type(), target);
  }

  // optional bool store = 5;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->store(), target);
  }

  // optional bytes m_parameter = 6;
  if (has_m_parameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->m_parameter(), target);
  }

  // optional uint32 service_id = 7;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->service_id(), target);
  }

  // optional bytes s_parameter = 8;
  if (has_s_parameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->s_parameter(), target);
  }

  // optional uint32 expire_time = 12;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->expire_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ChatReq)
  return target;
}

int ChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 body_id = 2;
    if (has_body_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_id());
    }

    // optional uint32 more_flag = 3;
    if (has_more_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->more_flag());
    }

    // required uint32 body_type = 4;
    if (has_body_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_type());
    }

    // optional bool store = 5;
    if (has_store()) {
      total_size += 1 + 1;
    }

    // optional bytes m_parameter = 6;
    if (has_m_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_parameter());
    }

    // optional uint32 service_id = 7;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional bytes s_parameter = 8;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 expire_time = 12;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatReq::MergeFrom(const ChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_body_id()) {
      set_body_id(from.body_id());
    }
    if (from.has_more_flag()) {
      set_more_flag(from.more_flag());
    }
    if (from.has_body_type()) {
      set_body_type(from.body_type());
    }
    if (from.has_store()) {
      set_store(from.store());
    }
    if (from.has_m_parameter()) {
      set_m_parameter(from.m_parameter());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_s_parameter()) {
      set_s_parameter(from.s_parameter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReq::CopyFrom(const ChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void ChatReq::Swap(ChatReq* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(body_id_, other->body_id_);
    std::swap(more_flag_, other->more_flag_);
    std::swap(body_type_, other->body_type_);
    std::swap(store_, other->store_);
    std::swap(m_parameter_, other->m_parameter_);
    std::swap(service_id_, other->service_id_);
    std::swap(s_parameter_, other->s_parameter_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatReq_descriptor_;
  metadata.reflection = ChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatResp::kResultFieldNumber;
const int ChatResp::kBodyIdFieldNumber;
#endif  // !_MSC_VER

ChatResp::ChatResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ChatResp)
}

void ChatResp::InitAsDefaultInstance() {
}

ChatResp::ChatResp(const ChatResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ChatResp)
}

void ChatResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  body_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatResp::~ChatResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ChatResp)
  SharedDtor();
}

void ChatResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatResp_descriptor_;
}

const ChatResp& ChatResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

ChatResp* ChatResp::default_instance_ = NULL;

ChatResp* ChatResp::New() const {
  return new ChatResp;
}

void ChatResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, body_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ChatResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_body_id;
        break;
      }

      // optional uint32 body_id = 2;
      case 2: {
        if (tag == 16) {
         parse_body_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_id_)));
          set_has_body_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ChatResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ChatResp)
  return false;
#undef DO_
}

void ChatResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ChatResp)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 body_id = 2;
  if (has_body_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ChatResp)
}

::google::protobuf::uint8* ChatResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ChatResp)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 body_id = 2;
  if (has_body_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ChatResp)
  return target;
}

int ChatResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 body_id = 2;
    if (has_body_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatResp::MergeFrom(const ChatResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_body_id()) {
      set_body_id(from.body_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatResp::CopyFrom(const ChatResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatResp::Swap(ChatResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(body_id_, other->body_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatResp_descriptor_;
  metadata.reflection = ChatResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInfoReq::kInfoTypeFieldNumber;
const int GetInfoReq::kGetInfoIdFieldNumber;
const int GetInfoReq::kGetInfoOffsetFieldNumber;
const int GetInfoReq::kSParameterFieldNumber;
#endif  // !_MSC_VER

GetInfoReq::GetInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetInfoReq)
}

void GetInfoReq::InitAsDefaultInstance() {
}

GetInfoReq::GetInfoReq(const GetInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetInfoReq)
}

void GetInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_info_id_ = GOOGLE_LONGLONG(0);
  get_info_offset_ = 0;
  s_parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInfoReq::~GetInfoReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetInfoReq)
  SharedDtor();
}

void GetInfoReq::SharedDtor() {
  if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_type_;
  }
  if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_parameter_;
  }
  if (this != default_instance_) {
  }
}

void GetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfoReq_descriptor_;
}

const GetInfoReq& GetInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

GetInfoReq* GetInfoReq::default_instance_ = NULL;

GetInfoReq* GetInfoReq::New() const {
  return new GetInfoReq;
}

void GetInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_info_type()) {
      if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_type_->clear();
      }
    }
    get_info_id_ = GOOGLE_LONGLONG(0);
    get_info_offset_ = 0;
    if (has_s_parameter()) {
      if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_parameter_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_get_info_id;
        break;
      }

      // required int64 get_info_id = 2;
      case 2: {
        if (tag == 16) {
         parse_get_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &get_info_id_)));
          set_has_get_info_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_get_info_offset;
        break;
      }

      // optional int32 get_info_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_get_info_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_info_offset_)));
          set_has_get_info_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s_parameter;
        break;
      }

      // optional bytes s_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_s_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetInfoReq)
  return false;
#undef DO_
}

void GetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetInfoReq)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // required int64 get_info_id = 2;
  if (has_get_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->get_info_id(), output);
  }

  // optional int32 get_info_offset = 3;
  if (has_get_info_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_info_offset(), output);
  }

  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s_parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetInfoReq)
}

::google::protobuf::uint8* GetInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetInfoReq)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // required int64 get_info_id = 2;
  if (has_get_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->get_info_id(), target);
  }

  // optional int32 get_info_offset = 3;
  if (has_get_info_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_info_offset(), target);
  }

  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s_parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetInfoReq)
  return target;
}

int GetInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info_type = 1;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_type());
    }

    // required int64 get_info_id = 2;
    if (has_get_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get_info_id());
    }

    // optional int32 get_info_offset = 3;
    if (has_get_info_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_info_offset());
    }

    // optional bytes s_parameter = 4;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInfoReq::MergeFrom(const GetInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_get_info_id()) {
      set_get_info_id(from.get_info_id());
    }
    if (from.has_get_info_offset()) {
      set_get_info_offset(from.get_info_offset());
    }
    if (from.has_s_parameter()) {
      set_s_parameter(from.s_parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoReq::CopyFrom(const GetInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetInfoReq::Swap(GetInfoReq* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    std::swap(get_info_id_, other->get_info_id_);
    std::swap(get_info_offset_, other->get_info_offset_);
    std::swap(s_parameter_, other->s_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfoReq_descriptor_;
  metadata.reflection = GetInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInfoResp::kInfoTypeFieldNumber;
const int GetInfoResp::kInfosFieldNumber;
const int GetInfoResp::kLastInfoIdFieldNumber;
const int GetInfoResp::kSParameterFieldNumber;
#endif  // !_MSC_VER

GetInfoResp::GetInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetInfoResp)
}

void GetInfoResp::InitAsDefaultInstance() {
}

GetInfoResp::GetInfoResp(const GetInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetInfoResp)
}

void GetInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_info_id_ = GOOGLE_LONGLONG(0);
  s_parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInfoResp::~GetInfoResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetInfoResp)
  SharedDtor();
}

void GetInfoResp::SharedDtor() {
  if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_type_;
  }
  if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_parameter_;
  }
  if (this != default_instance_) {
  }
}

void GetInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfoResp_descriptor_;
}

const GetInfoResp& GetInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

GetInfoResp* GetInfoResp::default_instance_ = NULL;

GetInfoResp* GetInfoResp::New() const {
  return new GetInfoResp;
}

void GetInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_info_type()) {
      if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_type_->clear();
      }
    }
    last_info_id_ = GOOGLE_LONGLONG(0);
    if (has_s_parameter()) {
      if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_parameter_->clear();
      }
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .qihoo.protocol.messages.Info infos = 2;
      case 2: {
        if (tag == 18) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_last_info_id;
        break;
      }

      // optional int64 last_info_id = 3;
      case 3: {
        if (tag == 24) {
         parse_last_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_info_id_)));
          set_has_last_info_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s_parameter;
        break;
      }

      // optional bytes s_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_s_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetInfoResp)
  return false;
#undef DO_
}

void GetInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetInfoResp)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int64 last_info_id = 3;
  if (has_last_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_info_id(), output);
  }

  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s_parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetInfoResp)
}

::google::protobuf::uint8* GetInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetInfoResp)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int64 last_info_id = 3;
  if (has_last_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_info_id(), target);
  }

  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s_parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetInfoResp)
  return target;
}

int GetInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info_type = 1;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_type());
    }

    // optional int64 last_info_id = 3;
    if (has_last_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_info_id());
    }

    // optional bytes s_parameter = 4;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

  }
  // repeated .qihoo.protocol.messages.Info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInfoResp::MergeFrom(const GetInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_last_info_id()) {
      set_last_info_id(from.last_info_id());
    }
    if (from.has_s_parameter()) {
      set_s_parameter(from.s_parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResp::CopyFrom(const GetInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void GetInfoResp::Swap(GetInfoResp* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    infos_.Swap(&other->infos_);
    std::swap(last_info_id_, other->last_info_id_);
    std::swap(s_parameter_, other->s_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfoResp_descriptor_;
  metadata.reflection = GetInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMultiInfosReq::kInfoTypeFieldNumber;
const int GetMultiInfosReq::kGetInfoIdsFieldNumber;
const int GetMultiInfosReq::kSParameterFieldNumber;
#endif  // !_MSC_VER

GetMultiInfosReq::GetMultiInfosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetMultiInfosReq)
}

void GetMultiInfosReq::InitAsDefaultInstance() {
}

GetMultiInfosReq::GetMultiInfosReq(const GetMultiInfosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetMultiInfosReq)
}

void GetMultiInfosReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMultiInfosReq::~GetMultiInfosReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetMultiInfosReq)
  SharedDtor();
}

void GetMultiInfosReq::SharedDtor() {
  if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_type_;
  }
  if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_parameter_;
  }
  if (this != default_instance_) {
  }
}

void GetMultiInfosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMultiInfosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMultiInfosReq_descriptor_;
}

const GetMultiInfosReq& GetMultiInfosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

GetMultiInfosReq* GetMultiInfosReq::default_instance_ = NULL;

GetMultiInfosReq* GetMultiInfosReq::New() const {
  return new GetMultiInfosReq;
}

void GetMultiInfosReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_info_type()) {
      if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_type_->clear();
      }
    }
    if (has_s_parameter()) {
      if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_parameter_->clear();
      }
    }
  }
  get_info_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMultiInfosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetMultiInfosReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_get_info_ids;
        break;
      }

      // repeated int64 get_info_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_get_info_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_get_info_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_get_info_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_get_info_ids;
        if (input->ExpectTag(26)) goto parse_s_parameter;
        break;
      }

      // optional bytes s_parameter = 3;
      case 3: {
        if (tag == 26) {
         parse_s_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetMultiInfosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetMultiInfosReq)
  return false;
#undef DO_
}

void GetMultiInfosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetMultiInfosReq)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // repeated int64 get_info_ids = 2;
  for (int i = 0; i < this->get_info_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->get_info_ids(i), output);
  }

  // optional bytes s_parameter = 3;
  if (has_s_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->s_parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetMultiInfosReq)
}

::google::protobuf::uint8* GetMultiInfosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetMultiInfosReq)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // repeated int64 get_info_ids = 2;
  for (int i = 0; i < this->get_info_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->get_info_ids(i), target);
  }

  // optional bytes s_parameter = 3;
  if (has_s_parameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->s_parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetMultiInfosReq)
  return target;
}

int GetMultiInfosReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info_type = 1;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_type());
    }

    // optional bytes s_parameter = 3;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

  }
  // repeated int64 get_info_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_info_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->get_info_ids(i));
    }
    total_size += 1 * this->get_info_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMultiInfosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMultiInfosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMultiInfosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMultiInfosReq::MergeFrom(const GetMultiInfosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_info_ids_.MergeFrom(from.get_info_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_s_parameter()) {
      set_s_parameter(from.s_parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMultiInfosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiInfosReq::CopyFrom(const GetMultiInfosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiInfosReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetMultiInfosReq::Swap(GetMultiInfosReq* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    get_info_ids_.Swap(&other->get_info_ids_);
    std::swap(s_parameter_, other->s_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMultiInfosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMultiInfosReq_descriptor_;
  metadata.reflection = GetMultiInfosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMultiInfosResp::kInfoTypeFieldNumber;
const int GetMultiInfosResp::kInfosFieldNumber;
const int GetMultiInfosResp::kLastInfoIdFieldNumber;
const int GetMultiInfosResp::kSParameterFieldNumber;
#endif  // !_MSC_VER

GetMultiInfosResp::GetMultiInfosResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetMultiInfosResp)
}

void GetMultiInfosResp::InitAsDefaultInstance() {
}

GetMultiInfosResp::GetMultiInfosResp(const GetMultiInfosResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetMultiInfosResp)
}

void GetMultiInfosResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_info_id_ = GOOGLE_LONGLONG(0);
  s_parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMultiInfosResp::~GetMultiInfosResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetMultiInfosResp)
  SharedDtor();
}

void GetMultiInfosResp::SharedDtor() {
  if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_type_;
  }
  if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_parameter_;
  }
  if (this != default_instance_) {
  }
}

void GetMultiInfosResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMultiInfosResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMultiInfosResp_descriptor_;
}

const GetMultiInfosResp& GetMultiInfosResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

GetMultiInfosResp* GetMultiInfosResp::default_instance_ = NULL;

GetMultiInfosResp* GetMultiInfosResp::New() const {
  return new GetMultiInfosResp;
}

void GetMultiInfosResp::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_info_type()) {
      if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_type_->clear();
      }
    }
    last_info_id_ = GOOGLE_LONGLONG(0);
    if (has_s_parameter()) {
      if (s_parameter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_parameter_->clear();
      }
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMultiInfosResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetMultiInfosResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .qihoo.protocol.messages.Info infos = 2;
      case 2: {
        if (tag == 18) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_last_info_id;
        break;
      }

      // optional int64 last_info_id = 3;
      case 3: {
        if (tag == 24) {
         parse_last_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_info_id_)));
          set_has_last_info_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s_parameter;
        break;
      }

      // optional bytes s_parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_s_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetMultiInfosResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetMultiInfosResp)
  return false;
#undef DO_
}

void GetMultiInfosResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetMultiInfosResp)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int64 last_info_id = 3;
  if (has_last_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_info_id(), output);
  }

  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s_parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetMultiInfosResp)
}

::google::protobuf::uint8* GetMultiInfosResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetMultiInfosResp)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int64 last_info_id = 3;
  if (has_last_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_info_id(), target);
  }

  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s_parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetMultiInfosResp)
  return target;
}

int GetMultiInfosResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info_type = 1;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_type());
    }

    // optional int64 last_info_id = 3;
    if (has_last_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_info_id());
    }

    // optional bytes s_parameter = 4;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

  }
  // repeated .qihoo.protocol.messages.Info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMultiInfosResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMultiInfosResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMultiInfosResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMultiInfosResp::MergeFrom(const GetMultiInfosResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_last_info_id()) {
      set_last_info_id(from.last_info_id());
    }
    if (from.has_s_parameter()) {
      set_s_parameter(from.s_parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMultiInfosResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiInfosResp::CopyFrom(const GetMultiInfosResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiInfosResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void GetMultiInfosResp::Swap(GetMultiInfosResp* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    infos_.Swap(&other->infos_);
    std::swap(last_info_id_, other->last_info_id_);
    std::swap(s_parameter_, other->s_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMultiInfosResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMultiInfosResp_descriptor_;
  metadata.reflection = GetMultiInfosResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutReq::kReasonFieldNumber;
#endif  // !_MSC_VER

LogoutReq::LogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LogoutReq)
}

void LogoutReq::InitAsDefaultInstance() {
}

LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LogoutReq)
}

void LogoutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LogoutReq)
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void LogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReq_descriptor_;
}

const LogoutReq& LogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

LogoutReq* LogoutReq::default_instance_ = NULL;

LogoutReq* LogoutReq::New() const {
  return new LogoutReq;
}

void LogoutReq::Clear() {
  if (has_reason()) {
    if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      reason_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LogoutReq)
  return false;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LogoutReq)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LogoutReq)
}

::google::protobuf::uint8* LogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LogoutReq)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LogoutReq)
  return target;
}

int LogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {

  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutReq_descriptor_;
  metadata.reflection = LogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResp::kResultFieldNumber;
#endif  // !_MSC_VER

LogoutResp::LogoutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LogoutResp)
}

void LogoutResp::InitAsDefaultInstance() {
}

LogoutResp::LogoutResp(const LogoutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LogoutResp)
}

void LogoutResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResp::~LogoutResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LogoutResp)
  SharedDtor();
}

void LogoutResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResp_descriptor_;
}

const LogoutResp& LogoutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

LogoutResp* LogoutResp::default_instance_ = NULL;

LogoutResp* LogoutResp::New() const {
  return new LogoutResp;
}

void LogoutResp::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LogoutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LogoutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LogoutResp)
  return false;
#undef DO_
}

void LogoutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LogoutResp)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LogoutResp)
}

::google::protobuf::uint8* LogoutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LogoutResp)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LogoutResp)
  return target;
}

int LogoutResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResp::MergeFrom(const LogoutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResp::CopyFrom(const LogoutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogoutResp::Swap(LogoutResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResp_descriptor_;
  metadata.reflection = LogoutResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitLoginReq::kClientRamFieldNumber;
const int InitLoginReq::kSigFieldNumber;
#endif  // !_MSC_VER

InitLoginReq::InitLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.InitLoginReq)
}

void InitLoginReq::InitAsDefaultInstance() {
}

InitLoginReq::InitLoginReq(const InitLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.InitLoginReq)
}

void InitLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_ram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitLoginReq::~InitLoginReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.InitLoginReq)
  SharedDtor();
}

void InitLoginReq::SharedDtor() {
  if (client_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ram_;
  }
  if (sig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void InitLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitLoginReq_descriptor_;
}

const InitLoginReq& InitLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

InitLoginReq* InitLoginReq::default_instance_ = NULL;

InitLoginReq* InitLoginReq::New() const {
  return new InitLoginReq;
}

void InitLoginReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_client_ram()) {
      if (client_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ram_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.InitLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_ram = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ram().data(), this->client_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_ram");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sig;
        break;
      }

      // optional string sig = 2;
      case 2: {
        if (tag == 18) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.InitLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.InitLoginReq)
  return false;
#undef DO_
}

void InitLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.InitLoginReq)
  // required string client_ram = 1;
  if (has_client_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ram(), output);
  }

  // optional string sig = 2;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.InitLoginReq)
}

::google::protobuf::uint8* InitLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.InitLoginReq)
  // required string client_ram = 1;
  if (has_client_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ram(), target);
  }

  // optional string sig = 2;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.InitLoginReq)
  return target;
}

int InitLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string client_ram = 1;
    if (has_client_ram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ram());
    }

    // optional string sig = 2;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitLoginReq::MergeFrom(const InitLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_ram()) {
      set_client_ram(from.client_ram());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitLoginReq::CopyFrom(const InitLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitLoginReq::Swap(InitLoginReq* other) {
  if (other != this) {
    std::swap(client_ram_, other->client_ram_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitLoginReq_descriptor_;
  metadata.reflection = InitLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitLoginResp::kClientRamFieldNumber;
const int InitLoginResp::kServerRamFieldNumber;
#endif  // !_MSC_VER

InitLoginResp::InitLoginResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.InitLoginResp)
}

void InitLoginResp::InitAsDefaultInstance() {
}

InitLoginResp::InitLoginResp(const InitLoginResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.InitLoginResp)
}

void InitLoginResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_ram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitLoginResp::~InitLoginResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.InitLoginResp)
  SharedDtor();
}

void InitLoginResp::SharedDtor() {
  if (client_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ram_;
  }
  if (server_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ram_;
  }
  if (this != default_instance_) {
  }
}

void InitLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitLoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitLoginResp_descriptor_;
}

const InitLoginResp& InitLoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

InitLoginResp* InitLoginResp::default_instance_ = NULL;

InitLoginResp* InitLoginResp::New() const {
  return new InitLoginResp;
}

void InitLoginResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_client_ram()) {
      if (client_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ram_->clear();
      }
    }
    if (has_server_ram()) {
      if (server_ram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_ram_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.InitLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_ram = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ram().data(), this->client_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_ram");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_ram;
        break;
      }

      // required string server_ram = 2;
      case 2: {
        if (tag == 18) {
         parse_server_ram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ram().data(), this->server_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_ram");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.InitLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.InitLoginResp)
  return false;
#undef DO_
}

void InitLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.InitLoginResp)
  // required string client_ram = 1;
  if (has_client_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ram(), output);
  }

  // required string server_ram = 2;
  if (has_server_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_ram(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.InitLoginResp)
}

::google::protobuf::uint8* InitLoginResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.InitLoginResp)
  // required string client_ram = 1;
  if (has_client_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ram(), target);
  }

  // required string server_ram = 2;
  if (has_server_ram()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_ram(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.InitLoginResp)
  return target;
}

int InitLoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string client_ram = 1;
    if (has_client_ram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ram());
    }

    // required string server_ram = 2;
    if (has_server_ram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ram());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitLoginResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitLoginResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitLoginResp::MergeFrom(const InitLoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_ram()) {
      set_client_ram(from.client_ram());
    }
    if (from.has_server_ram()) {
      set_server_ram(from.server_ram());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitLoginResp::CopyFrom(const InitLoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitLoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitLoginResp::Swap(InitLoginResp* other) {
  if (other != this) {
    std::swap(client_ram_, other->client_ram_);
    std::swap(server_ram_, other->server_ram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitLoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitLoginResp_descriptor_;
  metadata.reflection = InitLoginResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Service_Req::kServiceIdFieldNumber;
const int Service_Req::kRequestFieldNumber;
#endif  // !_MSC_VER

Service_Req::Service_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Service_Req)
}

void Service_Req::InitAsDefaultInstance() {
}

Service_Req::Service_Req(const Service_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Service_Req)
}

void Service_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_id_ = 0u;
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service_Req::~Service_Req() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Service_Req)
  SharedDtor();
}

void Service_Req::SharedDtor() {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (this != default_instance_) {
  }
}

void Service_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_Req_descriptor_;
}

const Service_Req& Service_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Service_Req* Service_Req::default_instance_ = NULL;

Service_Req* Service_Req::New() const {
  return new Service_Req;
}

void Service_Req::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    service_id_ = 0u;
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Service_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Service_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 service_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // required bytes request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Service_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Service_Req)
  return false;
#undef DO_
}

void Service_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Service_Req)
  // required uint32 service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // required bytes request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Service_Req)
}

::google::protobuf::uint8* Service_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Service_Req)
  // required uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // required bytes request = 2;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Service_Req)
  return target;
}

int Service_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // required bytes request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Service_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Service_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Service_Req::MergeFrom(const Service_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Service_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service_Req::CopyFrom(const Service_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Service_Req::Swap(Service_Req* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Service_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_Req_descriptor_;
  metadata.reflection = Service_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Service_Resp::kServiceIdFieldNumber;
const int Service_Resp::kResponseFieldNumber;
#endif  // !_MSC_VER

Service_Resp::Service_Resp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Service_Resp)
}

void Service_Resp::InitAsDefaultInstance() {
}

Service_Resp::Service_Resp(const Service_Resp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Service_Resp)
}

void Service_Resp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_id_ = 0u;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service_Resp::~Service_Resp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Service_Resp)
  SharedDtor();
}

void Service_Resp::SharedDtor() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void Service_Resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service_Resp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_Resp_descriptor_;
}

const Service_Resp& Service_Resp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Service_Resp* Service_Resp::default_instance_ = NULL;

Service_Resp* Service_Resp::New() const {
  return new Service_Resp;
}

void Service_Resp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    service_id_ = 0u;
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Service_Resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Service_Resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 service_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // required bytes response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Service_Resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Service_Resp)
  return false;
#undef DO_
}

void Service_Resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Service_Resp)
  // required uint32 service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // required bytes response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Service_Resp)
}

::google::protobuf::uint8* Service_Resp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Service_Resp)
  // required uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // required bytes response = 2;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Service_Resp)
  return target;
}

int Service_Resp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // required bytes response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service_Resp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Service_Resp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Service_Resp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Service_Resp::MergeFrom(const Service_Resp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Service_Resp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service_Resp::CopyFrom(const Service_Resp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service_Resp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Service_Resp::Swap(Service_Resp* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Service_Resp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_Resp_descriptor_;
  metadata.reflection = Service_Resp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEQ1User::kUseridFieldNumber;
const int ReqEQ1User::kUserTypeFieldNumber;
const int ReqEQ1User::kAppIdFieldNumber;
#endif  // !_MSC_VER

ReqEQ1User::ReqEQ1User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ReqEQ1User)
}

void ReqEQ1User::InitAsDefaultInstance() {
}

ReqEQ1User::ReqEQ1User(const ReqEQ1User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ReqEQ1User)
}

void ReqEQ1User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEQ1User::~ReqEQ1User() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ReqEQ1User)
  SharedDtor();
}

void ReqEQ1User::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_type_;
  }
  if (this != default_instance_) {
  }
}

void ReqEQ1User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEQ1User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEQ1User_descriptor_;
}

const ReqEQ1User& ReqEQ1User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

ReqEQ1User* ReqEQ1User::default_instance_ = NULL;

ReqEQ1User* ReqEQ1User::New() const {
  return new ReqEQ1User;
}

void ReqEQ1User::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    if (has_user_type()) {
      if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_type_->clear();
      }
    }
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEQ1User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ReqEQ1User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_type;
        break;
      }

      // required string user_type = 2;
      case 2: {
        if (tag == 18) {
         parse_user_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_type().data(), this->user_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (tag == 24) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ReqEQ1User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ReqEQ1User)
  return false;
#undef DO_
}

void ReqEQ1User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ReqEQ1User)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string user_type = 2;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ReqEQ1User)
}

::google::protobuf::uint8* ReqEQ1User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ReqEQ1User)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string user_type = 2;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ReqEQ1User)
  return target;
}

int ReqEQ1User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string user_type = 2;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_type());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEQ1User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEQ1User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEQ1User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEQ1User::MergeFrom(const ReqEQ1User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEQ1User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEQ1User::CopyFrom(const ReqEQ1User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEQ1User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqEQ1User::Swap(ReqEQ1User* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(user_type_, other->user_type_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEQ1User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEQ1User_descriptor_;
  metadata.reflection = ReqEQ1User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespEQ1User::kUseridFieldNumber;
const int RespEQ1User::kUserTypeFieldNumber;
const int RespEQ1User::kStatusFieldNumber;
const int RespEQ1User::kJidFieldNumber;
const int RespEQ1User::kAppIdFieldNumber;
const int RespEQ1User::kPlatformFieldNumber;
const int RespEQ1User::kMobileTypeFieldNumber;
const int RespEQ1User::kClientVerFieldNumber;
#endif  // !_MSC_VER

RespEQ1User::RespEQ1User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.RespEQ1User)
}

void RespEQ1User::InitAsDefaultInstance() {
}

RespEQ1User::RespEQ1User(const RespEQ1User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.RespEQ1User)
}

void RespEQ1User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespEQ1User::~RespEQ1User() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.RespEQ1User)
  SharedDtor();
}

void RespEQ1User::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_type_;
  }
  if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jid_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (mobile_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_type_;
  }
  if (this != default_instance_) {
  }
}

void RespEQ1User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespEQ1User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespEQ1User_descriptor_;
}

const RespEQ1User& RespEQ1User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

RespEQ1User* RespEQ1User::default_instance_ = NULL;

RespEQ1User* RespEQ1User::New() const {
  return new RespEQ1User;
}

void RespEQ1User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RespEQ1User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, app_id_);
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    if (has_user_type()) {
      if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_type_->clear();
      }
    }
    if (has_jid()) {
      if (jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jid_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_mobile_type()) {
      if (mobile_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_type_->clear();
      }
    }
    client_ver_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespEQ1User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.RespEQ1User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_type;
        break;
      }

      // required string user_type = 2;
      case 2: {
        if (tag == 18) {
         parse_user_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_type().data(), this->user_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_jid;
        break;
      }

      // optional string jid = 4;
      case 4: {
        if (tag == 34) {
         parse_jid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jid().data(), this->jid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 5;
      case 5: {
        if (tag == 40) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_platform;
        break;
      }

      // optional string platform = 6;
      case 6: {
        if (tag == 50) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mobile_type;
        break;
      }

      // optional string mobile_type = 7;
      case 7: {
        if (tag == 58) {
         parse_mobile_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile_type().data(), this->mobile_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_client_ver;
        break;
      }

      // optional uint32 client_ver = 8;
      case 8: {
        if (tag == 64) {
         parse_client_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ver_)));
          set_has_client_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.RespEQ1User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.RespEQ1User)
  return false;
#undef DO_
}

void RespEQ1User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.RespEQ1User)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string user_type = 2;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional string jid = 4;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jid().data(), this->jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jid(), output);
  }

  // optional uint32 app_id = 5;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->app_id(), output);
  }

  // optional string platform = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->platform(), output);
  }

  // optional string mobile_type = 7;
  if (has_mobile_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mobile_type(), output);
  }

  // optional uint32 client_ver = 8;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.RespEQ1User)
}

::google::protobuf::uint8* RespEQ1User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.RespEQ1User)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string user_type = 2;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional string jid = 4;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jid().data(), this->jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jid(), target);
  }

  // optional uint32 app_id = 5;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->app_id(), target);
  }

  // optional string platform = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platform(), target);
  }

  // optional string mobile_type = 7;
  if (has_mobile_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mobile_type(), target);
  }

  // optional uint32 client_ver = 8;
  if (has_client_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.RespEQ1User)
  return target;
}

int RespEQ1User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string user_type = 2;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_type());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string jid = 4;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jid());
    }

    // optional uint32 app_id = 5;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string platform = 6;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string mobile_type = 7;
    if (has_mobile_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_type());
    }

    // optional uint32 client_ver = 8;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespEQ1User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespEQ1User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespEQ1User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespEQ1User::MergeFrom(const RespEQ1User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_jid()) {
      set_jid(from.jid());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_mobile_type()) {
      set_mobile_type(from.mobile_type());
    }
    if (from.has_client_ver()) {
      set_client_ver(from.client_ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespEQ1User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespEQ1User::CopyFrom(const RespEQ1User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespEQ1User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RespEQ1User::Swap(RespEQ1User* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(user_type_, other->user_type_);
    std::swap(status_, other->status_);
    std::swap(jid_, other->jid_);
    std::swap(app_id_, other->app_id_);
    std::swap(platform_, other->platform_);
    std::swap(mobile_type_, other->mobile_type_);
    std::swap(client_ver_, other->client_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespEQ1User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespEQ1User_descriptor_;
  metadata.reflection = RespEQ1User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ex1QueryUserStatusReq::kUserListFieldNumber;
#endif  // !_MSC_VER

Ex1QueryUserStatusReq::Ex1QueryUserStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Ex1QueryUserStatusReq)
}

void Ex1QueryUserStatusReq::InitAsDefaultInstance() {
}

Ex1QueryUserStatusReq::Ex1QueryUserStatusReq(const Ex1QueryUserStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Ex1QueryUserStatusReq)
}

void Ex1QueryUserStatusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ex1QueryUserStatusReq::~Ex1QueryUserStatusReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  SharedDtor();
}

void Ex1QueryUserStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ex1QueryUserStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ex1QueryUserStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ex1QueryUserStatusReq_descriptor_;
}

const Ex1QueryUserStatusReq& Ex1QueryUserStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Ex1QueryUserStatusReq* Ex1QueryUserStatusReq::default_instance_ = NULL;

Ex1QueryUserStatusReq* Ex1QueryUserStatusReq::New() const {
  return new Ex1QueryUserStatusReq;
}

void Ex1QueryUserStatusReq::Clear() {
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ex1QueryUserStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
      case 1: {
        if (tag == 10) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  return false;
#undef DO_
}

void Ex1QueryUserStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Ex1QueryUserStatusReq)
}

::google::protobuf::uint8* Ex1QueryUserStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  return target;
}

int Ex1QueryUserStatusReq::ByteSize() const {
  int total_size = 0;

  // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ex1QueryUserStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ex1QueryUserStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ex1QueryUserStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ex1QueryUserStatusReq::MergeFrom(const Ex1QueryUserStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ex1QueryUserStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ex1QueryUserStatusReq::CopyFrom(const Ex1QueryUserStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ex1QueryUserStatusReq::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void Ex1QueryUserStatusReq::Swap(Ex1QueryUserStatusReq* other) {
  if (other != this) {
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ex1QueryUserStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ex1QueryUserStatusReq_descriptor_;
  metadata.reflection = Ex1QueryUserStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ex1QueryUserStatusResp::kUserListFieldNumber;
#endif  // !_MSC_VER

Ex1QueryUserStatusResp::Ex1QueryUserStatusResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Ex1QueryUserStatusResp)
}

void Ex1QueryUserStatusResp::InitAsDefaultInstance() {
}

Ex1QueryUserStatusResp::Ex1QueryUserStatusResp(const Ex1QueryUserStatusResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Ex1QueryUserStatusResp)
}

void Ex1QueryUserStatusResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ex1QueryUserStatusResp::~Ex1QueryUserStatusResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  SharedDtor();
}

void Ex1QueryUserStatusResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ex1QueryUserStatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ex1QueryUserStatusResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ex1QueryUserStatusResp_descriptor_;
}

const Ex1QueryUserStatusResp& Ex1QueryUserStatusResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Ex1QueryUserStatusResp* Ex1QueryUserStatusResp::default_instance_ = NULL;

Ex1QueryUserStatusResp* Ex1QueryUserStatusResp::New() const {
  return new Ex1QueryUserStatusResp;
}

void Ex1QueryUserStatusResp::Clear() {
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ex1QueryUserStatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
      case 1: {
        if (tag == 10) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  return false;
#undef DO_
}

void Ex1QueryUserStatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Ex1QueryUserStatusResp)
}

::google::protobuf::uint8* Ex1QueryUserStatusResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  return target;
}

int Ex1QueryUserStatusResp::ByteSize() const {
  int total_size = 0;

  // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ex1QueryUserStatusResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ex1QueryUserStatusResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ex1QueryUserStatusResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ex1QueryUserStatusResp::MergeFrom(const Ex1QueryUserStatusResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ex1QueryUserStatusResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ex1QueryUserStatusResp::CopyFrom(const Ex1QueryUserStatusResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ex1QueryUserStatusResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void Ex1QueryUserStatusResp::Swap(Ex1QueryUserStatusResp* other) {
  if (other != this) {
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ex1QueryUserStatusResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ex1QueryUserStatusResp_descriptor_;
  metadata.reflection = Ex1QueryUserStatusResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kLoginFieldNumber;
const int Request::kChatFieldNumber;
const int Request::kGetInfoFieldNumber;
const int Request::kLogoutFieldNumber;
const int Request::kInitLoginReqFieldNumber;
const int Request::kServiceReqFieldNumber;
const int Request::kE1QueryUserFieldNumber;
const int Request::kGetMultiInfosFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Request)
}

void Request::InitAsDefaultInstance() {
  login_ = const_cast< ::qihoo::protocol::messages::LoginReq*>(&::qihoo::protocol::messages::LoginReq::default_instance());
  chat_ = const_cast< ::qihoo::protocol::messages::ChatReq*>(&::qihoo::protocol::messages::ChatReq::default_instance());
  get_info_ = const_cast< ::qihoo::protocol::messages::GetInfoReq*>(&::qihoo::protocol::messages::GetInfoReq::default_instance());
  logout_ = const_cast< ::qihoo::protocol::messages::LogoutReq*>(&::qihoo::protocol::messages::LogoutReq::default_instance());
  init_login_req_ = const_cast< ::qihoo::protocol::messages::InitLoginReq*>(&::qihoo::protocol::messages::InitLoginReq::default_instance());
  service_req_ = const_cast< ::qihoo::protocol::messages::Service_Req*>(&::qihoo::protocol::messages::Service_Req::default_instance());
  e1_query_user_ = const_cast< ::qihoo::protocol::messages::Ex1QueryUserStatusReq*>(&::qihoo::protocol::messages::Ex1QueryUserStatusReq::default_instance());
  get_multi_infos_ = const_cast< ::qihoo::protocol::messages::GetMultiInfosReq*>(&::qihoo::protocol::messages::GetMultiInfosReq::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  login_ = NULL;
  chat_ = NULL;
  get_info_ = NULL;
  logout_ = NULL;
  init_login_req_ = NULL;
  service_req_ = NULL;
  e1_query_user_ = NULL;
  get_multi_infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete chat_;
    delete get_info_;
    delete logout_;
    delete init_login_req_;
    delete service_req_;
    delete e1_query_user_;
    delete get_multi_infos_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_login()) {
      if (login_ != NULL) login_->::qihoo::protocol::messages::LoginReq::Clear();
    }
    if (has_chat()) {
      if (chat_ != NULL) chat_->::qihoo::protocol::messages::ChatReq::Clear();
    }
    if (has_get_info()) {
      if (get_info_ != NULL) get_info_->::qihoo::protocol::messages::GetInfoReq::Clear();
    }
    if (has_logout()) {
      if (logout_ != NULL) logout_->::qihoo::protocol::messages::LogoutReq::Clear();
    }
    if (has_init_login_req()) {
      if (init_login_req_ != NULL) init_login_req_->::qihoo::protocol::messages::InitLoginReq::Clear();
    }
    if (has_service_req()) {
      if (service_req_ != NULL) service_req_->::qihoo::protocol::messages::Service_Req::Clear();
    }
    if (has_e1_query_user()) {
      if (e1_query_user_ != NULL) e1_query_user_->::qihoo::protocol::messages::Ex1QueryUserStatusReq::Clear();
    }
    if (has_get_multi_infos()) {
      if (get_multi_infos_ != NULL) get_multi_infos_->::qihoo::protocol::messages::GetMultiInfosReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.messages.LoginReq login = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chat;
        break;
      }

      // optional .qihoo.protocol.messages.ChatReq chat = 3;
      case 3: {
        if (tag == 26) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_info;
        break;
      }

      // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
      case 5: {
        if (tag == 42) {
         parse_get_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_logout;
        break;
      }

      // optional .qihoo.protocol.messages.LogoutReq logout = 6;
      case 6: {
        if (tag == 50) {
         parse_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_init_login_req;
        break;
      }

      // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
      case 9: {
        if (tag == 74) {
         parse_init_login_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_login_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_service_req;
        break;
      }

      // optional .qihoo.protocol.messages.Service_Req service_req = 11;
      case 11: {
        if (tag == 90) {
         parse_service_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_e1_query_user;
        break;
      }

      // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
      case 12: {
        if (tag == 98) {
         parse_e1_query_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e1_query_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_get_multi_infos;
        break;
      }

      // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
      case 100: {
        if (tag == 802) {
         parse_get_multi_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_multi_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Request)
  // optional .qihoo.protocol.messages.LoginReq login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->login(), output);
  }

  // optional .qihoo.protocol.messages.ChatReq chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chat(), output);
  }

  // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
  if (has_get_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_info(), output);
  }

  // optional .qihoo.protocol.messages.LogoutReq logout = 6;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->logout(), output);
  }

  // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
  if (has_init_login_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->init_login_req(), output);
  }

  // optional .qihoo.protocol.messages.Service_Req service_req = 11;
  if (has_service_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->service_req(), output);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
  if (has_e1_query_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->e1_query_user(), output);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
  if (has_get_multi_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->get_multi_infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Request)
  // optional .qihoo.protocol.messages.LoginReq login = 2;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->login(), target);
  }

  // optional .qihoo.protocol.messages.ChatReq chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chat(), target);
  }

  // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
  if (has_get_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_info(), target);
  }

  // optional .qihoo.protocol.messages.LogoutReq logout = 6;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->logout(), target);
  }

  // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
  if (has_init_login_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->init_login_req(), target);
  }

  // optional .qihoo.protocol.messages.Service_Req service_req = 11;
  if (has_service_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->service_req(), target);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
  if (has_e1_query_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->e1_query_user(), target);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
  if (has_get_multi_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->get_multi_infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.messages.LoginReq login = 2;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .qihoo.protocol.messages.ChatReq chat = 3;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

    // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
    if (has_get_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_info());
    }

    // optional .qihoo.protocol.messages.LogoutReq logout = 6;
    if (has_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout());
    }

    // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
    if (has_init_login_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_login_req());
    }

    // optional .qihoo.protocol.messages.Service_Req service_req = 11;
    if (has_service_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_req());
    }

    // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
    if (has_e1_query_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->e1_query_user());
    }

    // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
    if (has_get_multi_infos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_multi_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      mutable_login()->::qihoo::protocol::messages::LoginReq::MergeFrom(from.login());
    }
    if (from.has_chat()) {
      mutable_chat()->::qihoo::protocol::messages::ChatReq::MergeFrom(from.chat());
    }
    if (from.has_get_info()) {
      mutable_get_info()->::qihoo::protocol::messages::GetInfoReq::MergeFrom(from.get_info());
    }
    if (from.has_logout()) {
      mutable_logout()->::qihoo::protocol::messages::LogoutReq::MergeFrom(from.logout());
    }
    if (from.has_init_login_req()) {
      mutable_init_login_req()->::qihoo::protocol::messages::InitLoginReq::MergeFrom(from.init_login_req());
    }
    if (from.has_service_req()) {
      mutable_service_req()->::qihoo::protocol::messages::Service_Req::MergeFrom(from.service_req());
    }
    if (from.has_e1_query_user()) {
      mutable_e1_query_user()->::qihoo::protocol::messages::Ex1QueryUserStatusReq::MergeFrom(from.e1_query_user());
    }
    if (from.has_get_multi_infos()) {
      mutable_get_multi_infos()->::qihoo::protocol::messages::GetMultiInfosReq::MergeFrom(from.get_multi_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_chat()) {
    if (!this->chat().IsInitialized()) return false;
  }
  if (has_get_info()) {
    if (!this->get_info().IsInitialized()) return false;
  }
  if (has_init_login_req()) {
    if (!this->init_login_req().IsInitialized()) return false;
  }
  if (has_service_req()) {
    if (!this->service_req().IsInitialized()) return false;
  }
  if (has_e1_query_user()) {
    if (!this->e1_query_user().IsInitialized()) return false;
  }
  if (has_get_multi_infos()) {
    if (!this->get_multi_infos().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(chat_, other->chat_);
    std::swap(get_info_, other->get_info_);
    std::swap(logout_, other->logout_);
    std::swap(init_login_req_, other->init_login_req_);
    std::swap(service_req_, other->service_req_);
    std::swap(e1_query_user_, other->e1_query_user_);
    std::swap(get_multi_infos_, other->get_multi_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kErrorFieldNumber;
const int Response::kLoginFieldNumber;
const int Response::kChatFieldNumber;
const int Response::kGetInfoFieldNumber;
const int Response::kLogoutFieldNumber;
const int Response::kInitLoginRespFieldNumber;
const int Response::kServiceRespFieldNumber;
const int Response::kE1QueryUserFieldNumber;
const int Response::kGetMultiInfosFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Response)
}

void Response::InitAsDefaultInstance() {
  error_ = const_cast< ::qihoo::protocol::messages::Error*>(&::qihoo::protocol::messages::Error::default_instance());
  login_ = const_cast< ::qihoo::protocol::messages::LoginResp*>(&::qihoo::protocol::messages::LoginResp::default_instance());
  chat_ = const_cast< ::qihoo::protocol::messages::ChatResp*>(&::qihoo::protocol::messages::ChatResp::default_instance());
  get_info_ = const_cast< ::qihoo::protocol::messages::GetInfoResp*>(&::qihoo::protocol::messages::GetInfoResp::default_instance());
  logout_ = const_cast< ::qihoo::protocol::messages::LogoutResp*>(&::qihoo::protocol::messages::LogoutResp::default_instance());
  init_login_resp_ = const_cast< ::qihoo::protocol::messages::InitLoginResp*>(&::qihoo::protocol::messages::InitLoginResp::default_instance());
  service_resp_ = const_cast< ::qihoo::protocol::messages::Service_Resp*>(&::qihoo::protocol::messages::Service_Resp::default_instance());
  e1_query_user_ = const_cast< ::qihoo::protocol::messages::Ex1QueryUserStatusResp*>(&::qihoo::protocol::messages::Ex1QueryUserStatusResp::default_instance());
  get_multi_infos_ = const_cast< ::qihoo::protocol::messages::GetMultiInfosResp*>(&::qihoo::protocol::messages::GetMultiInfosResp::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  login_ = NULL;
  chat_ = NULL;
  get_info_ = NULL;
  logout_ = NULL;
  init_login_resp_ = NULL;
  service_resp_ = NULL;
  e1_query_user_ = NULL;
  get_multi_infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
    delete login_;
    delete chat_;
    delete get_info_;
    delete logout_;
    delete init_login_resp_;
    delete service_resp_;
    delete e1_query_user_;
    delete get_multi_infos_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_error()) {
      if (error_ != NULL) error_->::qihoo::protocol::messages::Error::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::qihoo::protocol::messages::LoginResp::Clear();
    }
    if (has_chat()) {
      if (chat_ != NULL) chat_->::qihoo::protocol::messages::ChatResp::Clear();
    }
    if (has_get_info()) {
      if (get_info_ != NULL) get_info_->::qihoo::protocol::messages::GetInfoResp::Clear();
    }
    if (has_logout()) {
      if (logout_ != NULL) logout_->::qihoo::protocol::messages::LogoutResp::Clear();
    }
    if (has_init_login_resp()) {
      if (init_login_resp_ != NULL) init_login_resp_->::qihoo::protocol::messages::InitLoginResp::Clear();
    }
    if (has_service_resp()) {
      if (service_resp_ != NULL) service_resp_->::qihoo::protocol::messages::Service_Resp::Clear();
    }
    if (has_e1_query_user()) {
      if (e1_query_user_ != NULL) e1_query_user_->::qihoo::protocol::messages::Ex1QueryUserStatusResp::Clear();
    }
  }
  if (has_get_multi_infos()) {
    if (get_multi_infos_ != NULL) get_multi_infos_->::qihoo::protocol::messages::GetMultiInfosResp::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.messages.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_login;
        break;
      }

      // optional .qihoo.protocol.messages.LoginResp login = 3;
      case 3: {
        if (tag == 26) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chat;
        break;
      }

      // optional .qihoo.protocol.messages.ChatResp chat = 4;
      case 4: {
        if (tag == 34) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_get_info;
        break;
      }

      // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
      case 6: {
        if (tag == 50) {
         parse_get_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_logout;
        break;
      }

      // optional .qihoo.protocol.messages.LogoutResp logout = 7;
      case 7: {
        if (tag == 58) {
         parse_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_init_login_resp;
        break;
      }

      // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
      case 10: {
        if (tag == 82) {
         parse_init_login_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_login_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_service_resp;
        break;
      }

      // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
      case 12: {
        if (tag == 98) {
         parse_service_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_e1_query_user;
        break;
      }

      // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
      case 13: {
        if (tag == 106) {
         parse_e1_query_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e1_query_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_get_multi_infos;
        break;
      }

      // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
      case 100: {
        if (tag == 802) {
         parse_get_multi_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_multi_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Response)
  // optional .qihoo.protocol.messages.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional .qihoo.protocol.messages.LoginResp login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login(), output);
  }

  // optional .qihoo.protocol.messages.ChatResp chat = 4;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chat(), output);
  }

  // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
  if (has_get_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->get_info(), output);
  }

  // optional .qihoo.protocol.messages.LogoutResp logout = 7;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->logout(), output);
  }

  // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
  if (has_init_login_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->init_login_resp(), output);
  }

  // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
  if (has_service_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->service_resp(), output);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
  if (has_e1_query_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->e1_query_user(), output);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
  if (has_get_multi_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->get_multi_infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Response)
  // optional .qihoo.protocol.messages.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional .qihoo.protocol.messages.LoginResp login = 3;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login(), target);
  }

  // optional .qihoo.protocol.messages.ChatResp chat = 4;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chat(), target);
  }

  // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
  if (has_get_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->get_info(), target);
  }

  // optional .qihoo.protocol.messages.LogoutResp logout = 7;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->logout(), target);
  }

  // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
  if (has_init_login_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->init_login_resp(), target);
  }

  // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
  if (has_service_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->service_resp(), target);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
  if (has_e1_query_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->e1_query_user(), target);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
  if (has_get_multi_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->get_multi_infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.messages.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional .qihoo.protocol.messages.LoginResp login = 3;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .qihoo.protocol.messages.ChatResp chat = 4;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

    // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
    if (has_get_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_info());
    }

    // optional .qihoo.protocol.messages.LogoutResp logout = 7;
    if (has_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout());
    }

    // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
    if (has_init_login_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_login_resp());
    }

    // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
    if (has_service_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_resp());
    }

    // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
    if (has_e1_query_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->e1_query_user());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
    if (has_get_multi_infos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_multi_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::qihoo::protocol::messages::Error::MergeFrom(from.error());
    }
    if (from.has_login()) {
      mutable_login()->::qihoo::protocol::messages::LoginResp::MergeFrom(from.login());
    }
    if (from.has_chat()) {
      mutable_chat()->::qihoo::protocol::messages::ChatResp::MergeFrom(from.chat());
    }
    if (from.has_get_info()) {
      mutable_get_info()->::qihoo::protocol::messages::GetInfoResp::MergeFrom(from.get_info());
    }
    if (from.has_logout()) {
      mutable_logout()->::qihoo::protocol::messages::LogoutResp::MergeFrom(from.logout());
    }
    if (from.has_init_login_resp()) {
      mutable_init_login_resp()->::qihoo::protocol::messages::InitLoginResp::MergeFrom(from.init_login_resp());
    }
    if (from.has_service_resp()) {
      mutable_service_resp()->::qihoo::protocol::messages::Service_Resp::MergeFrom(from.service_resp());
    }
    if (from.has_e1_query_user()) {
      mutable_e1_query_user()->::qihoo::protocol::messages::Ex1QueryUserStatusResp::MergeFrom(from.e1_query_user());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_multi_infos()) {
      mutable_get_multi_infos()->::qihoo::protocol::messages::GetMultiInfosResp::MergeFrom(from.get_multi_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_chat()) {
    if (!this->chat().IsInitialized()) return false;
  }
  if (has_get_info()) {
    if (!this->get_info().IsInitialized()) return false;
  }
  if (has_logout()) {
    if (!this->logout().IsInitialized()) return false;
  }
  if (has_init_login_resp()) {
    if (!this->init_login_resp().IsInitialized()) return false;
  }
  if (has_service_resp()) {
    if (!this->service_resp().IsInitialized()) return false;
  }
  if (has_e1_query_user()) {
    if (!this->e1_query_user().IsInitialized()) return false;
  }
  if (has_get_multi_infos()) {
    if (!this->get_multi_infos().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(login_, other->login_);
    std::swap(chat_, other->chat_);
    std::swap(get_info_, other->get_info_);
    std::swap(logout_, other->logout_);
    std::swap(init_login_resp_, other->init_login_resp_);
    std::swap(service_resp_, other->service_resp_);
    std::swap(e1_query_user_, other->e1_query_user_);
    std::swap(get_multi_infos_, other->get_multi_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewMessageNotify::kInfoTypeFieldNumber;
const int NewMessageNotify::kInfoContentFieldNumber;
const int NewMessageNotify::kInfoIdFieldNumber;
const int NewMessageNotify::kQueryAfterSecondsFieldNumber;
#endif  // !_MSC_VER

NewMessageNotify::NewMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.NewMessageNotify)
}

void NewMessageNotify::InitAsDefaultInstance() {
}

NewMessageNotify::NewMessageNotify(const NewMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.NewMessageNotify)
}

void NewMessageNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_id_ = GOOGLE_LONGLONG(0);
  query_after_seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewMessageNotify::~NewMessageNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.NewMessageNotify)
  SharedDtor();
}

void NewMessageNotify::SharedDtor() {
  if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_type_;
  }
  if (info_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_content_;
  }
  if (this != default_instance_) {
  }
}

void NewMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewMessageNotify_descriptor_;
}

const NewMessageNotify& NewMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

NewMessageNotify* NewMessageNotify::default_instance_ = NULL;

NewMessageNotify* NewMessageNotify::New() const {
  return new NewMessageNotify;
}

void NewMessageNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewMessageNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(info_id_, query_after_seconds_);
    if (has_info_type()) {
      if (info_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_type_->clear();
      }
    }
    if (has_info_content()) {
      if (info_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.NewMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info_content;
        break;
      }

      // optional bytes info_content = 2;
      case 2: {
        if (tag == 18) {
         parse_info_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_info_id;
        break;
      }

      // optional int64 info_id = 3;
      case 3: {
        if (tag == 24) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_query_after_seconds;
        break;
      }

      // optional uint32 query_after_seconds = 4;
      case 4: {
        if (tag == 32) {
         parse_query_after_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_after_seconds_)));
          set_has_query_after_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.NewMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.NewMessageNotify)
  return false;
#undef DO_
}

void NewMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.NewMessageNotify)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // optional bytes info_content = 2;
  if (has_info_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->info_content(), output);
  }

  // optional int64 info_id = 3;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->info_id(), output);
  }

  // optional uint32 query_after_seconds = 4;
  if (has_query_after_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->query_after_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.NewMessageNotify)
}

::google::protobuf::uint8* NewMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.NewMessageNotify)
  // required string info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // optional bytes info_content = 2;
  if (has_info_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->info_content(), target);
  }

  // optional int64 info_id = 3;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->info_id(), target);
  }

  // optional uint32 query_after_seconds = 4;
  if (has_query_after_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->query_after_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.NewMessageNotify)
  return target;
}

int NewMessageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info_type = 1;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_type());
    }

    // optional bytes info_content = 2;
    if (has_info_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_content());
    }

    // optional int64 info_id = 3;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->info_id());
    }

    // optional uint32 query_after_seconds = 4;
    if (has_query_after_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_after_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewMessageNotify::MergeFrom(const NewMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_info_content()) {
      set_info_content(from.info_content());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_query_after_seconds()) {
      set_query_after_seconds(from.query_after_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMessageNotify::CopyFrom(const NewMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NewMessageNotify::Swap(NewMessageNotify* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    std::swap(info_content_, other->info_content_);
    std::swap(info_id_, other->info_id_);
    std::swap(query_after_seconds_, other->query_after_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewMessageNotify_descriptor_;
  metadata.reflection = NewMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReLoginNotify::kNewIpFieldNumber;
#endif  // !_MSC_VER

ReLoginNotify::ReLoginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ReLoginNotify)
}

void ReLoginNotify::InitAsDefaultInstance() {
}

ReLoginNotify::ReLoginNotify(const ReLoginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ReLoginNotify)
}

void ReLoginNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  new_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReLoginNotify::~ReLoginNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ReLoginNotify)
  SharedDtor();
}

void ReLoginNotify::SharedDtor() {
  if (new_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_ip_;
  }
  if (this != default_instance_) {
  }
}

void ReLoginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLoginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLoginNotify_descriptor_;
}

const ReLoginNotify& ReLoginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

ReLoginNotify* ReLoginNotify::default_instance_ = NULL;

ReLoginNotify* ReLoginNotify::New() const {
  return new ReLoginNotify;
}

void ReLoginNotify::Clear() {
  if (has_new_ip()) {
    if (new_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      new_ip_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReLoginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ReLoginNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_ip().data(), this->new_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ReLoginNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ReLoginNotify)
  return false;
#undef DO_
}

void ReLoginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ReLoginNotify)
  // optional string new_ip = 1;
  if (has_new_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_ip().data(), this->new_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->new_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ReLoginNotify)
}

::google::protobuf::uint8* ReLoginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ReLoginNotify)
  // optional string new_ip = 1;
  if (has_new_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_ip().data(), this->new_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ReLoginNotify)
  return target;
}

int ReLoginNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string new_ip = 1;
    if (has_new_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLoginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReLoginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReLoginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReLoginNotify::MergeFrom(const ReLoginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_ip()) {
      set_new_ip(from.new_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReLoginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLoginNotify::CopyFrom(const ReLoginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLoginNotify::IsInitialized() const {

  return true;
}

void ReLoginNotify::Swap(ReLoginNotify* other) {
  if (other != this) {
    std::swap(new_ip_, other->new_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReLoginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReLoginNotify_descriptor_;
  metadata.reflection = ReLoginNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReConnectNotify::kIpFieldNumber;
const int ReConnectNotify::kPortFieldNumber;
const int ReConnectNotify::kMoreIpsFieldNumber;
#endif  // !_MSC_VER

ReConnectNotify::ReConnectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ReConnectNotify)
}

void ReConnectNotify::InitAsDefaultInstance() {
}

ReConnectNotify::ReConnectNotify(const ReConnectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ReConnectNotify)
}

void ReConnectNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReConnectNotify::~ReConnectNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ReConnectNotify)
  SharedDtor();
}

void ReConnectNotify::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ReConnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReConnectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReConnectNotify_descriptor_;
}

const ReConnectNotify& ReConnectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

ReConnectNotify* ReConnectNotify::default_instance_ = NULL;

ReConnectNotify* ReConnectNotify::New() const {
  return new ReConnectNotify;
}

void ReConnectNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  more_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReConnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ReConnectNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_more_ips;
        break;
      }

      // repeated string more_ips = 3;
      case 3: {
        if (tag == 26) {
         parse_more_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_more_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->more_ips(this->more_ips_size() - 1).data(),
            this->more_ips(this->more_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "more_ips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_more_ips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ReConnectNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ReConnectNotify)
  return false;
#undef DO_
}

void ReConnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ReConnectNotify)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // repeated string more_ips = 3;
  for (int i = 0; i < this->more_ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->more_ips(i).data(), this->more_ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "more_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->more_ips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ReConnectNotify)
}

::google::protobuf::uint8* ReConnectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ReConnectNotify)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // repeated string more_ips = 3;
  for (int i = 0; i < this->more_ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->more_ips(i).data(), this->more_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "more_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->more_ips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ReConnectNotify)
  return target;
}

int ReConnectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  // repeated string more_ips = 3;
  total_size += 1 * this->more_ips_size();
  for (int i = 0; i < this->more_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->more_ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReConnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReConnectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReConnectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReConnectNotify::MergeFrom(const ReConnectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  more_ips_.MergeFrom(from.more_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReConnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReConnectNotify::CopyFrom(const ReConnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReConnectNotify::IsInitialized() const {

  return true;
}

void ReConnectNotify::Swap(ReConnectNotify* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    more_ips_.Swap(&other->more_ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReConnectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReConnectNotify_descriptor_;
  metadata.reflection = ReConnectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notify::kNewinfoNtfFieldNumber;
const int Notify::kReloginNtfFieldNumber;
const int Notify::kReconnectNtfFieldNumber;
#endif  // !_MSC_VER

Notify::Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Notify)
}

void Notify::InitAsDefaultInstance() {
  newinfo_ntf_ = const_cast< ::qihoo::protocol::messages::NewMessageNotify*>(&::qihoo::protocol::messages::NewMessageNotify::default_instance());
  relogin_ntf_ = const_cast< ::qihoo::protocol::messages::ReLoginNotify*>(&::qihoo::protocol::messages::ReLoginNotify::default_instance());
  reconnect_ntf_ = const_cast< ::qihoo::protocol::messages::ReConnectNotify*>(&::qihoo::protocol::messages::ReConnectNotify::default_instance());
}

Notify::Notify(const Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Notify)
}

void Notify::SharedCtor() {
  _cached_size_ = 0;
  newinfo_ntf_ = NULL;
  relogin_ntf_ = NULL;
  reconnect_ntf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notify::~Notify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Notify)
  SharedDtor();
}

void Notify::SharedDtor() {
  if (this != default_instance_) {
    delete newinfo_ntf_;
    delete relogin_ntf_;
    delete reconnect_ntf_;
  }
}

void Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notify_descriptor_;
}

const Notify& Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Notify* Notify::default_instance_ = NULL;

Notify* Notify::New() const {
  return new Notify;
}

void Notify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_newinfo_ntf()) {
      if (newinfo_ntf_ != NULL) newinfo_ntf_->::qihoo::protocol::messages::NewMessageNotify::Clear();
    }
    if (has_relogin_ntf()) {
      if (relogin_ntf_ != NULL) relogin_ntf_->::qihoo::protocol::messages::ReLoginNotify::Clear();
    }
    if (has_reconnect_ntf()) {
      if (reconnect_ntf_ != NULL) reconnect_ntf_->::qihoo::protocol::messages::ReConnectNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newinfo_ntf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_relogin_ntf;
        break;
      }

      // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
      case 2: {
        if (tag == 18) {
         parse_relogin_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relogin_ntf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reconnect_ntf;
        break;
      }

      // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
      case 3: {
        if (tag == 26) {
         parse_reconnect_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reconnect_ntf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Notify)
  return false;
#undef DO_
}

void Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Notify)
  // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
  if (has_newinfo_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newinfo_ntf(), output);
  }

  // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
  if (has_relogin_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relogin_ntf(), output);
  }

  // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
  if (has_reconnect_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reconnect_ntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Notify)
}

::google::protobuf::uint8* Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Notify)
  // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
  if (has_newinfo_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newinfo_ntf(), target);
  }

  // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
  if (has_relogin_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relogin_ntf(), target);
  }

  // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
  if (has_reconnect_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reconnect_ntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Notify)
  return target;
}

int Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
    if (has_newinfo_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newinfo_ntf());
    }

    // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
    if (has_relogin_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relogin_ntf());
    }

    // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
    if (has_reconnect_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reconnect_ntf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notify::MergeFrom(const Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newinfo_ntf()) {
      mutable_newinfo_ntf()->::qihoo::protocol::messages::NewMessageNotify::MergeFrom(from.newinfo_ntf());
    }
    if (from.has_relogin_ntf()) {
      mutable_relogin_ntf()->::qihoo::protocol::messages::ReLoginNotify::MergeFrom(from.relogin_ntf());
    }
    if (from.has_reconnect_ntf()) {
      mutable_reconnect_ntf()->::qihoo::protocol::messages::ReConnectNotify::MergeFrom(from.reconnect_ntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify::CopyFrom(const Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify::IsInitialized() const {

  if (has_newinfo_ntf()) {
    if (!this->newinfo_ntf().IsInitialized()) return false;
  }
  return true;
}

void Notify::Swap(Notify* other) {
  if (other != this) {
    std::swap(newinfo_ntf_, other->newinfo_ntf_);
    std::swap(relogin_ntf_, other->relogin_ntf_);
    std::swap(reconnect_ntf_, other->reconnect_ntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notify_descriptor_;
  metadata.reflection = Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ack::kResultFieldNumber;
#endif  // !_MSC_VER

Ack::Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Ack)
}

void Ack::InitAsDefaultInstance() {
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Ack)
}

void Ack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Ack* Ack::default_instance_ = NULL;

Ack* Ack::New() const {
  return new Ack;
}

void Ack::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Ack)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Ack)
}

::google::protobuf::uint8* Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Ack)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Ack)
  return target;
}

int Ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ack::Swap(Ack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteInfo::kUsernameFieldNumber;
const int RouteInfo::kMsgExchangerFieldNumber;
const int RouteInfo::kMsgRouterFieldNumber;
#endif  // !_MSC_VER

RouteInfo::RouteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.RouteInfo)
}

void RouteInfo::InitAsDefaultInstance() {
}

RouteInfo::RouteInfo(const RouteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.RouteInfo)
}

void RouteInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_exchanger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_router_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.RouteInfo)
  SharedDtor();
}

void RouteInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (msg_exchanger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_exchanger_;
  }
  if (msg_router_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_router_;
  }
  if (this != default_instance_) {
  }
}

void RouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteInfo_descriptor_;
}

const RouteInfo& RouteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

RouteInfo* RouteInfo::default_instance_ = NULL;

RouteInfo* RouteInfo::New() const {
  return new RouteInfo;
}

void RouteInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_msg_exchanger()) {
      if (msg_exchanger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_exchanger_->clear();
      }
    }
    if (has_msg_router()) {
      if (msg_router_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_router_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.RouteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_exchanger;
        break;
      }

      // required string msg_exchanger = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_exchanger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_exchanger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_exchanger().data(), this->msg_exchanger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_exchanger");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_router;
        break;
      }

      // required string msg_router = 3;
      case 3: {
        if (tag == 26) {
         parse_msg_router:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_router()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_router().data(), this->msg_router().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_router");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.RouteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.RouteInfo)
  return false;
#undef DO_
}

void RouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.RouteInfo)
  // required bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // required string msg_exchanger = 2;
  if (has_msg_exchanger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_exchanger().data(), this->msg_exchanger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_exchanger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_exchanger(), output);
  }

  // required string msg_router = 3;
  if (has_msg_router()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_router().data(), this->msg_router().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_router");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_router(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.RouteInfo)
}

::google::protobuf::uint8* RouteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.RouteInfo)
  // required bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // required string msg_exchanger = 2;
  if (has_msg_exchanger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_exchanger().data(), this->msg_exchanger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_exchanger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_exchanger(), target);
  }

  // required string msg_router = 3;
  if (has_msg_router()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_router().data(), this->msg_router().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_router");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_router(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.RouteInfo)
  return target;
}

int RouteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required string msg_exchanger = 2;
    if (has_msg_exchanger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_exchanger());
    }

    // required string msg_router = 3;
    if (has_msg_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_router());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_msg_exchanger()) {
      set_msg_exchanger(from.msg_exchanger());
    }
    if (from.has_msg_router()) {
      set_msg_router(from.msg_router());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RouteInfo::Swap(RouteInfo* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(msg_exchanger_, other->msg_exchanger_);
    std::swap(msg_router_, other->msg_router_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteInfo_descriptor_;
  metadata.reflection = RouteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proxy::kSenderFieldNumber;
const int Proxy::kReceiverFieldNumber;
#endif  // !_MSC_VER

Proxy::Proxy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Proxy)
}

void Proxy::InitAsDefaultInstance() {
}

Proxy::Proxy(const Proxy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Proxy)
}

void Proxy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proxy::~Proxy() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Proxy)
  SharedDtor();
}

void Proxy::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void Proxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proxy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proxy_descriptor_;
}

const Proxy& Proxy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Proxy* Proxy::default_instance_ = NULL;

Proxy* Proxy::New() const {
  return new Proxy;
}

void Proxy::Clear() {
  if (has_sender()) {
    if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sender_->clear();
    }
  }
  receiver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Proxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_receiver;
        break;
      }

      // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
      case 2: {
        if (tag == 18) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_receiver;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Proxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Proxy)
  return false;
#undef DO_
}

void Proxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Proxy)
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
  for (int i = 0; i < this->receiver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiver(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Proxy)
}

::google::protobuf::uint8* Proxy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Proxy)
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
  for (int i = 0; i < this->receiver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiver(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Proxy)
  return target;
}

int Proxy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
  total_size += 1 * this->receiver_size();
  for (int i = 0; i < this->receiver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receiver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proxy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proxy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proxy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proxy::MergeFrom(const Proxy& from) {
  GOOGLE_CHECK_NE(&from, this);
  receiver_.MergeFrom(from.receiver_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proxy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proxy::CopyFrom(const Proxy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proxy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->receiver())) return false;
  return true;
}

void Proxy::Swap(Proxy* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    receiver_.Swap(&other->receiver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proxy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proxy_descriptor_;
  metadata.reflection = Proxy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMsgidFieldNumber;
const int Message::kSnFieldNumber;
const int Message::kSenderFieldNumber;
const int Message::kReceiverFieldNumber;
const int Message::kReceiverTypeFieldNumber;
const int Message::kReqFieldNumber;
const int Message::kRespFieldNumber;
const int Message::kNotifyFieldNumber;
const int Message::kAckFieldNumber;
const int Message::kProxyMesgFieldNumber;
const int Message::kClientDataFieldNumber;
const int Message::kSenderTypeFieldNumber;
const int Message::kSenderJidFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Message)
}

void Message::InitAsDefaultInstance() {
  req_ = const_cast< ::qihoo::protocol::messages::Request*>(&::qihoo::protocol::messages::Request::default_instance());
  resp_ = const_cast< ::qihoo::protocol::messages::Response*>(&::qihoo::protocol::messages::Response::default_instance());
  notify_ = const_cast< ::qihoo::protocol::messages::Notify*>(&::qihoo::protocol::messages::Notify::default_instance());
  ack_ = const_cast< ::qihoo::protocol::messages::Ack*>(&::qihoo::protocol::messages::Ack::default_instance());
  proxy_mesg_ = const_cast< ::qihoo::protocol::messages::Proxy*>(&::qihoo::protocol::messages::Proxy::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  sn_ = GOOGLE_ULONGLONG(0);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_ = NULL;
  resp_ = NULL;
  notify_ = NULL;
  ack_ = NULL;
  proxy_mesg_ = NULL;
  client_data_ = GOOGLE_ULONGLONG(0);
  sender_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_jid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (receiver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiver_;
  }
  if (receiver_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiver_type_;
  }
  if (sender_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_type_;
  }
  if (sender_jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_jid_;
  }
  if (this != default_instance_) {
    delete req_;
    delete resp_;
    delete notify_;
    delete ack_;
    delete proxy_mesg_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_address_5fbook_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    msgid_ = 0u;
    sn_ = GOOGLE_ULONGLONG(0);
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receiver_->clear();
      }
    }
    if (has_receiver_type()) {
      if (receiver_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receiver_type_->clear();
      }
    }
    if (has_req()) {
      if (req_ != NULL) req_->::qihoo::protocol::messages::Request::Clear();
    }
    if (has_resp()) {
      if (resp_ != NULL) resp_->::qihoo::protocol::messages::Response::Clear();
    }
    if (has_notify()) {
      if (notify_ != NULL) notify_->::qihoo::protocol::messages::Notify::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_ack()) {
      if (ack_ != NULL) ack_->::qihoo::protocol::messages::Ack::Clear();
    }
    if (has_proxy_mesg()) {
      if (proxy_mesg_ != NULL) proxy_mesg_->::qihoo::protocol::messages::Proxy::Clear();
    }
    client_data_ = GOOGLE_ULONGLONG(0);
    if (has_sender_type()) {
      if (sender_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_type_->clear();
      }
    }
    if (has_sender_jid()) {
      if (sender_jid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_jid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sn;
        break;
      }

      // required uint64 sn = 2;
      case 2: {
        if (tag == 16) {
         parse_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
          set_has_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional string sender = 3;
      case 3: {
        if (tag == 26) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_receiver;
        break;
      }

      // optional string receiver = 4;
      case 4: {
        if (tag == 34) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receiver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_receiver_type;
        break;
      }

      // optional string receiver_type = 5;
      case 5: {
        if (tag == 42) {
         parse_receiver_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiver_type().data(), this->receiver_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receiver_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_req;
        break;
      }

      // optional .qihoo.protocol.messages.Request req = 6;
      case 6: {
        if (tag == 50) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_resp;
        break;
      }

      // optional .qihoo.protocol.messages.Response resp = 7;
      case 7: {
        if (tag == 58) {
         parse_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_notify;
        break;
      }

      // optional .qihoo.protocol.messages.Notify notify = 8;
      case 8: {
        if (tag == 66) {
         parse_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ack;
        break;
      }

      // optional .qihoo.protocol.messages.Ack ack = 9;
      case 9: {
        if (tag == 74) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_proxy_mesg;
        break;
      }

      // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
      case 10: {
        if (tag == 82) {
         parse_proxy_mesg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy_mesg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_client_data;
        break;
      }

      // optional uint64 client_data = 11;
      case 11: {
        if (tag == 88) {
         parse_client_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_data_)));
          set_has_client_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sender_type;
        break;
      }

      // optional string sender_type = 12;
      case 12: {
        if (tag == 98) {
         parse_sender_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_type().data(), this->sender_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sender_jid;
        break;
      }

      // optional string sender_jid = 13;
      case 13: {
        if (tag == 106) {
         parse_sender_jid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_jid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_jid().data(), this->sender_jid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_jid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Message)
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required uint64 sn = 2;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sn(), output);
  }

  // optional string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender(), output);
  }

  // optional string receiver = 4;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receiver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->receiver(), output);
  }

  // optional string receiver_type = 5;
  if (has_receiver_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver_type().data(), this->receiver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receiver_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->receiver_type(), output);
  }

  // optional .qihoo.protocol.messages.Request req = 6;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->req(), output);
  }

  // optional .qihoo.protocol.messages.Response resp = 7;
  if (has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->resp(), output);
  }

  // optional .qihoo.protocol.messages.Notify notify = 8;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->notify(), output);
  }

  // optional .qihoo.protocol.messages.Ack ack = 9;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ack(), output);
  }

  // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
  if (has_proxy_mesg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->proxy_mesg(), output);
  }

  // optional uint64 client_data = 11;
  if (has_client_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->client_data(), output);
  }

  // optional string sender_type = 12;
  if (has_sender_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_type().data(), this->sender_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sender_type(), output);
  }

  // optional string sender_jid = 13;
  if (has_sender_jid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_jid().data(), this->sender_jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_jid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sender_jid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Message)
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required uint64 sn = 2;
  if (has_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sn(), target);
  }

  // optional string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  // optional string receiver = 4;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receiver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receiver(), target);
  }

  // optional string receiver_type = 5;
  if (has_receiver_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver_type().data(), this->receiver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receiver_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->receiver_type(), target);
  }

  // optional .qihoo.protocol.messages.Request req = 6;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->req(), target);
  }

  // optional .qihoo.protocol.messages.Response resp = 7;
  if (has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->resp(), target);
  }

  // optional .qihoo.protocol.messages.Notify notify = 8;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->notify(), target);
  }

  // optional .qihoo.protocol.messages.Ack ack = 9;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ack(), target);
  }

  // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
  if (has_proxy_mesg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->proxy_mesg(), target);
  }

  // optional uint64 client_data = 11;
  if (has_client_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->client_data(), target);
  }

  // optional string sender_type = 12;
  if (has_sender_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_type().data(), this->sender_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sender_type(), target);
  }

  // optional string sender_jid = 13;
  if (has_sender_jid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_jid().data(), this->sender_jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_jid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sender_jid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required uint64 sn = 2;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sn());
    }

    // optional string sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string receiver = 4;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional string receiver_type = 5;
    if (has_receiver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_type());
    }

    // optional .qihoo.protocol.messages.Request req = 6;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // optional .qihoo.protocol.messages.Response resp = 7;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resp());
    }

    // optional .qihoo.protocol.messages.Notify notify = 8;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .qihoo.protocol.messages.Ack ack = 9;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
    if (has_proxy_mesg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxy_mesg());
    }

    // optional uint64 client_data = 11;
    if (has_client_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_data());
    }

    // optional string sender_type = 12;
    if (has_sender_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_type());
    }

    // optional string sender_jid = 13;
    if (has_sender_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_jid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_receiver_type()) {
      set_receiver_type(from.receiver_type());
    }
    if (from.has_req()) {
      mutable_req()->::qihoo::protocol::messages::Request::MergeFrom(from.req());
    }
    if (from.has_resp()) {
      mutable_resp()->::qihoo::protocol::messages::Response::MergeFrom(from.resp());
    }
    if (from.has_notify()) {
      mutable_notify()->::qihoo::protocol::messages::Notify::MergeFrom(from.notify());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ack()) {
      mutable_ack()->::qihoo::protocol::messages::Ack::MergeFrom(from.ack());
    }
    if (from.has_proxy_mesg()) {
      mutable_proxy_mesg()->::qihoo::protocol::messages::Proxy::MergeFrom(from.proxy_mesg());
    }
    if (from.has_client_data()) {
      set_client_data(from.client_data());
    }
    if (from.has_sender_type()) {
      set_sender_type(from.sender_type());
    }
    if (from.has_sender_jid()) {
      set_sender_jid(from.sender_jid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp().IsInitialized()) return false;
  }
  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  if (has_ack()) {
    if (!this->ack().IsInitialized()) return false;
  }
  if (has_proxy_mesg()) {
    if (!this->proxy_mesg().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sn_, other->sn_);
    std::swap(sender_, other->sender_);
    std::swap(receiver_, other->receiver_);
    std::swap(receiver_type_, other->receiver_type_);
    std::swap(req_, other->req_);
    std::swap(resp_, other->resp_);
    std::swap(notify_, other->notify_);
    std::swap(ack_, other->ack_);
    std::swap(proxy_mesg_, other->proxy_mesg_);
    std::swap(client_data_, other->client_data_);
    std::swap(sender_type_, other->sender_type_);
    std::swap(sender_jid_, other->sender_jid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
